// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WBIS_2.DataModel;

#nullable disable

namespace WBIS_2.DataModel.Migrations
{
    [DbContext(typeof(WBIS2Model))]
    [Migration("20220718203049_UpdateApplicationUser")]
    partial class UpdateApplicationUser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("active_botanical_survey_areas", b =>
                {
                    b.Property<Guid>("application_user_id")
                        .HasColumnType("uuid")
                        .HasColumnName("application_user_id");

                    b.Property<Guid>("unit_id")
                        .HasColumnType("uuid")
                        .HasColumnName("unit_id");

                    b.HasKey("application_user_id", "unit_id")
                        .HasName("pk_active_botanical_survey_areas");

                    b.HasIndex("unit_id")
                        .HasDatabaseName("ix_active_botanical_survey_areas_unit_id");

                    b.ToTable("active_botanical_survey_areas", "public");
                });

            modelBuilder.Entity("active_hex160s", b =>
                {
                    b.Property<Guid>("application_user_id")
                        .HasColumnType("uuid")
                        .HasColumnName("application_user_id");

                    b.Property<Guid>("unit_id")
                        .HasColumnType("uuid")
                        .HasColumnName("unit_id");

                    b.HasKey("application_user_id", "unit_id")
                        .HasName("pk_active_hex160s");

                    b.HasIndex("unit_id")
                        .HasDatabaseName("ix_active_hex160s_unit_id");

                    b.ToTable("active_hex160s", "public");
                });

            modelBuilder.Entity("Alpine.FlexForms.DataForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("template_id");

                    b.HasKey("Id")
                        .HasName("pk_data_forms");

                    b.HasIndex("TemplateId")
                        .HasDatabaseName("ix_data_forms_template_id");

                    b.ToTable("data_forms", "flex");
                });

            modelBuilder.Entity("Alpine.FlexForms.DataFormField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<byte[]>("BinaryData")
                        .HasColumnType("bytea")
                        .HasColumnName("binary_data");

                    b.Property<bool?>("BooleanData")
                        .HasColumnType("boolean")
                        .HasColumnName("boolean_data");

                    b.Property<Guid>("DataFormId")
                        .HasColumnType("uuid")
                        .HasColumnName("data_form_id");

                    b.Property<double?>("DoubleData")
                        .HasColumnType("double precision")
                        .HasColumnName("double_data");

                    b.Property<Geometry>("Geometry")
                        .HasColumnType("geometry")
                        .HasColumnName("geometry");

                    b.Property<string>("StringData")
                        .HasColumnType("text")
                        .HasColumnName("string_data");

                    b.Property<Guid>("TemplateFieldId")
                        .HasColumnType("uuid")
                        .HasColumnName("template_field_id");

                    b.HasKey("Id")
                        .HasName("pk_data_form_fields");

                    b.HasIndex("DataFormId")
                        .HasDatabaseName("ix_data_form_fields_data_form_id");

                    b.HasIndex("TemplateFieldId")
                        .HasDatabaseName("ix_data_form_fields_template_field_id");

                    b.ToTable("data_form_fields", "flex");
                });

            modelBuilder.Entity("Alpine.FlexForms.Template", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NavigationTableField")
                        .HasColumnType("text")
                        .HasColumnName("navigation_table_field");

                    b.Property<string>("NavigationTableName")
                        .HasColumnType("text")
                        .HasColumnName("navigation_table_name");

                    b.Property<byte[]>("Report")
                        .HasColumnType("bytea")
                        .HasColumnName("report");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated");

                    b.HasKey("Id")
                        .HasName("pk_templates");

                    b.ToTable("templates", "flex");
                });

            modelBuilder.Entity("Alpine.FlexForms.TemplateField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("caption");

                    b.Property<string>("CustomScript")
                        .HasColumnType("text")
                        .HasColumnName("custom_script");

                    b.Property<int>("FieldOrder")
                        .HasColumnType("integer")
                        .HasColumnName("field_order");

                    b.Property<string>("FieldType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("field_type");

                    b.Property<int>("FontSize")
                        .HasColumnType("integer")
                        .HasColumnName("font_size");

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("bytea")
                        .HasColumnName("image_data");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean")
                        .HasColumnName("is_required");

                    b.Property<string>("TableField")
                        .HasColumnType("text")
                        .HasColumnName("table_field");

                    b.Property<string>("TableName")
                        .HasColumnType("text")
                        .HasColumnName("table_name");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("template_id");

                    b.HasKey("Id")
                        .HasName("pk_template_fields");

                    b.HasIndex("TemplateId")
                        .HasDatabaseName("ix_template_fields_template_id");

                    b.ToTable("template_fields", "flex");
                });

            modelBuilder.Entity("amphibian_surveys_hex160s", b =>
                {
                    b.Property<Guid>("amphibian_survey_id")
                        .HasColumnType("uuid")
                        .HasColumnName("amphibian_survey_id");

                    b.Property<Guid>("hex160_id")
                        .HasColumnType("uuid")
                        .HasColumnName("hex160_id");

                    b.HasKey("amphibian_survey_id", "hex160_id")
                        .HasName("pk_amphibian_surveys_hex160s");

                    b.HasIndex("hex160_id")
                        .HasDatabaseName("ix_amphibian_surveys_hex160s_hex160_id");

                    b.ToTable("amphibian_surveys_hex160s", "public");
                });

            modelBuilder.Entity("amphibian_surveys_quad75s", b =>
                {
                    b.Property<Guid>("amphibian_survey_id")
                        .HasColumnType("uuid")
                        .HasColumnName("amphibian_survey_id");

                    b.Property<Guid>("quad75_id")
                        .HasColumnType("uuid")
                        .HasColumnName("quad75_id");

                    b.HasKey("amphibian_survey_id", "quad75_id")
                        .HasName("pk_amphibian_surveys_quad75s");

                    b.HasIndex("quad75_id")
                        .HasDatabaseName("ix_amphibian_surveys_quad75s_quad75_id");

                    b.ToTable("amphibian_surveys_quad75s", "public");
                });

            modelBuilder.Entity("amphibian_surveys_watersheds", b =>
                {
                    b.Property<Guid>("amphibian_survey_id")
                        .HasColumnType("uuid")
                        .HasColumnName("amphibian_survey_id");

                    b.Property<Guid>("watershed_id")
                        .HasColumnType("uuid")
                        .HasColumnName("watershed_id");

                    b.HasKey("amphibian_survey_id", "watershed_id")
                        .HasName("pk_amphibian_surveys_watersheds");

                    b.HasIndex("watershed_id")
                        .HasDatabaseName("ix_amphibian_surveys_watersheds_watershed_id");

                    b.ToTable("amphibian_surveys_watersheds", "public");
                });

            modelBuilder.Entity("botanical_scopings_districts", b =>
                {
                    b.Property<Guid>("botanical_scoping_id")
                        .HasColumnType("uuid")
                        .HasColumnName("botanical_scoping_id");

                    b.Property<Guid>("district_id")
                        .HasColumnType("uuid")
                        .HasColumnName("district_id");

                    b.HasKey("botanical_scoping_id", "district_id")
                        .HasName("pk_botanical_scopings_districts");

                    b.HasIndex("district_id")
                        .HasDatabaseName("ix_botanical_scopings_districts_district_id");

                    b.ToTable("botanical_scopings_districts", "public");
                });

            modelBuilder.Entity("botanical_scopings_quad75s", b =>
                {
                    b.Property<Guid>("botanical_scoping_id")
                        .HasColumnType("uuid")
                        .HasColumnName("botanical_scoping_id");

                    b.Property<Guid>("quad75_id")
                        .HasColumnType("uuid")
                        .HasColumnName("quad75_id");

                    b.HasKey("botanical_scoping_id", "quad75_id")
                        .HasName("pk_botanical_scopings_quad75s");

                    b.HasIndex("quad75_id")
                        .HasDatabaseName("ix_botanical_scopings_quad75s_quad75_id");

                    b.ToTable("botanical_scopings_quad75s", "public");
                });

            modelBuilder.Entity("botanical_scopings_watersheds", b =>
                {
                    b.Property<Guid>("botanical_scoping_id")
                        .HasColumnType("uuid")
                        .HasColumnName("botanical_scoping_id");

                    b.Property<Guid>("watershed_id")
                        .HasColumnType("uuid")
                        .HasColumnName("watershed_id");

                    b.HasKey("botanical_scoping_id", "watershed_id")
                        .HasName("pk_botanical_scopings_watersheds");

                    b.HasIndex("watershed_id")
                        .HasDatabaseName("ix_botanical_scopings_watersheds_watershed_id");

                    b.ToTable("botanical_scopings_watersheds", "public");
                });

            modelBuilder.Entity("botanical_survey_areas_hex160s", b =>
                {
                    b.Property<Guid>("botanical_survey_area_id")
                        .HasColumnType("uuid")
                        .HasColumnName("botanical_survey_area_id");

                    b.Property<Guid>("hex160_id")
                        .HasColumnType("uuid")
                        .HasColumnName("hex160_id");

                    b.HasKey("botanical_survey_area_id", "hex160_id")
                        .HasName("pk_botanical_survey_areas_hex160s");

                    b.HasIndex("hex160_id")
                        .HasDatabaseName("ix_botanical_survey_areas_hex160s_hex160_id");

                    b.ToTable("botanical_survey_areas_hex160s", "public");
                });

            modelBuilder.Entity("botanical_survey_areas_quad75s", b =>
                {
                    b.Property<Guid>("botanical_survey_area_id")
                        .HasColumnType("uuid")
                        .HasColumnName("botanical_survey_area_id");

                    b.Property<Guid>("quad75_id")
                        .HasColumnType("uuid")
                        .HasColumnName("quad75_id");

                    b.HasKey("botanical_survey_area_id", "quad75_id")
                        .HasName("pk_botanical_survey_areas_quad75s");

                    b.HasIndex("quad75_id")
                        .HasDatabaseName("ix_botanical_survey_areas_quad75s_quad75_id");

                    b.ToTable("botanical_survey_areas_quad75s", "public");
                });

            modelBuilder.Entity("botanical_survey_areas_watersheds", b =>
                {
                    b.Property<Guid>("botanical_survey_area_id")
                        .HasColumnType("uuid")
                        .HasColumnName("botanical_survey_area_id");

                    b.Property<Guid>("watershed_id")
                        .HasColumnType("uuid")
                        .HasColumnName("watershed_id");

                    b.HasKey("botanical_survey_area_id", "watershed_id")
                        .HasName("pk_botanical_survey_areas_watersheds");

                    b.HasIndex("watershed_id")
                        .HasDatabaseName("ix_botanical_survey_areas_watersheds_watershed_id");

                    b.ToTable("botanical_survey_areas_watersheds", "public");
                });

            modelBuilder.Entity("botanical_surveys_hex160s", b =>
                {
                    b.Property<Guid>("botanical_survey_id")
                        .HasColumnType("uuid")
                        .HasColumnName("botanical_survey_id");

                    b.Property<Guid>("hex160_id")
                        .HasColumnType("uuid")
                        .HasColumnName("hex160_id");

                    b.HasKey("botanical_survey_id", "hex160_id")
                        .HasName("pk_botanical_surveys_hex160s");

                    b.HasIndex("hex160_id")
                        .HasDatabaseName("ix_botanical_surveys_hex160s_hex160_id");

                    b.ToTable("botanical_surveys_hex160s", "public");
                });

            modelBuilder.Entity("botanical_surveys_quad75s", b =>
                {
                    b.Property<Guid>("botanical_survey_id")
                        .HasColumnType("uuid")
                        .HasColumnName("botanical_survey_id");

                    b.Property<Guid>("quad75_id")
                        .HasColumnType("uuid")
                        .HasColumnName("quad75_id");

                    b.HasKey("botanical_survey_id", "quad75_id")
                        .HasName("pk_botanical_surveys_quad75s");

                    b.HasIndex("quad75_id")
                        .HasDatabaseName("ix_botanical_surveys_quad75s_quad75_id");

                    b.ToTable("botanical_surveys_quad75s", "public");
                });

            modelBuilder.Entity("botanical_surveys_watersheds", b =>
                {
                    b.Property<Guid>("botanical_survey_id")
                        .HasColumnType("uuid")
                        .HasColumnName("botanical_survey_id");

                    b.Property<Guid>("watershed_id")
                        .HasColumnType("uuid")
                        .HasColumnName("watershed_id");

                    b.HasKey("botanical_survey_id", "watershed_id")
                        .HasName("pk_botanical_surveys_watersheds");

                    b.HasIndex("watershed_id")
                        .HasDatabaseName("ix_botanical_surveys_watersheds_watershed_id");

                    b.ToTable("botanical_surveys_watersheds", "public");
                });

            modelBuilder.Entity("cnddb_occurrences_districts", b =>
                {
                    b.Property<Guid>("cnddb_occurrence_id")
                        .HasColumnType("uuid")
                        .HasColumnName("cnddb_occurrence_id");

                    b.Property<Guid>("district_id")
                        .HasColumnType("uuid")
                        .HasColumnName("district_id");

                    b.HasKey("cnddb_occurrence_id", "district_id")
                        .HasName("pk_cnddb_occurrences_districts");

                    b.HasIndex("district_id")
                        .HasDatabaseName("ix_cnddb_occurrences_districts_district_id");

                    b.ToTable("cnddb_occurrences_districts", "public");
                });

            modelBuilder.Entity("cnddb_occurrences_hex160s", b =>
                {
                    b.Property<Guid>("cnddb_occurrence_id")
                        .HasColumnType("uuid")
                        .HasColumnName("cnddb_occurrence_id");

                    b.Property<Guid>("hex160_id")
                        .HasColumnType("uuid")
                        .HasColumnName("hex160_id");

                    b.HasKey("cnddb_occurrence_id", "hex160_id")
                        .HasName("pk_cnddb_occurrences_hex160s");

                    b.HasIndex("hex160_id")
                        .HasDatabaseName("ix_cnddb_occurrences_hex160s_hex160_id");

                    b.ToTable("cnddb_occurrences_hex160s", "public");
                });

            modelBuilder.Entity("cnddb_occurrences_quad75s", b =>
                {
                    b.Property<Guid>("cnddb_occurrence_id")
                        .HasColumnType("uuid")
                        .HasColumnName("cnddb_occurrence_id");

                    b.Property<Guid>("quad75_id")
                        .HasColumnType("uuid")
                        .HasColumnName("quad75_id");

                    b.HasKey("cnddb_occurrence_id", "quad75_id")
                        .HasName("pk_cnddb_occurrences_quad75s");

                    b.HasIndex("quad75_id")
                        .HasDatabaseName("ix_cnddb_occurrences_quad75s_quad75_id");

                    b.ToTable("cnddb_occurrences_quad75s", "public");
                });

            modelBuilder.Entity("cnddb_occurrences_watersheds", b =>
                {
                    b.Property<Guid>("cnddb_occurrence_id")
                        .HasColumnType("uuid")
                        .HasColumnName("cnddb_occurrence_id");

                    b.Property<Guid>("watershed_id")
                        .HasColumnType("uuid")
                        .HasColumnName("watershed_id");

                    b.HasKey("cnddb_occurrence_id", "watershed_id")
                        .HasName("pk_cnddb_occurrences_watersheds");

                    b.HasIndex("watershed_id")
                        .HasDatabaseName("ix_cnddb_occurrences_watersheds_watershed_id");

                    b.ToTable("cnddb_occurrences_watersheds", "public");
                });

            modelBuilder.Entity("cnddb_quad_elements_districts", b =>
                {
                    b.Property<Guid>("cnddb_quad_element_id")
                        .HasColumnType("uuid")
                        .HasColumnName("cnddb_quad_element_id");

                    b.Property<Guid>("district_id")
                        .HasColumnType("uuid")
                        .HasColumnName("district_id");

                    b.HasKey("cnddb_quad_element_id", "district_id")
                        .HasName("pk_cnddb_quad_elements_districts");

                    b.HasIndex("district_id")
                        .HasDatabaseName("ix_cnddb_quad_elements_districts_district_id");

                    b.ToTable("cnddb_quad_elements_districts", "public");
                });

            modelBuilder.Entity("hex160s_districts", b =>
                {
                    b.Property<Guid>("district_id")
                        .HasColumnType("uuid")
                        .HasColumnName("district_id");

                    b.Property<Guid>("hex160_id")
                        .HasColumnType("uuid")
                        .HasColumnName("hex160_id");

                    b.HasKey("district_id", "hex160_id")
                        .HasName("pk_hex160s_districts");

                    b.HasIndex("hex160_id")
                        .HasDatabaseName("ix_hex160s_districts_hex160_id");

                    b.ToTable("hex160s_districts", "public");
                });

            modelBuilder.Entity("hex160s_protection_zones", b =>
                {
                    b.Property<Guid>("hex160_id")
                        .HasColumnType("uuid")
                        .HasColumnName("hex160_id");

                    b.Property<Guid>("protection_zone_id")
                        .HasColumnType("uuid")
                        .HasColumnName("protection_zone_id");

                    b.HasKey("hex160_id", "protection_zone_id")
                        .HasName("pk_hex160s_protection_zones");

                    b.HasIndex("protection_zone_id")
                        .HasDatabaseName("ix_hex160s_protection_zones_protection_zone_id");

                    b.ToTable("hex160s_protection_zones", "public");
                });

            modelBuilder.Entity("hex160s_quad75s", b =>
                {
                    b.Property<Guid>("hex160_id")
                        .HasColumnType("uuid")
                        .HasColumnName("hex160_id");

                    b.Property<Guid>("quad75_id")
                        .HasColumnType("uuid")
                        .HasColumnName("quad75_id");

                    b.HasKey("hex160_id", "quad75_id")
                        .HasName("pk_hex160s_quad75s");

                    b.HasIndex("quad75_id")
                        .HasDatabaseName("ix_hex160s_quad75s_quad75_id");

                    b.ToTable("hex160s_quad75s", "public");
                });

            modelBuilder.Entity("hex160s_watersheds", b =>
                {
                    b.Property<Guid>("hex160_id")
                        .HasColumnType("uuid")
                        .HasColumnName("hex160_id");

                    b.Property<Guid>("watershed_id")
                        .HasColumnType("uuid")
                        .HasColumnName("watershed_id");

                    b.HasKey("hex160_id", "watershed_id")
                        .HasName("pk_hex160s_watersheds");

                    b.HasIndex("watershed_id")
                        .HasDatabaseName("ix_hex160s_watersheds_watershed_id");

                    b.ToTable("hex160s_watersheds", "public");
                });

            modelBuilder.Entity("quad75s_districts", b =>
                {
                    b.Property<Guid>("district_id")
                        .HasColumnType("uuid")
                        .HasColumnName("district_id");

                    b.Property<Guid>("quad75_id")
                        .HasColumnType("uuid")
                        .HasColumnName("quad75_id");

                    b.HasKey("district_id", "quad75_id")
                        .HasName("pk_quad75s_districts");

                    b.HasIndex("quad75_id")
                        .HasDatabaseName("ix_quad75s_districts_quad75_id");

                    b.ToTable("quad75s_districts", "public");
                });

            modelBuilder.Entity("spi_plant_polygons_hex160s", b =>
                {
                    b.Property<Guid>("hex160_id")
                        .HasColumnType("uuid")
                        .HasColumnName("hex160_id");

                    b.Property<Guid>("spi_plant_polygon_id")
                        .HasColumnType("uuid")
                        .HasColumnName("spi_plant_polygon_id");

                    b.HasKey("hex160_id", "spi_plant_polygon_id")
                        .HasName("pk_spi_plant_polygons_hex160s");

                    b.HasIndex("spi_plant_polygon_id")
                        .HasDatabaseName("ix_spi_plant_polygons_hex160s_spi_plant_polygon_id");

                    b.ToTable("spi_plant_polygons_hex160s", "public");
                });

            modelBuilder.Entity("spi_plant_polygons_quad75s", b =>
                {
                    b.Property<Guid>("quad75_id")
                        .HasColumnType("uuid")
                        .HasColumnName("quad75_id");

                    b.Property<Guid>("spi_plant_polygon_id")
                        .HasColumnType("uuid")
                        .HasColumnName("spi_plant_polygon_id");

                    b.HasKey("quad75_id", "spi_plant_polygon_id")
                        .HasName("pk_spi_plant_polygons_quad75s");

                    b.HasIndex("spi_plant_polygon_id")
                        .HasDatabaseName("ix_spi_plant_polygons_quad75s_spi_plant_polygon_id");

                    b.ToTable("spi_plant_polygons_quad75s", "public");
                });

            modelBuilder.Entity("spi_plant_polygons_watersheds", b =>
                {
                    b.Property<Guid>("spi_plant_polygon_id")
                        .HasColumnType("uuid")
                        .HasColumnName("spi_plant_polygon_id");

                    b.Property<Guid>("watershed_id")
                        .HasColumnType("uuid")
                        .HasColumnName("watershed_id");

                    b.HasKey("spi_plant_polygon_id", "watershed_id")
                        .HasName("pk_spi_plant_polygons_watersheds");

                    b.HasIndex("watershed_id")
                        .HasDatabaseName("ix_spi_plant_polygons_watersheds_watershed_id");

                    b.ToTable("spi_plant_polygons_watersheds", "public");
                });

            modelBuilder.Entity("users_districts", b =>
                {
                    b.Property<Guid>("application_user_id")
                        .HasColumnType("uuid")
                        .HasColumnName("application_user_id");

                    b.Property<Guid>("district_id")
                        .HasColumnType("uuid")
                        .HasColumnName("district_id");

                    b.HasKey("application_user_id", "district_id")
                        .HasName("pk_users_districts");

                    b.HasIndex("district_id")
                        .HasDatabaseName("ix_users_districts_district_id");

                    b.ToTable("users_districts", "public");
                });

            modelBuilder.Entity("watersheds_districts", b =>
                {
                    b.Property<Guid>("district_id")
                        .HasColumnType("uuid")
                        .HasColumnName("district_id");

                    b.Property<Guid>("watershed_id")
                        .HasColumnType("uuid")
                        .HasColumnName("watershed_id");

                    b.HasKey("district_id", "watershed_id")
                        .HasName("pk_watersheds_districts");

                    b.HasIndex("watershed_id")
                        .HasDatabaseName("ix_watersheds_districts_watershed_id");

                    b.ToTable("watersheds_districts", "public");
                });

            modelBuilder.Entity("watersheds_quad75s", b =>
                {
                    b.Property<Guid>("quad75_id")
                        .HasColumnType("uuid")
                        .HasColumnName("quad75_id");

                    b.Property<Guid>("watershed_id")
                        .HasColumnType("uuid")
                        .HasColumnName("watershed_id");

                    b.HasKey("quad75_id", "watershed_id")
                        .HasName("pk_watersheds_quad75s");

                    b.HasIndex("watershed_id")
                        .HasDatabaseName("ix_watersheds_quad75s_watershed_id");

                    b.ToTable("watersheds_quad75s", "public");
                });

            modelBuilder.Entity("WBIS_2.DataModel.AmphibianElement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("AmphibianSurveyId")
                        .HasColumnType("uuid")
                        .HasColumnName("amphibian_survey_id");

                    b.Property<string>("Comments")
                        .HasColumnType("text")
                        .HasColumnName("comments");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_modified");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_time");

                    b.Property<string>("Datum")
                        .HasColumnType("text")
                        .HasColumnName("datum");

                    b.Property<Guid?>("DistrictId")
                        .HasColumnType("uuid")
                        .HasColumnName("district_id");

                    b.Property<Point>("Geometry")
                        .HasColumnType("geometry(Point,26710)")
                        .HasColumnName("geometry");

                    b.Property<Guid?>("Hex160Id")
                        .HasColumnType("uuid")
                        .HasColumnName("hex160_id");

                    b.Property<double>("Lat")
                        .HasColumnType("double precision")
                        .HasColumnName("lat");

                    b.Property<double>("Lon")
                        .HasColumnType("double precision")
                        .HasColumnName("lon");

                    b.Property<Guid?>("Quad75Id")
                        .HasColumnType("uuid")
                        .HasColumnName("quad75_id");

                    b.Property<string>("RecordType")
                        .HasColumnType("text")
                        .HasColumnName("record_type");

                    b.Property<bool>("Repository")
                        .HasColumnType("boolean")
                        .HasColumnName("repository");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid?>("UserModifiedId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_modified_id");

                    b.Property<Guid?>("WatershedId")
                        .HasColumnType("uuid")
                        .HasColumnName("watershed_id");

                    b.Property<bool>("_delete")
                        .HasColumnType("boolean")
                        .HasColumnName("_delete");

                    b.HasKey("Id")
                        .HasName("pk_amphibian_elements");

                    b.HasIndex("AmphibianSurveyId")
                        .HasDatabaseName("ix_amphibian_elements_amphibian_survey_id");

                    b.HasIndex("DistrictId")
                        .HasDatabaseName("ix_amphibian_elements_district_id");

                    b.HasIndex("Hex160Id")
                        .HasDatabaseName("ix_amphibian_elements_hex160_id");

                    b.HasIndex("Quad75Id")
                        .HasDatabaseName("ix_amphibian_elements_quad75_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_amphibian_elements_user_id");

                    b.HasIndex("UserModifiedId")
                        .HasDatabaseName("ix_amphibian_elements_user_modified_id");

                    b.HasIndex("WatershedId")
                        .HasDatabaseName("ix_amphibian_elements_watershed_id");

                    b.ToTable("amphibian_elements", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.AmphibianLocationFound", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("AmphibianSpeciesId")
                        .HasColumnType("uuid")
                        .HasColumnName("amphibian_species_id");

                    b.Property<bool>("Aural")
                        .HasColumnType("boolean")
                        .HasColumnName("aural");

                    b.Property<double>("NumberOfAdults")
                        .HasColumnType("double precision")
                        .HasColumnName("number_of_adults");

                    b.Property<double>("NumberOfEggMasses")
                        .HasColumnType("double precision")
                        .HasColumnName("number_of_egg_masses");

                    b.Property<double>("NumberOfLarve")
                        .HasColumnType("double precision")
                        .HasColumnName("number_of_larve");

                    b.Property<double>("NumberOfSubadults")
                        .HasColumnType("double precision")
                        .HasColumnName("number_of_subadults");

                    b.Property<bool>("Visual")
                        .HasColumnType("boolean")
                        .HasColumnName("visual");

                    b.HasKey("Id")
                        .HasName("pk_amphibian_locations_found");

                    b.HasIndex("AmphibianSpeciesId")
                        .HasDatabaseName("ix_amphibian_locations_found_amphibian_species_id");

                    b.ToTable("amphibian_locations_found", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.AmphibianPointOfInterest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("OtherWildlifeId")
                        .HasColumnType("uuid")
                        .HasColumnName("other_wildlife_id");

                    b.Property<string>("PointOfInterest")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("point_of_interest");

                    b.HasKey("Id")
                        .HasName("pk_amphibian_points_of_interest");

                    b.HasIndex("OtherWildlifeId")
                        .HasDatabaseName("ix_amphibian_points_of_interest_other_wildlife_id");

                    b.ToTable("amphibian_points_of_interest", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.AmphibianSpecies", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("PlaceHolder")
                        .HasColumnType("boolean")
                        .HasColumnName("place_holder");

                    b.Property<string>("SpeciesCode")
                        .HasColumnType("text")
                        .HasColumnName("species_code");

                    b.Property<string>("SpeciesName")
                        .HasColumnType("text")
                        .HasColumnName("species_name");

                    b.HasKey("Id")
                        .HasName("pk_amphibian_species");

                    b.ToTable("amphibian_species", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.AmphibianSurvey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<double>("AirTemp")
                        .HasColumnType("double precision")
                        .HasColumnName("air_temp");

                    b.Property<double>("Bedrock")
                        .HasColumnType("double precision")
                        .HasColumnName("bedrock");

                    b.Property<double>("Boulders")
                        .HasColumnType("double precision")
                        .HasColumnName("boulders");

                    b.Property<double>("CanopyClosure")
                        .HasColumnType("double precision")
                        .HasColumnName("canopy_closure");

                    b.Property<double>("Cobble")
                        .HasColumnType("double precision")
                        .HasColumnName("cobble");

                    b.Property<string>("County")
                        .HasColumnType("text")
                        .HasColumnName("county");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_modified");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_time");

                    b.Property<Guid?>("DistrictId")
                        .HasColumnType("uuid")
                        .HasColumnName("district_id");

                    b.Property<string>("Elevation")
                        .HasColumnType("text")
                        .HasColumnName("elevation");

                    b.Property<double>("EstAvgStreamWidth")
                        .HasColumnType("double precision")
                        .HasColumnName("est_avg_stream_width");

                    b.Property<string>("Flow")
                        .HasColumnType("text")
                        .HasColumnName("flow");

                    b.Property<MultiLineString>("Geometry")
                        .HasColumnType("geometry(MultiLineString,26710)")
                        .HasColumnName("geometry");

                    b.Property<double>("Gravel")
                        .HasColumnType("double precision")
                        .HasColumnName("gravel");

                    b.Property<string>("LakeStreamName")
                        .HasColumnType("text")
                        .HasColumnName("lake_stream_name");

                    b.Property<string>("Location")
                        .HasColumnType("text")
                        .HasColumnName("location");

                    b.Property<string>("LocationComments")
                        .HasColumnType("text")
                        .HasColumnName("location_comments");

                    b.Property<string>("PlanningWatershed")
                        .HasColumnType("text")
                        .HasColumnName("planning_watershed");

                    b.Property<double>("Pool")
                        .HasColumnType("double precision")
                        .HasColumnName("pool");

                    b.Property<bool>("Repository")
                        .HasColumnType("boolean")
                        .HasColumnName("repository");

                    b.Property<double>("Riffle")
                        .HasColumnType("double precision")
                        .HasColumnName("riffle");

                    b.Property<double>("Run")
                        .HasColumnType("double precision")
                        .HasColumnName("run");

                    b.Property<double>("Sand")
                        .HasColumnType("double precision")
                        .HasColumnName("sand");

                    b.Property<string>("SeasonalityOfFlow")
                        .HasColumnType("text")
                        .HasColumnName("seasonality_of_flow");

                    b.Property<double>("Silt")
                        .HasColumnType("double precision")
                        .HasColumnName("silt");

                    b.Property<string>("SiteID")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("site_id");

                    b.Property<string>("StreamGradient")
                        .HasColumnType("text")
                        .HasColumnName("stream_gradient");

                    b.Property<string>("Surveyors")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("surveyors");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid?>("UserModifiedId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_modified_id");

                    b.Property<double>("WaterTemp")
                        .HasColumnType("double precision")
                        .HasColumnName("water_temp");

                    b.Property<string>("WaterType")
                        .HasColumnType("text")
                        .HasColumnName("water_type");

                    b.Property<string>("Weather")
                        .HasColumnType("text")
                        .HasColumnName("weather");

                    b.Property<string>("Wind")
                        .HasColumnType("text")
                        .HasColumnName("wind");

                    b.Property<bool>("_delete")
                        .HasColumnType("boolean")
                        .HasColumnName("_delete");

                    b.HasKey("Id")
                        .HasName("pk_amphibian_surveys");

                    b.HasIndex("DistrictId")
                        .HasDatabaseName("ix_amphibian_surveys_district_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_amphibian_surveys_user_id");

                    b.HasIndex("UserModifiedId")
                        .HasDatabaseName("ix_amphibian_surveys_user_modified_id");

                    b.ToTable("amphibian_surveys", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.ApplicationGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("AdminPrivileges")
                        .HasColumnType("boolean")
                        .HasColumnName("admin_privileges");

                    b.Property<bool>("DesktopAccess")
                        .HasColumnType("boolean")
                        .HasColumnName("desktop_access");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("group_name");

                    b.Property<bool>("ReadOnly")
                        .HasColumnType("boolean")
                        .HasColumnName("read_only");

                    b.HasKey("Id")
                        .HasName("pk_application_groups");

                    b.ToTable("application_groups", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ApplicationGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("application_group_id");

                    b.Property<bool>("AutoFilterActiveUnits")
                        .HasColumnType("boolean")
                        .HasColumnName("auto_filter_active_units");

                    b.Property<bool>("Botany")
                        .HasColumnType("boolean")
                        .HasColumnName("botany");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsApplicationAdministrator")
                        .HasColumnType("boolean")
                        .HasColumnName("is_application_administrator");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("Login")
                        .HasColumnType("text")
                        .HasColumnName("login");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_name");

                    b.Property<bool>("Wildlife")
                        .HasColumnType("boolean")
                        .HasColumnName("wildlife");

                    b.HasKey("Id")
                        .HasName("pk_application_users");

                    b.HasIndex("ApplicationGroupId")
                        .HasDatabaseName("ix_application_users_application_group_id");

                    b.ToTable("application_users", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.BirdSpecies", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("BandingSpecies")
                        .HasColumnType("boolean")
                        .HasColumnName("banding_species");

                    b.Property<bool>("IsFindable")
                        .HasColumnType("boolean")
                        .HasColumnName("is_findable");

                    b.Property<bool>("IsSurveyable")
                        .HasColumnType("boolean")
                        .HasColumnName("is_surveyable");

                    b.Property<bool>("PlaceHolder")
                        .HasColumnType("boolean")
                        .HasColumnName("place_holder");

                    b.Property<string>("Species")
                        .HasColumnType("text")
                        .HasColumnName("species");

                    b.HasKey("Id")
                        .HasName("pk_bird_species");

                    b.ToTable("bird_species", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.BotanicalElement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("BotanicalScopingId")
                        .HasColumnType("uuid")
                        .HasColumnName("botanical_scoping_id");

                    b.Property<Guid?>("BotanicalSurveyAreaId")
                        .HasColumnType("uuid")
                        .HasColumnName("botanical_survey_area_id");

                    b.Property<Guid?>("BotanicalSurveyId")
                        .HasColumnType("uuid")
                        .HasColumnName("botanical_survey_id");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("Datum")
                        .HasColumnType("text")
                        .HasColumnName("datum");

                    b.Property<Guid?>("DistrictId")
                        .HasColumnType("uuid")
                        .HasColumnName("district_id");

                    b.Property<Point>("Geometry")
                        .HasColumnType("geometry(Point,26710)")
                        .HasColumnName("geometry");

                    b.Property<Guid?>("Hex160Id")
                        .HasColumnType("uuid")
                        .HasColumnName("hex160_id");

                    b.Property<double>("Lat")
                        .HasColumnType("double precision")
                        .HasColumnName("lat");

                    b.Property<double>("Lon")
                        .HasColumnType("double precision")
                        .HasColumnName("lon");

                    b.Property<string>("PhotoTag")
                        .HasColumnType("text")
                        .HasColumnName("photo_tag");

                    b.Property<Guid?>("Quad75Id")
                        .HasColumnType("uuid")
                        .HasColumnName("quad75_id");

                    b.Property<string>("RecordDetail")
                        .HasColumnType("text")
                        .HasColumnName("record_detail");

                    b.Property<string>("RecordType")
                        .HasColumnType("text")
                        .HasColumnName("record_type");

                    b.Property<bool>("Repository")
                        .HasColumnType("boolean")
                        .HasColumnName("repository");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid?>("UserModifiedId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_modified_id");

                    b.Property<Guid?>("WatershedId")
                        .HasColumnType("uuid")
                        .HasColumnName("watershed_id");

                    b.Property<bool>("_delete")
                        .HasColumnType("boolean")
                        .HasColumnName("_delete");

                    b.HasKey("Id")
                        .HasName("pk_botanical_elements");

                    b.HasIndex("BotanicalScopingId")
                        .HasDatabaseName("ix_botanical_elements_botanical_scoping_id");

                    b.HasIndex("BotanicalSurveyAreaId")
                        .HasDatabaseName("ix_botanical_elements_botanical_survey_area_id");

                    b.HasIndex("BotanicalSurveyId")
                        .HasDatabaseName("ix_botanical_elements_botanical_survey_id");

                    b.HasIndex("DistrictId")
                        .HasDatabaseName("ix_botanical_elements_district_id");

                    b.HasIndex("Hex160Id")
                        .HasDatabaseName("ix_botanical_elements_hex160_id");

                    b.HasIndex("Quad75Id")
                        .HasDatabaseName("ix_botanical_elements_quad75_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_botanical_elements_user_id");

                    b.HasIndex("UserModifiedId")
                        .HasDatabaseName("ix_botanical_elements_user_modified_id");

                    b.HasIndex("WatershedId")
                        .HasDatabaseName("ix_botanical_elements_watershed_id");

                    b.ToTable("botanical_elements", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.BotanicalPlantList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("BotanicalPlantOfInterestId")
                        .HasColumnType("uuid")
                        .HasColumnName("botanical_plant_of_interest_id");

                    b.Property<string>("Comments")
                        .HasColumnType("text")
                        .HasColumnName("comments");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_time");

                    b.Property<Guid>("PlantSpeciesId")
                        .HasColumnType("uuid")
                        .HasColumnName("plant_species_id");

                    b.HasKey("Id")
                        .HasName("pk_botanical_plants_list");

                    b.HasIndex("BotanicalPlantOfInterestId")
                        .HasDatabaseName("ix_botanical_plants_list_botanical_plant_of_interest_id");

                    b.HasIndex("PlantSpeciesId")
                        .HasDatabaseName("ix_botanical_plants_list_plant_species_id");

                    b.ToTable("botanical_plants_list", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.BotanicalPlantOfInterest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Comments")
                        .HasColumnType("text")
                        .HasColumnName("comments");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_time");

                    b.Property<string>("Disturbances")
                        .HasColumnType("text")
                        .HasColumnName("disturbances");

                    b.Property<bool>("ExistingCNDDB")
                        .HasColumnType("boolean")
                        .HasColumnName("existing_cnddb");

                    b.Property<int>("Flowering")
                        .HasColumnType("integer")
                        .HasColumnName("flowering");

                    b.Property<int>("Fruiting")
                        .HasColumnType("integer")
                        .HasColumnName("fruiting");

                    b.Property<string>("Habitat")
                        .HasColumnType("text")
                        .HasColumnName("habitat");

                    b.Property<string>("LandUse")
                        .HasColumnType("text")
                        .HasColumnName("land_use");

                    b.Property<int>("NumInd")
                        .HasColumnType("integer")
                        .HasColumnName("num_ind");

                    b.Property<int>("NumIndMax")
                        .HasColumnType("integer")
                        .HasColumnName("num_ind_max");

                    b.Property<int>("OccNum")
                        .HasColumnType("integer")
                        .HasColumnName("occ_num");

                    b.Property<Guid>("PlantSpeciesId")
                        .HasColumnType("uuid")
                        .HasColumnName("plant_species_id");

                    b.Property<double>("Radius")
                        .HasColumnType("double precision")
                        .HasColumnName("radius");

                    b.Property<string>("SiteQuality")
                        .HasColumnType("text")
                        .HasColumnName("site_quality");

                    b.Property<bool>("SpeciesFound")
                        .HasColumnType("boolean")
                        .HasColumnName("species_found");

                    b.Property<string>("SpeciesFoundText")
                        .HasColumnType("text")
                        .HasColumnName("species_found_text");

                    b.Property<bool>("SubsequentVisit")
                        .HasColumnType("boolean")
                        .HasColumnName("subsequent_visit");

                    b.Property<bool>("TentativeIdentification")
                        .HasColumnType("boolean")
                        .HasColumnName("tentative_identification");

                    b.Property<string>("Threats")
                        .HasColumnType("text")
                        .HasColumnName("threats");

                    b.Property<int>("Vegetative")
                        .HasColumnType("integer")
                        .HasColumnName("vegetative");

                    b.HasKey("Id")
                        .HasName("pk_botanical_plants_of_interest");

                    b.HasIndex("PlantSpeciesId")
                        .HasDatabaseName("ix_botanical_plants_of_interest_plant_species_id");

                    b.ToTable("botanical_plants_of_interest", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.BotanicalPointOfInterest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Comments")
                        .HasColumnType("text")
                        .HasColumnName("comments");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_time");

                    b.Property<string>("Gradient")
                        .HasColumnType("text")
                        .HasColumnName("gradient");

                    b.Property<bool>("HerbaceousVegetation")
                        .HasColumnType("boolean")
                        .HasColumnName("herbaceous_vegetation");

                    b.Property<bool>("Instream")
                        .HasColumnType("boolean")
                        .HasColumnName("instream");

                    b.Property<bool>("Inundated")
                        .HasColumnType("boolean")
                        .HasColumnName("inundated");

                    b.Property<bool>("Isolated")
                        .HasColumnType("boolean")
                        .HasColumnName("isolated");

                    b.Property<bool>("LittoralZone")
                        .HasColumnType("boolean")
                        .HasColumnName("littoral_zone");

                    b.Property<double>("Radius")
                        .HasColumnType("double precision")
                        .HasColumnName("radius");

                    b.Property<bool>("Recheck")
                        .HasColumnType("boolean")
                        .HasColumnName("recheck");

                    b.Property<bool>("RechecksNeeded")
                        .HasColumnType("boolean")
                        .HasColumnName("rechecks_needed");

                    b.Property<string>("RecordType")
                        .HasColumnType("text")
                        .HasColumnName("record_type");

                    b.Property<string>("Substrate")
                        .HasColumnType("text")
                        .HasColumnName("substrate");

                    b.Property<bool>("WoodyVegetation")
                        .HasColumnType("boolean")
                        .HasColumnName("woody_vedetation");

                    b.HasKey("Id")
                        .HasName("pk_botanical_points_of_interest");

                    b.ToTable("botanical_points_of_interest", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.BotanicalScoping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("EcologicalUnit")
                        .HasColumnType("text")
                        .HasColumnName("ecological_unit");

                    b.Property<int>("ElevationMax")
                        .HasColumnType("integer")
                        .HasColumnName("elevation_max");

                    b.Property<int>("ElevationMin")
                        .HasColumnType("integer")
                        .HasColumnName("elevation_min");

                    b.Property<string>("Forester")
                        .HasColumnType("text")
                        .HasColumnName("forester");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uuid")
                        .HasColumnName("region_id");

                    b.Property<bool>("Repository")
                        .HasColumnType("boolean")
                        .HasColumnName("repository");

                    b.Property<Guid>("THP_AreaId")
                        .HasColumnType("uuid")
                        .HasColumnName("thp_area_id");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid?>("UserModifiedId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_modified_id");

                    b.Property<int>("WshdElevationMax")
                        .HasColumnType("integer")
                        .HasColumnName("wshd_elevation_max");

                    b.Property<int>("WshdElevationMin")
                        .HasColumnType("integer")
                        .HasColumnName("wshd_elevation_min");

                    b.Property<bool>("_delete")
                        .HasColumnType("boolean")
                        .HasColumnName("_delete");

                    b.HasKey("Id")
                        .HasName("pk_botanical_scopings");

                    b.HasIndex("RegionId")
                        .HasDatabaseName("ix_botanical_scopings_region_id");

                    b.HasIndex("THP_AreaId")
                        .HasDatabaseName("ix_botanical_scopings_thp_area_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_botanical_scopings_user_id");

                    b.HasIndex("UserModifiedId")
                        .HasDatabaseName("ix_botanical_scopings_user_modified_id");

                    b.ToTable("botanical_scopings", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.BotanicalScopingSpecies", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BotanicalScopingId")
                        .HasColumnType("uuid")
                        .HasColumnName("botanical_scoping_id");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_modified");

                    b.Property<bool>("Exclude")
                        .HasColumnType("boolean")
                        .HasColumnName("exclude");

                    b.Property<bool>("ExcludeReport")
                        .HasColumnType("boolean")
                        .HasColumnName("exclude_report");

                    b.Property<string>("ExcludeText")
                        .HasColumnType("text")
                        .HasColumnName("exclude_text");

                    b.Property<string>("HabitatDescription")
                        .HasColumnType("text")
                        .HasColumnName("habitat_description");

                    b.Property<string>("NddbHabitatDescription")
                        .HasColumnType("text")
                        .HasColumnName("nddb_habitat_description");

                    b.Property<Guid>("PlantSpeciesId")
                        .HasColumnType("uuid")
                        .HasColumnName("plant_species_id");

                    b.Property<string>("ProtectionSummary")
                        .HasColumnType("text")
                        .HasColumnName("protection_summary");

                    b.Property<bool>("Repository")
                        .HasColumnType("boolean")
                        .HasColumnName("repository");

                    b.Property<string>("SpiHabitatDescription")
                        .HasColumnType("text")
                        .HasColumnName("spi_habitat_description");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid?>("UserModifiedId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_modified_id");

                    b.Property<bool>("_delete")
                        .HasColumnType("boolean")
                        .HasColumnName("_delete");

                    b.HasKey("Id")
                        .HasName("pk_botanical_scoping_species");

                    b.HasIndex("BotanicalScopingId")
                        .HasDatabaseName("ix_botanical_scoping_species_botanical_scoping_id");

                    b.HasIndex("PlantSpeciesId")
                        .HasDatabaseName("ix_botanical_scoping_species_plant_species_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_botanical_scoping_species_user_id");

                    b.HasIndex("UserModifiedId")
                        .HasDatabaseName("ix_botanical_scoping_species_user_modified_id");

                    b.ToTable("botanical_scoping_species", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.BotanicalSurvey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("BotanicalScopingId")
                        .HasColumnType("uuid")
                        .HasColumnName("botanical_scoping_id");

                    b.Property<Guid?>("BotanicalSurveyAreaId")
                        .HasColumnType("uuid")
                        .HasColumnName("botanical_survey_area_id");

                    b.Property<string>("Comments")
                        .HasColumnType("text")
                        .HasColumnName("comments");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_modified");

                    b.Property<Guid?>("DistrictId")
                        .HasColumnType("uuid")
                        .HasColumnName("district_id");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end_time");

                    b.Property<MultiLineString>("Geometry")
                        .HasColumnType("geometry(MultiLineString,26710)")
                        .HasColumnName("geometry");

                    b.Property<bool>("ManualTrack")
                        .HasColumnType("boolean")
                        .HasColumnName("manual_track");

                    b.Property<string>("OtherSurveyors")
                        .HasColumnType("text")
                        .HasColumnName("other_surveyors");

                    b.Property<bool>("Repository")
                        .HasColumnType("boolean")
                        .HasColumnName("repository");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_time");

                    b.Property<string>("SurveyType")
                        .HasColumnType("text")
                        .HasColumnName("survey_type");

                    b.Property<Guid?>("THP_AreaId")
                        .HasColumnType("uuid")
                        .HasColumnName("thp_area_id");

                    b.Property<TimeSpan>("TimeSpent")
                        .HasColumnType("interval")
                        .HasColumnName("time_spent");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid?>("UserModifiedId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_modified_id");

                    b.Property<bool>("_delete")
                        .HasColumnType("boolean")
                        .HasColumnName("_delete");

                    b.HasKey("Id")
                        .HasName("pk_botanical_surveys");

                    b.HasIndex("BotanicalScopingId")
                        .HasDatabaseName("ix_botanical_surveys_botanical_scoping_id");

                    b.HasIndex("BotanicalSurveyAreaId")
                        .HasDatabaseName("ix_botanical_surveys_botanical_survey_area_id");

                    b.HasIndex("DistrictId")
                        .HasDatabaseName("ix_botanical_surveys_district_id");

                    b.HasIndex("THP_AreaId")
                        .HasDatabaseName("ix_botanical_surveys_thp_area_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_botanical_surveys_user_id");

                    b.HasIndex("UserModifiedId")
                        .HasDatabaseName("ix_botanical_surveys_user_modified_id");

                    b.ToTable("botanical_surveys", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.BotanicalSurveyArea", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AreaName")
                        .HasColumnType("text")
                        .HasColumnName("area_name");

                    b.Property<string>("Aspect")
                        .HasColumnType("text")
                        .HasColumnName("aspect");

                    b.Property<Guid?>("BotanicalScopingId")
                        .HasColumnType("uuid")
                        .HasColumnName("botanical_scoping_id");

                    b.Property<string>("Boulders")
                        .HasColumnType("text")
                        .HasColumnName("boulders");

                    b.Property<string>("Canopy")
                        .HasColumnType("text")
                        .HasColumnName("canopy");

                    b.Property<string>("Comments")
                        .HasColumnType("text")
                        .HasColumnName("comments");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_modified");

                    b.Property<Guid?>("DistrictId")
                        .HasColumnType("uuid")
                        .HasColumnName("district_id");

                    b.Property<string>("GeneralHabitat")
                        .HasColumnType("text")
                        .HasColumnName("general_habitat");

                    b.Property<MultiPolygon>("Geometry")
                        .HasColumnType("geometry(MultiPolygon,26710)")
                        .HasColumnName("geometry");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("LavaCap")
                        .HasColumnType("boolean")
                        .HasColumnName("lava_cap");

                    b.Property<string>("OtherWetlands")
                        .HasColumnType("text")
                        .HasColumnName("other_wetlands");

                    b.Property<bool>("Pond")
                        .HasColumnType("boolean")
                        .HasColumnName("pond");

                    b.Property<bool>("Repository")
                        .HasColumnType("boolean")
                        .HasColumnName("repository");

                    b.Property<string>("RockOutcrops")
                        .HasColumnType("text")
                        .HasColumnName("rock_outcrops");

                    b.Property<string>("Slope")
                        .HasColumnType("text")
                        .HasColumnName("slope");

                    b.Property<bool>("SpringSeep")
                        .HasColumnType("boolean")
                        .HasColumnName("spring_seep");

                    b.Property<string>("Substrate")
                        .HasColumnType("text")
                        .HasColumnName("substrate");

                    b.Property<string>("SurveyType")
                        .HasColumnType("text")
                        .HasColumnName("survey_type");

                    b.Property<int>("Surveys")
                        .HasColumnType("integer")
                        .HasColumnName("surveys");

                    b.Property<Guid?>("THP_AreaId")
                        .HasColumnType("uuid")
                        .HasColumnName("thp_area_id");

                    b.Property<bool>("TalusScree")
                        .HasColumnType("boolean")
                        .HasColumnName("talus_scree");

                    b.Property<string>("UnderstoryVegetation")
                        .HasColumnType("text")
                        .HasColumnName("understory_vegetation");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid?>("UserModifiedId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_modified_id");

                    b.Property<bool>("_delete")
                        .HasColumnType("boolean")
                        .HasColumnName("_delete");

                    b.HasKey("Id")
                        .HasName("pk_botanical_survey_areas");

                    b.HasIndex("BotanicalScopingId")
                        .HasDatabaseName("ix_botanical_survey_areas_botanical_scoping_id");

                    b.HasIndex("DistrictId")
                        .HasDatabaseName("ix_botanical_survey_areas_district_id");

                    b.HasIndex("THP_AreaId")
                        .HasDatabaseName("ix_botanical_survey_areas_thp_area_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_botanical_survey_areas_user_id");

                    b.HasIndex("UserModifiedId")
                        .HasDatabaseName("ix_botanical_survey_areas_user_modified_id");

                    b.ToTable("botanical_survey_areas", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.CDFW_SpottedOwl", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AGESEX")
                        .HasColumnType("text")
                        .HasColumnName("agesex");

                    b.Property<string>("CNAME")
                        .HasColumnType("text")
                        .HasColumnName("cname");

                    b.Property<string>("COMMENTS")
                        .HasColumnType("text")
                        .HasColumnName("comments");

                    b.Property<string>("COORDSRC")
                        .HasColumnType("text")
                        .HasColumnName("coordsrc");

                    b.Property<string>("DATEOBS")
                        .HasColumnType("text")
                        .HasColumnName("dateobs");

                    b.Property<string>("DOCID")
                        .HasColumnType("text")
                        .HasColumnName("docid");

                    b.Property<Guid?>("DistrictId")
                        .HasColumnType("uuid")
                        .HasColumnName("district_id");

                    b.Property<Point>("Geometry")
                        .HasColumnType("geometry(Point,26710)")
                        .HasColumnName("geometry");

                    b.Property<string>("HIGHESTUSE")
                        .HasColumnType("text")
                        .HasColumnName("highestuse");

                    b.Property<Guid?>("Hex160Id")
                        .HasColumnType("uuid")
                        .HasColumnName("hex160_id");

                    b.Property<double>("LATDD_N83")
                        .HasColumnType("double precision")
                        .HasColumnName("latdd_n83");

                    b.Property<double>("LONDD_N83")
                        .HasColumnType("double precision")
                        .HasColumnName("londd_n83");

                    b.Property<string>("MASTEROWL")
                        .HasColumnType("text")
                        .HasColumnName("masterowl");

                    b.Property<string>("MTRS")
                        .HasColumnType("text")
                        .HasColumnName("mtrs");

                    b.Property<string>("NEST")
                        .HasColumnType("text")
                        .HasColumnName("nest");

                    b.Property<int>("NUMADOBS")
                        .HasColumnType("integer")
                        .HasColumnName("numadobs");

                    b.Property<string>("NUMYOUNG")
                        .HasColumnType("text")
                        .HasColumnName("numyoung");

                    b.Property<string>("OBSERVER")
                        .HasColumnType("text")
                        .HasColumnName("observer");

                    b.Property<int>("OBSID")
                        .HasColumnType("integer")
                        .HasColumnName("obsid");

                    b.Property<string>("PAIR")
                        .HasColumnType("text")
                        .HasColumnName("pair");

                    b.Property<Guid?>("Quad75Id")
                        .HasColumnType("uuid")
                        .HasColumnName("quad75_id");

                    b.Property<string>("SNAME")
                        .HasColumnType("text")
                        .HasColumnName("sname");

                    b.Property<string>("SUBSPECIES")
                        .HasColumnType("text")
                        .HasColumnName("subspecies");

                    b.Property<string>("SYMBOLOGY")
                        .HasColumnType("text")
                        .HasColumnName("symbology");

                    b.Property<string>("TIMEOBS")
                        .HasColumnType("text")
                        .HasColumnName("timeobs");

                    b.Property<string>("TYPEOBS")
                        .HasColumnType("text")
                        .HasColumnName("typeobs");

                    b.Property<Guid?>("WatershedId")
                        .HasColumnType("uuid")
                        .HasColumnName("watershed_id");

                    b.HasKey("Id")
                        .HasName("pk_cdfw_spotted_owls");

                    b.HasIndex("DistrictId")
                        .HasDatabaseName("ix_cdfw_spotted_owls_district_id");

                    b.HasIndex("Hex160Id")
                        .HasDatabaseName("ix_cdfw_spotted_owls_hex160_id");

                    b.HasIndex("Quad75Id")
                        .HasDatabaseName("ix_cdfw_spotted_owls_quad75_id");

                    b.HasIndex("WatershedId")
                        .HasDatabaseName("ix_cdfw_spotted_owls_watershed_id");

                    b.ToTable("cdfw_spotted_owls", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.CDFW_SpottedOwlDiagram", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("DistrictId")
                        .HasColumnType("uuid")
                        .HasColumnName("district_id");

                    b.Property<LineString>("Geometry")
                        .HasColumnType("geometry(LineString,26710)")
                        .HasColumnName("geometry");

                    b.HasKey("Id")
                        .HasName("pk_cdfw_spotted_owl_diagrams");

                    b.HasIndex("DistrictId")
                        .HasDatabaseName("ix_cdfw_spotted_owl_diagrams_district_id");

                    b.ToTable("cdfw_spotted_owl_diagrams", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.CdfwVintage", b =>
                {
                    b.Property<DateTime>("date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.ToTable("cdfw_vintages", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.CNDDBOccurrence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ACCURACY")
                        .HasColumnType("text")
                        .HasColumnName("accuracy");

                    b.Property<double>("AREA")
                        .HasColumnType("double precision")
                        .HasColumnName("area");

                    b.Property<int>("AVLCODE")
                        .HasColumnType("integer")
                        .HasColumnName("avlcode");

                    b.Property<string>("CALLIST")
                        .HasColumnType("text")
                        .HasColumnName("callist");

                    b.Property<string>("CDFWSTATUS")
                        .HasColumnType("text")
                        .HasColumnName("cdfwstatus");

                    b.Property<string>("CNAME")
                        .HasColumnType("text")
                        .HasColumnName("cname");

                    b.Property<string>("ECOLOGICAL")
                        .HasColumnType("text")
                        .HasColumnName("ecological");

                    b.Property<int>("ELEVATION")
                        .HasColumnType("integer")
                        .HasColumnName("elevation");

                    b.Property<string>("ELMCODE")
                        .HasColumnType("text")
                        .HasColumnName("elmcode");

                    b.Property<string>("ELMDATE")
                        .HasColumnType("text")
                        .HasColumnName("elmdate");

                    b.Property<int>("ELMTYPE")
                        .HasColumnType("integer")
                        .HasColumnName("elmtype");

                    b.Property<int>("EOCOUNT")
                        .HasColumnType("integer")
                        .HasColumnName("eocount");

                    b.Property<int>("EONDX")
                        .HasColumnType("integer")
                        .HasColumnName("eondx");

                    b.Property<string>("FEDLIST")
                        .HasColumnType("text")
                        .HasColumnName("fedlist");

                    b.Property<string>("GENERAL")
                        .HasColumnType("text")
                        .HasColumnName("general");

                    b.Property<string>("GRANK")
                        .HasColumnType("text")
                        .HasColumnName("grank");

                    b.Property<MultiPolygon>("Geometry")
                        .HasColumnType("geometry(MultiPolygon,26710)")
                        .HasColumnName("geometry");

                    b.Property<string>("KEYCOUNTY")
                        .HasColumnType("text")
                        .HasColumnName("keycounty");

                    b.Property<string>("KEYQUAD")
                        .HasColumnType("text")
                        .HasColumnName("keyquad");

                    b.Property<string>("KQUADNAME")
                        .HasColumnType("text")
                        .HasColumnName("kquadname");

                    b.Property<string>("LASTUPDATE")
                        .HasColumnType("text")
                        .HasColumnName("lastupdate");

                    b.Property<string>("LOCATION")
                        .HasColumnType("text")
                        .HasColumnName("location");

                    b.Property<string>("LOCDETAILS")
                        .HasColumnType("text")
                        .HasColumnName("locdetails");

                    b.Property<string>("MAPNDX")
                        .HasColumnType("text")
                        .HasColumnName("mapndx");

                    b.Property<int>("OCCNUMBER")
                        .HasColumnType("integer")
                        .HasColumnName("occnumber");

                    b.Property<string>("OCCRANK")
                        .HasColumnType("text")
                        .HasColumnName("occrank");

                    b.Property<string>("OCCTYPE")
                        .HasColumnType("text")
                        .HasColumnName("occtype");

                    b.Property<string>("OTHRSTATUS")
                        .HasColumnType("text")
                        .HasColumnName("othrstatus");

                    b.Property<string>("OWNERMGT")
                        .HasColumnType("text")
                        .HasColumnName("ownermgt");

                    b.Property<int>("PARTS")
                        .HasColumnType("integer")
                        .HasColumnName("parts");

                    b.Property<double>("PERIMETER")
                        .HasColumnType("double precision")
                        .HasColumnName("perimeter");

                    b.Property<string>("PLSS")
                        .HasColumnType("text")
                        .HasColumnName("plss");

                    b.Property<string>("PRESENCE")
                        .HasColumnType("text")
                        .HasColumnName("presence");

                    b.Property<Guid?>("PlantSpeciesId")
                        .HasColumnType("uuid")
                        .HasColumnName("plant_species_id");

                    b.Property<string>("RPLANTRANK")
                        .HasColumnType("text")
                        .HasColumnName("rplantrank");

                    b.Property<string>("SENSITIVE")
                        .HasColumnType("text")
                        .HasColumnName("sensitive");

                    b.Property<string>("SITEDATE")
                        .HasColumnType("text")
                        .HasColumnName("sitedate");

                    b.Property<string>("SNAME")
                        .HasColumnType("text")
                        .HasColumnName("sname");

                    b.Property<string>("SRANK")
                        .HasColumnType("text")
                        .HasColumnName("srank");

                    b.Property<int>("Symbology")
                        .HasColumnType("integer")
                        .HasColumnName("symbology");

                    b.Property<string>("SymbologyText")
                        .HasColumnType("text")
                        .HasColumnName("symbology_text");

                    b.Property<string>("TAXONGROUP")
                        .HasColumnType("text")
                        .HasColumnName("taxongroup");

                    b.Property<string>("THREAT")
                        .HasColumnType("text")
                        .HasColumnName("threat");

                    b.Property<string>("THREATLIST")
                        .HasColumnType("text")
                        .HasColumnName("threatlist");

                    b.HasKey("Id")
                        .HasName("pk_cnddb_occurrences");

                    b.HasIndex("PlantSpeciesId")
                        .HasDatabaseName("ix_cnddb_occurrences_plant_species_id");

                    b.ToTable("cnddb_occurrences", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.CNDDBQuadElement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CDFWStatus")
                        .HasColumnType("text")
                        .HasColumnName("cdfw_status");

                    b.Property<string>("CalStatus")
                        .HasColumnType("text")
                        .HasColumnName("cal_status");

                    b.Property<string>("CommonName")
                        .HasColumnType("text")
                        .HasColumnName("common_name");

                    b.Property<string>("DataStatus")
                        .HasColumnType("text")
                        .HasColumnName("data_status");

                    b.Property<string>("ElmCode")
                        .HasColumnType("text")
                        .HasColumnName("elm_code");

                    b.Property<string>("ElmType")
                        .HasColumnType("text")
                        .HasColumnName("elm_type");

                    b.Property<string>("FedStatus")
                        .HasColumnType("text")
                        .HasColumnName("fed_status");

                    b.Property<Guid?>("PlantSpeciesId")
                        .HasColumnType("uuid")
                        .HasColumnName("plant_species_id");

                    b.Property<Guid?>("Quad75Id")
                        .HasColumnType("uuid")
                        .HasColumnName("quad75_id");

                    b.Property<string>("RPlantRank")
                        .HasColumnType("text")
                        .HasColumnName("rare_plant_rank");

                    b.Property<string>("SciName")
                        .HasColumnType("text")
                        .HasColumnName("sci_name");

                    b.Property<string>("TaxonSort")
                        .HasColumnType("text")
                        .HasColumnName("taxon_sort");

                    b.HasKey("Id")
                        .HasName("pk_cnddb_quad_elements");

                    b.HasIndex("PlantSpeciesId")
                        .HasDatabaseName("ix_cnddb_quad_elements_plant_species_id");

                    b.HasIndex("Quad75Id")
                        .HasDatabaseName("ix_cnddb_quad_elements_quad75_id");

                    b.ToTable("cnddb_quad_elements", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.DeletedGeometry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<LineString>("LineGeometry")
                        .HasColumnType("geometry(LineString,26710)")
                        .HasColumnName("line_geometry");

                    b.Property<MultiPolygon>("MPolyGeometry")
                        .HasColumnType("geometry(MultiPolygon,26710)")
                        .HasColumnName("mpoly_geometry");

                    b.Property<Guid>("ObjectGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("object_guid");

                    b.Property<Point>("PointGeometry")
                        .HasColumnType("geometry(Point,26710)")
                        .HasColumnName("point_geometry");

                    b.Property<Polygon>("PolyGeometry")
                        .HasColumnType("geometry(Polygon,26710)")
                        .HasColumnName("poly_geometry");

                    b.HasKey("Id")
                        .HasName("pk_deleted_geometries");

                    b.ToTable("deleted_geometries", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.DeviceInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("AmphibianElementId")
                        .HasColumnType("uuid")
                        .HasColumnName("amphibian_element_id");

                    b.Property<Guid?>("AmphibianSurveyId")
                        .HasColumnType("uuid")
                        .HasColumnName("amphibian_survey_id");

                    b.Property<Guid?>("BotanicalElementId")
                        .HasColumnType("uuid")
                        .HasColumnName("botanical_element_id");

                    b.Property<Guid?>("BotanicalSurveyId")
                        .HasColumnType("uuid")
                        .HasColumnName("botanical_survey_id");

                    b.Property<string>("Datum")
                        .HasColumnType("text")
                        .HasColumnName("datum");

                    b.Property<DateTime>("DeviceTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("device_time");

                    b.Property<Point>("Geometry")
                        .HasColumnType("geometry(Point,26710)")
                        .HasColumnName("geometry");

                    b.Property<double>("HorizontalAccuracy")
                        .HasColumnType("double precision")
                        .HasColumnName("horizontal_accuracy");

                    b.Property<double>("Lat")
                        .HasColumnType("double precision")
                        .HasColumnName("lat");

                    b.Property<double>("Lon")
                        .HasColumnType("double precision")
                        .HasColumnName("lon");

                    b.Property<Guid?>("OwlBandingId")
                        .HasColumnType("uuid")
                        .HasColumnName("owl_banding_id");

                    b.Property<Guid?>("SiteCallingId")
                        .HasColumnType("uuid")
                        .HasColumnName("site_calling_id");

                    b.HasKey("Id")
                        .HasName("pk_device_infos");

                    b.HasIndex("AmphibianElementId")
                        .IsUnique()
                        .HasDatabaseName("ix_device_infos_amphibian_element_id");

                    b.HasIndex("AmphibianSurveyId")
                        .IsUnique()
                        .HasDatabaseName("ix_device_infos_amphibian_survey_id");

                    b.HasIndex("BotanicalElementId")
                        .IsUnique()
                        .HasDatabaseName("ix_device_infos_botanical_element_id");

                    b.HasIndex("BotanicalSurveyId")
                        .IsUnique()
                        .HasDatabaseName("ix_device_infos_botanical_survey_id");

                    b.HasIndex("OwlBandingId")
                        .IsUnique()
                        .HasDatabaseName("ix_device_infos_owl_banding_id");

                    b.HasIndex("SiteCallingId")
                        .IsUnique()
                        .HasDatabaseName("ix_device_infos_site_calling_id");

                    b.ToTable("device_infos", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.District", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("district_name");

                    b.Property<string>("ManagementArea")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("management_area");

                    b.HasKey("Id")
                        .HasName("pk_districts");

                    b.ToTable("districts", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.DistrictExtendedGeometry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<MultiPolygon>("Geometry")
                        .HasColumnType("geometry(MultiPolygon,26710)")
                        .HasColumnName("geometry");

                    b.HasKey("Id")
                        .HasName("pk_district_extended_geometries");

                    b.ToTable("district_extended_geometries", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.DropdownOption", b =>
                {
                    b.Property<string>("Entity")
                        .HasColumnType("text")
                        .HasColumnName("entity");

                    b.Property<string>("FullText")
                        .HasColumnType("text")
                        .HasColumnName("full_text");

                    b.Property<string>("Property")
                        .HasColumnType("text")
                        .HasColumnName("property");

                    b.Property<string>("SelectionText")
                        .HasColumnType("text")
                        .HasColumnName("selection_text");

                    b.ToTable("dropdown_options", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.FloweringTimeline", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ActiveFrom")
                        .HasColumnType("text")
                        .HasColumnName("active_from");

                    b.Property<string>("ActiveTo")
                        .HasColumnType("text")
                        .HasColumnName("active_to");

                    b.Property<Guid>("PlantSpeciesId")
                        .HasColumnType("uuid")
                        .HasColumnName("plant_species_id");

                    b.HasKey("Id")
                        .HasName("pk_flowering_timelines");

                    b.HasIndex("PlantSpeciesId")
                        .HasDatabaseName("ix_flowering_timelines_plant_species_id");

                    b.ToTable("flowering_timelines", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.Hex160", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("CallingResponses")
                        .HasColumnType("integer")
                        .HasColumnName("calling_responses");

                    b.Property<Guid?>("CurrentProtectionZoneID")
                        .HasColumnType("uuid")
                        .HasColumnName("current_protection_zone_id");

                    b.Property<int>("Drops")
                        .HasColumnType("integer")
                        .HasColumnName("drops");

                    b.Property<int>("FollowUps")
                        .HasColumnType("integer")
                        .HasColumnName("follow_ups");

                    b.Property<Polygon>("Geometry")
                        .HasColumnType("geometry(Polygon,26710)")
                        .HasColumnName("geometry");

                    b.Property<string>("Hex160ID")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("hex160_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LatestActivity")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("latest_activity");

                    b.Property<string>("RecentActivity")
                        .HasColumnType("text")
                        .HasColumnName("recent_activity");

                    b.Property<int>("Skips")
                        .HasColumnType("integer")
                        .HasColumnName("skips");

                    b.HasKey("Id")
                        .HasName("pk_hex160s");

                    b.HasIndex("CurrentProtectionZoneID")
                        .HasDatabaseName("ix_hex160s_current_protection_zone_id");

                    b.ToTable("hex160s", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.Hex160RequiredPass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BirdSpeciesId")
                        .HasColumnType("uuid")
                        .HasColumnName("bird_species_id");

                    b.Property<int>("CurrentPasses")
                        .HasColumnType("integer")
                        .HasColumnName("current_passes");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_modified");

                    b.Property<bool>("Dropped")
                        .HasColumnType("boolean")
                        .HasColumnName("dropped");

                    b.Property<Polygon>("Geometry")
                        .HasColumnType("geometry(Polygon,26710)")
                        .HasColumnName("geometry");

                    b.Property<Guid>("Hex160Id")
                        .HasColumnType("uuid")
                        .HasColumnName("hex160_id");

                    b.Property<bool>("Repository")
                        .HasColumnType("boolean")
                        .HasColumnName("repository");

                    b.Property<int>("RequiredPasses")
                        .HasColumnType("integer")
                        .HasColumnName("required_passes");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid?>("UserModifiedId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_modified_id");

                    b.Property<bool>("_delete")
                        .HasColumnType("boolean")
                        .HasColumnName("_delete");

                    b.HasKey("Id")
                        .HasName("pk_hex160_required_passes");

                    b.HasIndex("BirdSpeciesId")
                        .HasDatabaseName("ix_hex160_required_passes_bird_species_id");

                    b.HasIndex("Hex160Id")
                        .HasDatabaseName("ix_hex160_required_passes_hex160_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_hex160_required_passes_user_id");

                    b.HasIndex("UserModifiedId")
                        .HasDatabaseName("ix_hex160_required_passes_user_modified_id");

                    b.ToTable("hex160_required_passes", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.Hex500", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Polygon>("Geometry")
                        .HasColumnType("geometry(Polygon,26710)")
                        .HasColumnName("geometry");

                    b.Property<string>("Hex500ID")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("hex500_id");

                    b.HasKey("Id")
                        .HasName("pk_hex500s");

                    b.ToTable("hex500s", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.OtherWildlife", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_time");

                    b.Property<string>("Detection")
                        .HasColumnType("text")
                        .HasColumnName("detection");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("number");

                    b.Property<Guid>("SiteCallingId")
                        .HasColumnType("uuid")
                        .HasColumnName("site_calling_id");

                    b.Property<Guid>("WildlifeSpeciesId")
                        .HasColumnType("uuid")
                        .HasColumnName("wildlife_species_id");

                    b.Property<bool>("_delete")
                        .HasColumnType("boolean")
                        .HasColumnName("_delete");

                    b.HasKey("Id")
                        .HasName("pk_other_wildlife_records");

                    b.HasIndex("SiteCallingId")
                        .HasDatabaseName("ix_other_wildlife_records_site_calling_id");

                    b.HasIndex("WildlifeSpeciesId")
                        .HasDatabaseName("ix_other_wildlife_records_wildlife_species_id");

                    b.ToTable("other_wildlife_records", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.OwlBanding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AgeClass")
                        .HasColumnType("text")
                        .HasColumnName("age_class");

                    b.Property<string>("Bander")
                        .HasColumnType("text")
                        .HasColumnName("bander");

                    b.Property<string>("BandingLeg")
                        .HasColumnType("text")
                        .HasColumnName("banding_leg");

                    b.Property<string>("BandingPattern")
                        .HasColumnType("text")
                        .HasColumnName("banding_pattern");

                    b.Property<string>("Bands")
                        .HasColumnType("text")
                        .HasColumnName("bands");

                    b.Property<Guid>("BirdSpeciesId")
                        .HasColumnType("uuid")
                        .HasColumnName("bird_species_id");

                    b.Property<bool>("Blood")
                        .HasColumnType("boolean")
                        .HasColumnName("blood");

                    b.Property<string>("CaptureMethod")
                        .HasColumnType("text")
                        .HasColumnName("capture_method");

                    b.Property<string>("Capturer")
                        .HasColumnType("text")
                        .HasColumnName("capturer");

                    b.Property<string>("Comments")
                        .HasColumnType("text")
                        .HasColumnName("comments");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("Datum")
                        .HasColumnType("text")
                        .HasColumnName("datum");

                    b.Property<Guid?>("DistrictId")
                        .HasColumnType("uuid")
                        .HasColumnName("district_id");

                    b.Property<bool>("Ectoparasites")
                        .HasColumnType("boolean")
                        .HasColumnName("ectoparasites");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end_time");

                    b.Property<bool>("Feathers")
                        .HasColumnType("boolean")
                        .HasColumnName("feathers");

                    b.Property<double>("Footpad")
                        .HasColumnType("double precision")
                        .HasColumnName("footpad");

                    b.Property<string>("GPS_TagId")
                        .HasColumnType("text")
                        .HasColumnName("gps_tag_id");

                    b.Property<Point>("Geometry")
                        .HasColumnType("geometry(Point,26710)")
                        .HasColumnName("geometry");

                    b.Property<Guid?>("Hex160Id")
                        .HasColumnType("uuid")
                        .HasColumnName("hex160_id");

                    b.Property<double>("Lat")
                        .HasColumnType("double precision")
                        .HasColumnName("lat");

                    b.Property<double>("Lon")
                        .HasColumnType("double precision")
                        .HasColumnName("lon");

                    b.Property<bool>("OralSample")
                        .HasColumnType("boolean")
                        .HasColumnName("oral_sample");

                    b.Property<Guid>("ProtectionZoneID")
                        .HasColumnType("uuid")
                        .HasColumnName("protection_zone_id");

                    b.Property<Guid?>("Quad75Id")
                        .HasColumnType("uuid")
                        .HasColumnName("quad75_id");

                    b.Property<string>("RecordType")
                        .HasColumnType("text")
                        .HasColumnName("record_type");

                    b.Property<bool>("Repository")
                        .HasColumnType("boolean")
                        .HasColumnName("repository");

                    b.Property<string>("Sex")
                        .HasColumnType("text")
                        .HasColumnName("sex");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_time");

                    b.Property<double>("TailLength")
                        .HasColumnType("double precision")
                        .HasColumnName("tail_length");

                    b.Property<double>("Temperature")
                        .HasColumnType("double precision")
                        .HasColumnName("temperature");

                    b.Property<string>("TrapCode")
                        .HasColumnType("text")
                        .HasColumnName("trap_code");

                    b.Property<string>("USFWS_BandColor")
                        .HasColumnType("text")
                        .HasColumnName("usfws_band_color");

                    b.Property<string>("USFWS_BandNum")
                        .HasColumnType("text")
                        .HasColumnName("usfws_band_num");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid?>("UserModifiedId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_modified_id");

                    b.Property<Guid?>("WatershedId")
                        .HasColumnType("uuid")
                        .HasColumnName("watershed_id");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision")
                        .HasColumnName("weight");

                    b.Property<double>("WingChord")
                        .HasColumnType("double precision")
                        .HasColumnName("wing_chord");

                    b.Property<bool>("_delete")
                        .HasColumnType("boolean")
                        .HasColumnName("_delete");

                    b.HasKey("Id")
                        .HasName("pk_owl_bandings");

                    b.HasIndex("BirdSpeciesId")
                        .HasDatabaseName("ix_owl_bandings_bird_species_id");

                    b.HasIndex("DistrictId")
                        .HasDatabaseName("ix_owl_bandings_district_id");

                    b.HasIndex("Hex160Id")
                        .HasDatabaseName("ix_owl_bandings_hex160_id");

                    b.HasIndex("ProtectionZoneID")
                        .HasDatabaseName("ix_owl_bandings_protection_zone_id");

                    b.HasIndex("Quad75Id")
                        .HasDatabaseName("ix_owl_bandings_quad75_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_owl_bandings_user_id");

                    b.HasIndex("UserModifiedId")
                        .HasDatabaseName("ix_owl_bandings_user_modified_id");

                    b.HasIndex("WatershedId")
                        .HasDatabaseName("ix_owl_bandings_watershed_id");

                    b.ToTable("owl_bandings", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.PermanentCallStation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_modified");

                    b.Property<Point>("Geometry")
                        .HasColumnType("geometry(Point,26710)")
                        .HasColumnName("geometry");

                    b.Property<Guid>("Hex160Id")
                        .HasColumnType("uuid")
                        .HasColumnName("hex160_id");

                    b.Property<string>("PCS_ID")
                        .HasColumnType("text")
                        .HasColumnName("pcs_id");

                    b.Property<bool>("Repository")
                        .HasColumnType("boolean")
                        .HasColumnName("repository");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid?>("UserModifiedId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_modified_id");

                    b.Property<bool>("_delete")
                        .HasColumnType("boolean")
                        .HasColumnName("_delete");

                    b.HasKey("Id")
                        .HasName("pk_permanent_call_stations");

                    b.HasIndex("Hex160Id")
                        .HasDatabaseName("ix_permanent_call_stations_hex160_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_permanent_call_stations_user_id");

                    b.HasIndex("UserModifiedId")
                        .HasDatabaseName("ix_permanent_call_stations_user_modified_id");

                    b.ToTable("permanent_call_stations", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.Picture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("AmphibianElementId")
                        .HasColumnType("uuid")
                        .HasColumnName("amphibian_element_id");

                    b.Property<Guid?>("BotanicalElementId")
                        .HasColumnType("uuid")
                        .HasColumnName("botanical_element_id");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_time");

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("bytea")
                        .HasColumnName("image_data");

                    b.Property<Guid?>("OwlBandingId")
                        .HasColumnType("uuid")
                        .HasColumnName("owl_banding_id");

                    b.Property<byte[]>("PreviewData")
                        .HasColumnType("bytea")
                        .HasColumnName("preview_data");

                    b.Property<Guid?>("SiteCallingId")
                        .HasColumnType("uuid")
                        .HasColumnName("site_calling_id");

                    b.HasKey("Id")
                        .HasName("pk_pictures");

                    b.HasIndex("AmphibianElementId")
                        .HasDatabaseName("ix_pictures_amphibian_element_id");

                    b.HasIndex("BotanicalElementId")
                        .HasDatabaseName("ix_pictures_botanical_element_id");

                    b.HasIndex("OwlBandingId")
                        .HasDatabaseName("ix_pictures_owl_banding_id");

                    b.HasIndex("SiteCallingId")
                        .HasDatabaseName("ix_pictures_site_calling_id");

                    b.ToTable("pictures", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.PlantProtectionSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("DistrictId")
                        .HasColumnType("uuid")
                        .HasColumnName("district_id");

                    b.Property<Guid>("PlantSpeciesId")
                        .HasColumnType("uuid")
                        .HasColumnName("plant_species_id");

                    b.Property<string>("Summary")
                        .HasColumnType("text")
                        .HasColumnName("summary");

                    b.HasKey("Id")
                        .HasName("pk_plant_protection_summaries");

                    b.HasIndex("DistrictId")
                        .HasDatabaseName("ix_plant_protection_summaries_district_id");

                    b.HasIndex("PlantSpeciesId")
                        .HasDatabaseName("ix_plant_protection_summaries_plant_species_id");

                    b.ToTable("plant_protection_summaries", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.PlantSpecies", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CalList")
                        .HasColumnType("text")
                        .HasColumnName("cal_list");

                    b.Property<string>("ComName")
                        .HasColumnType("text")
                        .HasColumnName("com_name");

                    b.Property<string>("ElmCode")
                        .HasColumnType("text")
                        .HasColumnName("elm_code");

                    b.Property<string>("Family")
                        .HasColumnType("text")
                        .HasColumnName("family");

                    b.Property<string>("FedList")
                        .HasColumnType("text")
                        .HasColumnName("fed_list");

                    b.Property<string>("GRank")
                        .HasColumnType("text")
                        .HasColumnName("g_rank");

                    b.Property<string>("GenHabitat")
                        .HasColumnType("text")
                        .HasColumnName("gen_habitat");

                    b.Property<string>("Habitats")
                        .HasColumnType("text")
                        .HasColumnName("habitats");

                    b.Property<string>("MicroHabitat")
                        .HasColumnType("text")
                        .HasColumnName("micro_habitat");

                    b.Property<string>("OtherStatus")
                        .HasColumnType("text")
                        .HasColumnName("other_status");

                    b.Property<bool>("PlaceHolder")
                        .HasColumnType("boolean")
                        .HasColumnName("place_holder");

                    b.Property<string>("RPlantRank")
                        .HasColumnType("text")
                        .HasColumnName("r_plant_rank");

                    b.Property<string>("SRank")
                        .HasColumnType("text")
                        .HasColumnName("s_rank");

                    b.Property<string>("SciName")
                        .HasColumnType("text")
                        .HasColumnName("sci_name");

                    b.Property<string>("SpeciesCode")
                        .HasColumnType("text")
                        .HasColumnName("species_code");

                    b.Property<string>("SpiHabitat")
                        .HasColumnType("text")
                        .HasColumnName("spi_habitat");

                    b.Property<string>("TaxonGroup")
                        .HasColumnType("text")
                        .HasColumnName("taxon_group");

                    b.HasKey("Id")
                        .HasName("pk_plant_species");

                    b.ToTable("plant_species", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.ProtectionZone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_modified");

                    b.Property<MultiPolygon>("Geometry")
                        .HasColumnType("geometry(MultiPolygon,26710)")
                        .HasColumnName("geometry");

                    b.Property<string>("PZ_ID")
                        .HasColumnType("text")
                        .HasColumnName("pz_id");

                    b.Property<bool>("Repository")
                        .HasColumnType("boolean")
                        .HasColumnName("repository");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid?>("UserModifiedId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_modified_id");

                    b.Property<bool>("_delete")
                        .HasColumnType("boolean")
                        .HasColumnName("_delete");

                    b.HasKey("Id")
                        .HasName("pk_protection_zones");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_protection_zones_user_id");

                    b.HasIndex("UserModifiedId")
                        .HasDatabaseName("ix_protection_zones_user_modified_id");

                    b.ToTable("protection_zones", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.Quad75", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<double>("Area")
                        .HasColumnType("double precision")
                        .HasColumnName("area");

                    b.Property<string>("B_M")
                        .HasColumnType("text")
                        .HasColumnName("b_m");

                    b.Property<string>("Border")
                        .HasColumnType("text")
                        .HasColumnName("border");

                    b.Property<string>("CNPSCode")
                        .HasColumnType("text")
                        .HasColumnName("cnps_code");

                    b.Property<Polygon>("Geometry")
                        .HasColumnType("geometry(Polygon,26710)")
                        .HasColumnName("geometry");

                    b.Property<double>("Perimeter")
                        .HasColumnType("double precision")
                        .HasColumnName("perimeter");

                    b.Property<string>("Q100Name")
                        .HasColumnType("text")
                        .HasColumnName("q100_name");

                    b.Property<int>("Q24Year")
                        .HasColumnType("integer")
                        .HasColumnName("q24_year");

                    b.Property<string>("QuadCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("quad_code");

                    b.Property<string>("QuadName")
                        .HasColumnType("text")
                        .HasColumnName("quad_name");

                    b.Property<string>("QuadSize")
                        .HasColumnType("text")
                        .HasColumnName("quad_size");

                    b.Property<string>("Sensitive")
                        .HasColumnType("text")
                        .HasColumnName("sensitive");

                    b.Property<string>("UTMZone")
                        .HasColumnType("text")
                        .HasColumnName("utm_zone");

                    b.Property<string>("UsgsCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("isgs_code");

                    b.HasKey("Id")
                        .HasName("pk_quad75s");

                    b.ToTable("quad75s", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.Region", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("RegionName")
                        .HasColumnType("text")
                        .HasColumnName("region_name");

                    b.HasKey("Id")
                        .HasName("pk_regions");

                    b.ToTable("regions", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.RegionalPlantList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("PlantSpeciesId")
                        .HasColumnType("uuid")
                        .HasColumnName("plant_species_id");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uuid")
                        .HasColumnName("region_id");

                    b.HasKey("Id")
                        .HasName("pk_regional_plant_lists");

                    b.HasIndex("PlantSpeciesId")
                        .HasDatabaseName("ix_regional_plant_lists_plant_species_id");

                    b.HasIndex("RegionId")
                        .HasDatabaseName("ix_regional_plant_lists_region_id");

                    b.ToTable("regional_plant_lists", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.ScopingText", b =>
                {
                    b.Property<string>("Field")
                        .HasColumnType("text")
                        .HasColumnName("field");

                    b.Property<string>("Header")
                        .HasColumnType("text")
                        .HasColumnName("header");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.ToTable("scoping_texts", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.SiteCalling", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AreaDescription")
                        .HasColumnType("text")
                        .HasColumnName("area_description");

                    b.Property<string>("Comments")
                        .HasColumnType("text")
                        .HasColumnName("comments");

                    b.Property<double>("DBH")
                        .HasColumnType("double precision")
                        .HasColumnName("dbh");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("Datum")
                        .HasColumnType("text")
                        .HasColumnName("datum");

                    b.Property<Guid?>("DistrictId")
                        .HasColumnType("uuid")
                        .HasColumnName("district_id");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end_time");

                    b.Property<Point>("Geometry")
                        .HasColumnType("geometry(Point,26710)")
                        .HasColumnName("geometry");

                    b.Property<Guid?>("Hex160Id")
                        .HasColumnType("uuid")
                        .HasColumnName("hex160_id");

                    b.Property<Guid?>("Hex500Id")
                        .HasColumnType("uuid")
                        .HasColumnName("hex500_id");

                    b.Property<double>("Lat")
                        .HasColumnType("double precision")
                        .HasColumnName("lat");

                    b.Property<double>("Lon")
                        .HasColumnType("double precision")
                        .HasColumnName("lon");

                    b.Property<bool>("ManualPassChanged")
                        .HasColumnType("boolean")
                        .HasColumnName("manual_pass_changed");

                    b.Property<double>("NestHeight")
                        .HasColumnType("double precision")
                        .HasColumnName("nest_height");

                    b.Property<bool>("NestTree")
                        .HasColumnType("boolean")
                        .HasColumnName("nest_tree");

                    b.Property<string>("NestType")
                        .HasColumnType("text")
                        .HasColumnName("nest_type");

                    b.Property<string>("NestingStatus")
                        .HasColumnType("text")
                        .HasColumnName("nesting_status");

                    b.Property<int>("PZPassNumber")
                        .HasColumnType("integer")
                        .HasColumnName("pz_pass_number");

                    b.Property<int>("PassNumber")
                        .HasColumnType("integer")
                        .HasColumnName("pass_number");

                    b.Property<string>("Precipitation")
                        .HasColumnType("text")
                        .HasColumnName("precipitation");

                    b.Property<Guid?>("ProtectionZoneID")
                        .HasColumnType("uuid")
                        .HasColumnName("protection_zone_id");

                    b.Property<Guid?>("Quad75Id")
                        .HasColumnType("uuid")
                        .HasColumnName("quad75_id");

                    b.Property<string>("RecordType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("record_type");

                    b.Property<bool>("Repository")
                        .HasColumnType("boolean")
                        .HasColumnName("repository");

                    b.Property<string>("ReproductiveStatus")
                        .HasColumnType("text")
                        .HasColumnName("reproductive_status");

                    b.Property<string>("SPOW_OccupancyStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("spow_occupancy_status");

                    b.Property<string>("SiteID")
                        .HasColumnType("text")
                        .HasColumnName("site_id");

                    b.Property<bool>("SpeciesPresent")
                        .HasColumnType("boolean")
                        .HasColumnName("species_present");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_time");

                    b.Property<DateTime?>("SunsetTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("sunset_time");

                    b.Property<Guid>("SurveySpeciesId")
                        .HasColumnType("uuid")
                        .HasColumnName("bird_species_survey_id");

                    b.Property<string>("SurveyType1")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("survey_type1");

                    b.Property<string>("SurveyType2")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("survey_type2");

                    b.Property<bool>("TargetSpeciesPresent")
                        .HasColumnType("boolean")
                        .HasColumnName("target_species_present");

                    b.Property<string>("TreeSpecies")
                        .HasColumnType("text")
                        .HasColumnName("tree_species");

                    b.Property<bool>("TreeTagged")
                        .HasColumnType("boolean")
                        .HasColumnName("tree_tagged");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid?>("UserModifiedId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_modified_id");

                    b.Property<Guid?>("WatershedId")
                        .HasColumnType("uuid")
                        .HasColumnName("watershed_id");

                    b.Property<string>("Wind")
                        .HasColumnType("text")
                        .HasColumnName("wind");

                    b.Property<bool>("YearlyActivityCenter")
                        .HasColumnType("boolean")
                        .HasColumnName("yearly_activity_center");

                    b.Property<bool>("_delete")
                        .HasColumnType("boolean")
                        .HasColumnName("_delete");

                    b.HasKey("Id")
                        .HasName("pk_site_callings");

                    b.HasIndex("DistrictId")
                        .HasDatabaseName("ix_site_callings_district_id");

                    b.HasIndex("Hex160Id")
                        .HasDatabaseName("ix_site_callings_hex160_id");

                    b.HasIndex("Hex500Id")
                        .HasDatabaseName("ix_site_callings_hex500_id");

                    b.HasIndex("ProtectionZoneID")
                        .HasDatabaseName("ix_site_callings_protection_zone_id");

                    b.HasIndex("Quad75Id")
                        .HasDatabaseName("ix_site_callings_quad75_id");

                    b.HasIndex("SurveySpeciesId")
                        .HasDatabaseName("ix_site_callings_bird_species_survey_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_site_callings_user_id");

                    b.HasIndex("UserModifiedId")
                        .HasDatabaseName("ix_site_callings_user_modified_id");

                    b.HasIndex("WatershedId")
                        .HasDatabaseName("ix_site_callings_watershed_id");

                    b.ToTable("site_callings", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.SiteCallingDetection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Age")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("age");

                    b.Property<double>("Bearing")
                        .HasColumnType("double precision")
                        .HasColumnName("bearing");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("Datum")
                        .HasColumnType("text")
                        .HasColumnName("datum");

                    b.Property<string>("DetectionMethod")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("detection_method");

                    b.Property<DateTime>("DetectionTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("detection_time");

                    b.Property<double>("Distance")
                        .HasColumnType("double precision")
                        .HasColumnName("distance");

                    b.Property<Guid?>("DistrictId")
                        .HasColumnType("uuid")
                        .HasColumnName("district_id");

                    b.Property<bool>("EstimatedLocation")
                        .HasColumnType("boolean")
                        .HasColumnName("estimated_location");

                    b.Property<string>("FemaleBandingLeg")
                        .HasColumnType("text")
                        .HasColumnName("female_banding_leg");

                    b.Property<string>("FemaleBandingPattern")
                        .HasColumnType("text")
                        .HasColumnName("female_banding_pattern");

                    b.Property<Point>("Geometry")
                        .HasColumnType("geometry(Point,26710)")
                        .HasColumnName("geometry");

                    b.Property<Guid?>("Hex160Id")
                        .HasColumnType("uuid")
                        .HasColumnName("hex160_id");

                    b.Property<Guid?>("Hex500Id")
                        .HasColumnType("uuid")
                        .HasColumnName("hex500_id");

                    b.Property<double>("Lat")
                        .HasColumnType("double precision")
                        .HasColumnName("lat");

                    b.Property<double>("Lon")
                        .HasColumnType("double precision")
                        .HasColumnName("lon");

                    b.Property<string>("MaleBandingLeg")
                        .HasColumnType("text")
                        .HasColumnName("male_banding_leg");

                    b.Property<string>("MaleBandingPattern")
                        .HasColumnType("text")
                        .HasColumnName("male_banding_pattern");

                    b.Property<bool>("Moused")
                        .HasColumnType("boolean")
                        .HasColumnName("moused");

                    b.Property<int>("NumberOfYoung")
                        .HasColumnType("integer")
                        .HasColumnName("number_of_young");

                    b.Property<Guid?>("Quad75Id")
                        .HasColumnType("uuid")
                        .HasColumnName("quad75_id");

                    b.Property<bool>("Repository")
                        .HasColumnType("boolean")
                        .HasColumnName("repository");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sex");

                    b.Property<Guid?>("SiteCallingId")
                        .HasColumnType("uuid")
                        .HasColumnName("site_calling_id");

                    b.Property<Guid>("SpeciesFoundId")
                        .HasColumnType("uuid")
                        .HasColumnName("bird_species_found_id");

                    b.Property<string>("SpeciesSite")
                        .HasColumnType("text")
                        .HasColumnName("species_site");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid?>("UserLocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_location_id");

                    b.Property<Guid?>("UserModifiedId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_modified_id");

                    b.Property<Guid?>("WatershedId")
                        .HasColumnType("uuid")
                        .HasColumnName("watershed_id");

                    b.Property<bool>("_delete")
                        .HasColumnType("boolean")
                        .HasColumnName("_delete");

                    b.HasKey("Id")
                        .HasName("pk_site_calling_detections");

                    b.HasIndex("DistrictId")
                        .HasDatabaseName("ix_site_calling_detections_district_id");

                    b.HasIndex("Hex160Id")
                        .HasDatabaseName("ix_site_calling_detections_hex160_id");

                    b.HasIndex("Hex500Id")
                        .HasDatabaseName("ix_site_calling_detections_hex500_id");

                    b.HasIndex("Quad75Id")
                        .HasDatabaseName("ix_site_calling_detections_quad75_id");

                    b.HasIndex("SiteCallingId")
                        .HasDatabaseName("ix_site_calling_detections_site_calling_id");

                    b.HasIndex("SpeciesFoundId")
                        .HasDatabaseName("ix_site_calling_detections_bird_species_found_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_site_calling_detections_user_id");

                    b.HasIndex("UserLocationId")
                        .HasDatabaseName("ix_site_calling_detections_user_location_id");

                    b.HasIndex("UserModifiedId")
                        .HasDatabaseName("ix_site_calling_detections_user_modified_id");

                    b.HasIndex("WatershedId")
                        .HasDatabaseName("ix_site_calling_detections_watershed_id");

                    b.ToTable("site_calling_detections", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.SiteCallingTrack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<MultiLineString>("Geometry")
                        .HasColumnType("geometry(MultiLineString,26710)")
                        .HasColumnName("geometry");

                    b.HasKey("Id")
                        .HasName("pk_site_calling_tracks");

                    b.ToTable("site_calling_tracks", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.SPI_GGOW", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("DistrictId")
                        .HasColumnType("uuid")
                        .HasColumnName("district_id");

                    b.Property<string>("GISMapped")
                        .HasColumnType("text")
                        .HasColumnName("gid_mapped");

                    b.Property<string>("HabitatArea")
                        .HasColumnType("text")
                        .HasColumnName("habitat_area");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<string>("MonitoringGroup")
                        .HasColumnType("text")
                        .HasColumnName("monitoring_group");

                    b.Property<string>("Nest")
                        .HasColumnType("text")
                        .HasColumnName("nest");

                    b.Property<string>("NestName")
                        .HasColumnType("text")
                        .HasColumnName("nest_name");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<int>("NumFledglings")
                        .HasColumnType("integer")
                        .HasColumnName("num_fledglings");

                    b.Property<int>("NumNestlings")
                        .HasColumnType("integer")
                        .HasColumnName("num_nestlings");

                    b.Property<string>("Pair")
                        .HasColumnType("text")
                        .HasColumnName("pair");

                    b.Property<string>("Quarter")
                        .HasColumnType("text")
                        .HasColumnName("quarter");

                    b.Property<string>("Results")
                        .HasColumnType("text")
                        .HasColumnName("results");

                    b.Property<string>("Rge")
                        .HasColumnType("text")
                        .HasColumnName("rge");

                    b.Property<string>("SPI_ID")
                        .HasColumnType("text")
                        .HasColumnName("spi_id");

                    b.Property<string>("Sec")
                        .HasColumnType("text")
                        .HasColumnName("sec");

                    b.Property<string>("Sixteenth")
                        .HasColumnType("text")
                        .HasColumnName("sixteenth");

                    b.Property<string>("Surveyors")
                        .HasColumnType("text")
                        .HasColumnName("surveyors");

                    b.Property<string>("Territory")
                        .HasColumnType("text")
                        .HasColumnName("territory");

                    b.Property<string>("Twn")
                        .HasColumnType("text")
                        .HasColumnName("twn");

                    b.Property<string>("UTM_E")
                        .HasColumnType("text")
                        .HasColumnName("utm_e");

                    b.Property<string>("UTM_N")
                        .HasColumnType("text")
                        .HasColumnName("utm_n");

                    b.Property<string>("UTM_ZONE")
                        .HasColumnType("text")
                        .HasColumnName("utm_zone");

                    b.Property<int>("UniqueID")
                        .HasColumnType("integer")
                        .HasColumnName("unique_id");

                    b.Property<Guid?>("WatershedId")
                        .HasColumnType("uuid")
                        .HasColumnName("watershed_id");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.Property<int>("YearMeasured")
                        .HasColumnType("integer")
                        .HasColumnName("year_measured");

                    b.Property<int>("YearUsed")
                        .HasColumnType("integer")
                        .HasColumnName("year_used");

                    b.HasKey("Id")
                        .HasName("pk_spi_ggows");

                    b.HasIndex("DistrictId")
                        .HasDatabaseName("ix_spi_ggows_district_id");

                    b.HasIndex("WatershedId")
                        .HasDatabaseName("ix_spi_ggows_watershed_id");

                    b.ToTable("spi_ggows", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.SPI_NOGO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Comments")
                        .HasColumnType("text")
                        .HasColumnName("comments");

                    b.Property<string>("Dist_ID")
                        .HasColumnType("text")
                        .HasColumnName("dist_id");

                    b.Property<Guid?>("DistrictId")
                        .HasColumnType("uuid")
                        .HasColumnName("district_id");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<string>("Nest")
                        .HasColumnType("text")
                        .HasColumnName("nest");

                    b.Property<int>("NestID")
                        .HasColumnType("integer")
                        .HasColumnName("nest_id");

                    b.Property<string>("NestName")
                        .HasColumnType("text")
                        .HasColumnName("nest_name");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<int>("NumberOfYoung")
                        .HasColumnType("integer")
                        .HasColumnName("number_of_young");

                    b.Property<string>("Owner")
                        .HasColumnType("text")
                        .HasColumnName("owner");

                    b.Property<string>("Pair")
                        .HasColumnType("text")
                        .HasColumnName("pair");

                    b.Property<string>("Quarter")
                        .HasColumnType("text")
                        .HasColumnName("quarter");

                    b.Property<string>("Range")
                        .HasColumnType("text")
                        .HasColumnName("range");

                    b.Property<string>("RefLoc")
                        .HasColumnType("text")
                        .HasColumnName("ref_loc");

                    b.Property<string>("Section")
                        .HasColumnType("text")
                        .HasColumnName("section");

                    b.Property<string>("Sixteenth")
                        .HasColumnType("text")
                        .HasColumnName("sixteenth");

                    b.Property<string>("Surveyor")
                        .HasColumnType("text")
                        .HasColumnName("surveyor");

                    b.Property<string>("Territory")
                        .HasColumnType("text")
                        .HasColumnName("territory");

                    b.Property<string>("TerritoryStatus")
                        .HasColumnType("text")
                        .HasColumnName("territory_status");

                    b.Property<string>("Township")
                        .HasColumnType("text")
                        .HasColumnName("township");

                    b.Property<string>("Transmitter")
                        .HasColumnType("text")
                        .HasColumnName("transmitter");

                    b.Property<int>("UNIQUEID")
                        .HasColumnType("integer")
                        .HasColumnName("unique_id");

                    b.Property<string>("USFS_Exchange")
                        .HasColumnType("text")
                        .HasColumnName("usfs_exchange");

                    b.Property<int>("UTM_EastingCoordinate")
                        .HasColumnType("integer")
                        .HasColumnName("utm_easting_coordinate");

                    b.Property<int>("UTM_NorthingCoordinate")
                        .HasColumnType("integer")
                        .HasColumnName("utm_northing_coordinate");

                    b.Property<int>("WSID")
                        .HasColumnType("integer")
                        .HasColumnName("wsid");

                    b.Property<Guid?>("WatershedId")
                        .HasColumnType("uuid")
                        .HasColumnName("watershed_id");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.Property<string>("Young")
                        .HasColumnType("text")
                        .HasColumnName("young");

                    b.Property<string>("_300MSearch")
                        .HasColumnType("text")
                        .HasColumnName("_300m_search");

                    b.HasKey("Id")
                        .HasName("pk_spi_nogos");

                    b.HasIndex("DistrictId")
                        .HasDatabaseName("ix_spi_nogos_district_id");

                    b.HasIndex("WatershedId")
                        .HasDatabaseName("ix_spi_nogos_watershed_id");

                    b.ToTable("spi_nogos", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.SPI_SPOW", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AdultSubadultCount")
                        .HasColumnType("integer")
                        .HasColumnName("adult_subadult_count");

                    b.Property<string>("AgeSex")
                        .HasColumnType("text")
                        .HasColumnName("age_sex");

                    b.Property<string>("BarredOwlResponse")
                        .HasColumnType("text")
                        .HasColumnName("barred_owl_response");

                    b.Property<string>("BirdStatus")
                        .HasColumnType("text")
                        .HasColumnName("bird_status");

                    b.Property<string>("CDFW_ID")
                        .HasColumnType("text")
                        .HasColumnName("cdfw_id");

                    b.Property<string>("DetectionType")
                        .HasColumnType("text")
                        .HasColumnName("detection_type");

                    b.Property<string>("Dist_ID")
                        .HasColumnType("text")
                        .HasColumnName("dist_id");

                    b.Property<Guid?>("DistrictId")
                        .HasColumnType("uuid")
                        .HasColumnName("district_id");

                    b.Property<string>("FemaleResponse")
                        .HasColumnType("text")
                        .HasColumnName("female_response");

                    b.Property<string>("HCP_Status")
                        .HasColumnType("text")
                        .HasColumnName("hcp_status");

                    b.Property<string>("HCP_Status_2")
                        .HasColumnType("text")
                        .HasColumnName("hcp_status_2");

                    b.Property<string>("HEX_500_ID")
                        .HasColumnType("text")
                        .HasColumnName("hex500_id");

                    b.Property<string>("HabitatCrossPlot")
                        .HasColumnType("text")
                        .HasColumnName("habitat_cross_plot");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<string>("MaleResponse")
                        .HasColumnType("text")
                        .HasColumnName("male_response");

                    b.Property<string>("Nest")
                        .HasColumnType("text")
                        .HasColumnName("nest");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<int>("NumSeen")
                        .HasColumnType("integer")
                        .HasColumnName("num_seen");

                    b.Property<int>("NumberOfYoung")
                        .HasColumnType("integer")
                        .HasColumnName("number_of_young");

                    b.Property<string>("Observer")
                        .HasColumnType("text")
                        .HasColumnName("observer");

                    b.Property<string>("Occupied")
                        .HasColumnType("text")
                        .HasColumnName("occupied");

                    b.Property<string>("Pair")
                        .HasColumnType("text")
                        .HasColumnName("pair");

                    b.Property<string>("Quarter")
                        .HasColumnType("text")
                        .HasColumnName("quarter");

                    b.Property<string>("Range")
                        .HasColumnType("text")
                        .HasColumnName("range");

                    b.Property<string>("Response")
                        .HasColumnType("text")
                        .HasColumnName("response");

                    b.Property<string>("Section")
                        .HasColumnType("text")
                        .HasColumnName("section");

                    b.Property<string>("Sixteenth")
                        .HasColumnType("text")
                        .HasColumnName("sixteenth");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<string>("StudyArea")
                        .HasColumnType("text")
                        .HasColumnName("study_area");

                    b.Property<string>("SubSpecies1")
                        .HasColumnType("text")
                        .HasColumnName("sub_species1");

                    b.Property<string>("Territory")
                        .HasColumnType("text")
                        .HasColumnName("territory");

                    b.Property<string>("Township")
                        .HasColumnType("text")
                        .HasColumnName("township");

                    b.Property<int>("UID")
                        .HasColumnType("integer")
                        .HasColumnName("uid");

                    b.Property<int>("UTM_EastingCoordinate")
                        .HasColumnType("integer")
                        .HasColumnName("utm_easting_coordinate");

                    b.Property<int>("UTM_NorthingCoordinate")
                        .HasColumnType("integer")
                        .HasColumnName("utm_northing_coordinate");

                    b.Property<int>("UniqueID")
                        .HasColumnType("integer")
                        .HasColumnName("unique_id");

                    b.Property<string>("UnknownSexResponse")
                        .HasColumnType("text")
                        .HasColumnName("unknown_sex_response");

                    b.Property<string>("VisitType")
                        .HasColumnType("text")
                        .HasColumnName("visit_type");

                    b.Property<string>("WBIS_MappedLocation")
                        .HasColumnType("text")
                        .HasColumnName("wbis_mapped_location");

                    b.Property<int>("WS_ID")
                        .HasColumnType("integer")
                        .HasColumnName("ws_id");

                    b.Property<Guid?>("WatershedId")
                        .HasColumnType("uuid")
                        .HasColumnName("watershed_id");

                    b.Property<string>("YAC")
                        .HasColumnType("text")
                        .HasColumnName("yac");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.Property<string>("Young")
                        .HasColumnType("text")
                        .HasColumnName("young");

                    b.HasKey("Id")
                        .HasName("pk_spi_spows");

                    b.HasIndex("DistrictId")
                        .HasDatabaseName("ix_spi_spows_district_id");

                    b.HasIndex("WatershedId")
                        .HasDatabaseName("ix_spi_spows_watershed_id");

                    b.ToTable("spi_spows", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.SPI_WildlifeSighting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ActivityObserved")
                        .HasColumnType("text")
                        .HasColumnName("activity_observed");

                    b.Property<Guid?>("DistrictId")
                        .HasColumnType("uuid")
                        .HasColumnName("district_id");

                    b.Property<string>("Genus")
                        .HasColumnType("text")
                        .HasColumnName("genus");

                    b.Property<string>("IUCN_Rating")
                        .HasColumnType("text")
                        .HasColumnName("iucn_rating");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<int>("NumObserved")
                        .HasColumnType("integer")
                        .HasColumnName("num_observed");

                    b.Property<string>("Species")
                        .HasColumnType("text")
                        .HasColumnName("species");

                    b.Property<Guid?>("WatershedId")
                        .HasColumnType("uuid")
                        .HasColumnName("watershed_id");

                    b.Property<string>("WildlifeSpecies")
                        .HasColumnType("text")
                        .HasColumnName("wildlife_species");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.HasKey("Id")
                        .HasName("pk_spi_wildlife_sightings");

                    b.HasIndex("DistrictId")
                        .HasDatabaseName("ix_spi_wildlife_sightings_district_id");

                    b.HasIndex("WatershedId")
                        .HasDatabaseName("ix_spi_wildlife_sightings_watershed_id");

                    b.ToTable("spi_wildlife_sightings", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.SPIPlantPoint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("DistrictId")
                        .HasColumnType("uuid")
                        .HasColumnName("district_id");

                    b.Property<Point>("Geometry")
                        .HasColumnType("geometry(Point,26710)")
                        .HasColumnName("geometry");

                    b.Property<Guid?>("Hex160Id")
                        .HasColumnType("uuid")
                        .HasColumnName("hex160_id");

                    b.Property<double>("Lat")
                        .HasColumnType("double precision")
                        .HasColumnName("lat");

                    b.Property<double>("Lon")
                        .HasColumnType("double precision")
                        .HasColumnName("lon");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<Guid>("PlantSpeciesId")
                        .HasColumnType("uuid")
                        .HasColumnName("plant_species_id");

                    b.Property<Guid?>("Quad75Id")
                        .HasColumnType("uuid")
                        .HasColumnName("quad75_id");

                    b.Property<string>("THP")
                        .HasColumnType("text")
                        .HasColumnName("thp");

                    b.Property<Guid?>("WatershedId")
                        .HasColumnType("uuid")
                        .HasColumnName("watershed_id");

                    b.HasKey("Id")
                        .HasName("pk_spi_plant_points");

                    b.HasIndex("DistrictId")
                        .HasDatabaseName("ix_spi_plant_points_district_id");

                    b.HasIndex("Hex160Id")
                        .HasDatabaseName("ix_spi_plant_points_hex160_id");

                    b.HasIndex("PlantSpeciesId")
                        .HasDatabaseName("ix_spi_plant_points_plant_species_id");

                    b.HasIndex("Quad75Id")
                        .HasDatabaseName("ix_spi_plant_points_quad75_id");

                    b.HasIndex("WatershedId")
                        .HasDatabaseName("ix_spi_plant_points_watershed_id");

                    b.ToTable("spi_plant_points", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.SPIPlantPolygon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Associated")
                        .HasColumnType("text")
                        .HasColumnName("associated");

                    b.Property<int>("CNDDB_Occurrence")
                        .HasColumnType("integer")
                        .HasColumnName("cnddb_occurrence");

                    b.Property<string>("Comments")
                        .HasColumnType("text")
                        .HasColumnName("comments");

                    b.Property<string>("CoordSource")
                        .HasColumnType("text")
                        .HasColumnName("coord_source");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_time");

                    b.Property<string>("Datum")
                        .HasColumnType("text")
                        .HasColumnName("datum");

                    b.Property<Guid?>("DistrictId")
                        .HasColumnType("uuid")
                        .HasColumnName("district_id");

                    b.Property<string>("Disturbance")
                        .HasColumnType("text")
                        .HasColumnName("disturbance");

                    b.Property<int>("Flowering")
                        .HasColumnType("integer")
                        .HasColumnName("flowering");

                    b.Property<int>("Fruiting")
                        .HasColumnType("integer")
                        .HasColumnName("fruiting");

                    b.Property<MultiPolygon>("Geometry")
                        .HasColumnType("geometry(Polygon,26710)")
                        .HasColumnName("geometry");

                    b.Property<string>("HabDesc")
                        .HasColumnType("text")
                        .HasColumnName("hab_desc");

                    b.Property<string>("LandUse")
                        .HasColumnType("text")
                        .HasColumnName("land_use");

                    b.Property<string>("Landowner")
                        .HasColumnType("text")
                        .HasColumnName("land_owner");

                    b.Property<double>("Lat")
                        .HasColumnType("double precision")
                        .HasColumnName("lat");

                    b.Property<string>("Link")
                        .HasColumnType("text")
                        .HasColumnName("link");

                    b.Property<string>("Location")
                        .HasColumnType("text")
                        .HasColumnName("location");

                    b.Property<double>("Lon")
                        .HasColumnType("double precision")
                        .HasColumnName("lon");

                    b.Property<string>("NAME1_")
                        .HasColumnType("text")
                        .HasColumnName("name1_");

                    b.Property<int>("NumInd")
                        .HasColumnType("integer")
                        .HasColumnName("num_ind");

                    b.Property<int>("NumIndMax")
                        .HasColumnType("integer")
                        .HasColumnName("num_ind_max");

                    b.Property<string>("ObsContact")
                        .HasColumnType("text")
                        .HasColumnName("obs_contract");

                    b.Property<Guid>("PlantSpeciesId")
                        .HasColumnType("uuid")
                        .HasColumnName("plant_species_id");

                    b.Property<string>("SiteQuality")
                        .HasColumnType("text")
                        .HasColumnName("site_quality");

                    b.Property<string>("Surveyor")
                        .HasColumnType("text")
                        .HasColumnName("surveyor");

                    b.Property<string>("Threats")
                        .HasColumnType("text")
                        .HasColumnName("threats");

                    b.Property<int>("Vegetative")
                        .HasColumnType("integer")
                        .HasColumnName("vegetative");

                    b.HasKey("Id")
                        .HasName("pk_spi_plant_polygons");

                    b.HasIndex("DistrictId")
                        .HasDatabaseName("ix_spi_plant_polygons_district_id");

                    b.HasIndex("PlantSpeciesId")
                        .HasDatabaseName("ix_spi_plant_polygons_plant_species_id");

                    b.ToTable("spi_plant_polygons", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.TableModified", b =>
                {
                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("TableName")
                        .HasColumnType("text")
                        .HasColumnName("table_name");

                    b.ToTable("tables_modified", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.THP_Area", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("THPName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("thp_name");

                    b.HasKey("Id")
                        .HasName("pk_thp_areas");

                    b.ToTable("thp_areas", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.UserFlexRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("DataFormID")
                        .HasColumnType("uuid")
                        .HasColumnName("data_form_id");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_modified");

                    b.Property<bool>("Repository")
                        .HasColumnType("boolean")
                        .HasColumnName("repository");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid?>("UserModifiedId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_modified_id");

                    b.Property<bool>("_delete")
                        .HasColumnType("boolean")
                        .HasColumnName("_delete");

                    b.HasKey("Id")
                        .HasName("pk_user_flex_records");

                    b.HasIndex("DataFormID")
                        .HasDatabaseName("ix_user_flex_records_data_form_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_flex_records_user_id");

                    b.HasIndex("UserModifiedId")
                        .HasDatabaseName("ix_user_flex_records_user_modified_id");

                    b.ToTable("user_flex_records", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.UserLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Datum")
                        .HasColumnType("text")
                        .HasColumnName("datum");

                    b.Property<Point>("Geometry")
                        .HasColumnType("geometry(Point,26710)")
                        .HasColumnName("geometry");

                    b.Property<double>("Lat")
                        .HasColumnType("double precision")
                        .HasColumnName("lat");

                    b.Property<double>("Lon")
                        .HasColumnType("double precision")
                        .HasColumnName("lon");

                    b.HasKey("Id")
                        .HasName("pk_user_locations");

                    b.ToTable("user_locations", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.UserMapLayer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("application_user_id");

                    b.Property<string>("InformationType")
                        .HasColumnType("text")
                        .HasColumnName("information_type");

                    b.Property<string>("VisibleLayer")
                        .HasColumnType("text")
                        .HasColumnName("visible_layer");

                    b.HasKey("Id")
                        .HasName("pk_user_map_layers");

                    b.HasIndex("ApplicationUserId")
                        .HasDatabaseName("ix_user_map_layers_application_user_id");

                    b.ToTable("user_map_layers", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.Watershed", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ASP_UP")
                        .HasColumnType("text")
                        .HasColumnName("asp_up");

                    b.Property<double>("BasinLength")
                        .HasColumnType("double precision")
                        .HasColumnName("basin_length");

                    b.Property<int>("BasinMType")
                        .HasColumnType("integer")
                        .HasColumnName("basin_m_type");

                    b.Property<double>("ChanelLength")
                        .HasColumnType("double precision")
                        .HasColumnName("chanel_length");

                    b.Property<string>("ChanelOrientation")
                        .HasColumnType("text")
                        .HasColumnName("chanel_orientation");

                    b.Property<string>("D303")
                        .HasColumnType("text")
                        .HasColumnName("d303");

                    b.Property<string>("DownStrWshd")
                        .HasColumnType("text")
                        .HasColumnName("down_str_wshd");

                    b.Property<bool?>("ESU")
                        .HasColumnType("boolean")
                        .HasColumnName("esu");

                    b.Property<double>("ElevationMax")
                        .HasColumnType("double precision")
                        .HasColumnName("elevation_max");

                    b.Property<double>("ElevationMin")
                        .HasColumnType("double precision")
                        .HasColumnName("elevation_min");

                    b.Property<string>("Geology")
                        .HasColumnType("text")
                        .HasColumnName("geology");

                    b.Property<MultiPolygon>("Geometry")
                        .HasColumnType("geometry(MultiPolygon,26710)")
                        .HasColumnName("geometry");

                    b.Property<string>("HumintPop")
                        .HasColumnType("text")
                        .HasColumnName("humint_pop");

                    b.Property<string>("HumintRec")
                        .HasColumnType("text")
                        .HasColumnName("humint_rec");

                    b.Property<string>("HumintVis")
                        .HasColumnType("text")
                        .HasColumnName("humint_vis");

                    b.Property<string>("HydroArea")
                        .HasColumnType("text")
                        .HasColumnName("hydro_area");

                    b.Property<string>("HydroReg")
                        .HasColumnType("text")
                        .HasColumnName("hydro_reg");

                    b.Property<string>("HydroSuba")
                        .HasColumnType("text")
                        .HasColumnName("hydro_suba");

                    b.Property<string>("Hydrologic")
                        .HasColumnType("text")
                        .HasColumnName("hydrologic");

                    b.Property<double>("MouthLat")
                        .HasColumnType("double precision")
                        .HasColumnName("mouth_lat");

                    b.Property<double>("MouthLon")
                        .HasColumnType("double precision")
                        .HasColumnName("mouth_lon");

                    b.Property<string>("MouthTRS")
                        .HasColumnType("text")
                        .HasColumnName("mouth_trs");

                    b.Property<double>("Perim001")
                        .HasColumnType("double precision")
                        .HasColumnName("perim001");

                    b.Property<double>("Perimeter")
                        .HasColumnType("double precision")
                        .HasColumnName("perimeter");

                    b.Property<string>("RWQCB")
                        .HasColumnType("text")
                        .HasColumnName("rwqcb");

                    b.Property<string>("RiverName")
                        .HasColumnType("text")
                        .HasColumnName("river_name");

                    b.Property<double>("SPIAcres")
                        .HasColumnType("double precision")
                        .HasColumnName("spi_acres");

                    b.Property<string>("SuperPlan")
                        .HasColumnType("text")
                        .HasColumnName("super_plan");

                    b.Property<bool?>("TOC")
                        .HasColumnType("boolean")
                        .HasColumnName("toc");

                    b.Property<string>("Threatend")
                        .HasColumnType("text")
                        .HasColumnName("threatend");

                    b.Property<double>("VallyLength")
                        .HasColumnType("double precision")
                        .HasColumnName("vally_length");

                    b.Property<double>("WS_Order")
                        .HasColumnType("double precision")
                        .HasColumnName("ws_order");

                    b.Property<string>("WatershedID")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("watershed_id");

                    b.Property<string>("WatershedName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("watershed_name");

                    b.Property<double>("WshdAcres")
                        .HasColumnType("double precision")
                        .HasColumnName("wshd_acres");

                    b.HasKey("Id")
                        .HasName("pk_watersheds");

                    b.ToTable("watersheds", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.WildlifeSpecies", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AlphaCode")
                        .HasColumnType("text")
                        .HasColumnName("alpha_code");

                    b.Property<string>("Class")
                        .HasColumnType("text")
                        .HasColumnName("class");

                    b.Property<string>("Family")
                        .HasColumnType("text")
                        .HasColumnName("family");

                    b.Property<string>("Genus")
                        .HasColumnType("text")
                        .HasColumnName("genus");

                    b.Property<string>("Order")
                        .HasColumnType("text")
                        .HasColumnName("order");

                    b.Property<bool>("PlaceHolder")
                        .HasColumnType("boolean")
                        .HasColumnName("place_holder");

                    b.Property<string>("Species")
                        .HasColumnType("text")
                        .HasColumnName("species");

                    b.Property<string>("SubSpecies")
                        .HasColumnType("text")
                        .HasColumnName("sub_species");

                    b.Property<string>("WHRNum")
                        .HasColumnType("text")
                        .HasColumnName("whr_num");

                    b.Property<int>("WLSorting")
                        .HasColumnType("integer")
                        .HasColumnName("wl_sorting");

                    b.Property<string>("WildlifeSpeciesDescription")
                        .HasColumnType("text")
                        .HasColumnName("wildlife_species_description");

                    b.HasKey("Id")
                        .HasName("pk_wildlife_species");

                    b.ToTable("wildlife_species", (string)null);
                });

            modelBuilder.Entity("active_botanical_survey_areas", b =>
                {
                    b.HasOne("WBIS_2.DataModel.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("application_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_active_botanical_survey_areas_application_users_application");

                    b.HasOne("WBIS_2.DataModel.BotanicalSurveyArea", null)
                        .WithMany()
                        .HasForeignKey("unit_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_active_botanical_survey_areas_botanical_survey_areas_unit_id");
                });

            modelBuilder.Entity("active_hex160s", b =>
                {
                    b.HasOne("WBIS_2.DataModel.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("application_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_active_hex160s_application_users_application_user_id");

                    b.HasOne("WBIS_2.DataModel.Hex160", null)
                        .WithMany()
                        .HasForeignKey("unit_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_active_hex160s_hex160s_unit_id");
                });

            modelBuilder.Entity("Alpine.FlexForms.DataForm", b =>
                {
                    b.HasOne("Alpine.FlexForms.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_data_forms_templates_template_id");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Alpine.FlexForms.DataFormField", b =>
                {
                    b.HasOne("Alpine.FlexForms.DataForm", "DataForm")
                        .WithMany("Fields")
                        .HasForeignKey("DataFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_data_form_fields_data_forms_data_form_id");

                    b.HasOne("Alpine.FlexForms.TemplateField", "TemplateField")
                        .WithMany()
                        .HasForeignKey("TemplateFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_data_form_fields_template_fields_template_field_id");

                    b.Navigation("DataForm");

                    b.Navigation("TemplateField");
                });

            modelBuilder.Entity("Alpine.FlexForms.TemplateField", b =>
                {
                    b.HasOne("Alpine.FlexForms.Template", "Template")
                        .WithMany("Fields")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_template_fields_templates_template_id");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("amphibian_surveys_hex160s", b =>
                {
                    b.HasOne("WBIS_2.DataModel.AmphibianSurvey", null)
                        .WithMany()
                        .HasForeignKey("amphibian_survey_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_amphibian_surveys_hex160s_amphibian_surveys_amphibian_surve");

                    b.HasOne("WBIS_2.DataModel.Hex160", null)
                        .WithMany()
                        .HasForeignKey("hex160_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_amphibian_surveys_hex160s_hex160s_hex160_id");
                });

            modelBuilder.Entity("amphibian_surveys_quad75s", b =>
                {
                    b.HasOne("WBIS_2.DataModel.AmphibianSurvey", null)
                        .WithMany()
                        .HasForeignKey("amphibian_survey_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_amphibian_surveys_quad75s_amphibian_surveys_amphibian_surve");

                    b.HasOne("WBIS_2.DataModel.Quad75", null)
                        .WithMany()
                        .HasForeignKey("quad75_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_amphibian_surveys_quad75s_quad75s_quad75_id");
                });

            modelBuilder.Entity("amphibian_surveys_watersheds", b =>
                {
                    b.HasOne("WBIS_2.DataModel.AmphibianSurvey", null)
                        .WithMany()
                        .HasForeignKey("amphibian_survey_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_amphibian_surveys_watersheds_amphibian_surveys_amphibian_su");

                    b.HasOne("WBIS_2.DataModel.Watershed", null)
                        .WithMany()
                        .HasForeignKey("watershed_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_amphibian_surveys_watersheds_watersheds_watershed_id");
                });

            modelBuilder.Entity("botanical_scopings_districts", b =>
                {
                    b.HasOne("WBIS_2.DataModel.BotanicalScoping", null)
                        .WithMany()
                        .HasForeignKey("botanical_scoping_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_botanical_scopings_districts_botanical_scopings_botanical_s");

                    b.HasOne("WBIS_2.DataModel.District", null)
                        .WithMany()
                        .HasForeignKey("district_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_botanical_scopings_districts_districts_district_id");
                });

            modelBuilder.Entity("botanical_scopings_quad75s", b =>
                {
                    b.HasOne("WBIS_2.DataModel.BotanicalScoping", null)
                        .WithMany()
                        .HasForeignKey("botanical_scoping_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_botanical_scopings_quad75s_botanical_scopings_botanical_sco");

                    b.HasOne("WBIS_2.DataModel.Quad75", null)
                        .WithMany()
                        .HasForeignKey("quad75_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_botanical_scopings_quad75s_quad75s_quad75_id");
                });

            modelBuilder.Entity("botanical_scopings_watersheds", b =>
                {
                    b.HasOne("WBIS_2.DataModel.BotanicalScoping", null)
                        .WithMany()
                        .HasForeignKey("botanical_scoping_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_botanical_scopings_watersheds_botanical_scopings_botanical_");

                    b.HasOne("WBIS_2.DataModel.Watershed", null)
                        .WithMany()
                        .HasForeignKey("watershed_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_botanical_scopings_watersheds_watersheds_watershed_id");
                });

            modelBuilder.Entity("botanical_survey_areas_hex160s", b =>
                {
                    b.HasOne("WBIS_2.DataModel.BotanicalSurveyArea", null)
                        .WithMany()
                        .HasForeignKey("botanical_survey_area_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_botanical_survey_areas_hex160s_botanical_survey_areas_botan");

                    b.HasOne("WBIS_2.DataModel.Hex160", null)
                        .WithMany()
                        .HasForeignKey("hex160_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_botanical_survey_areas_hex160s_hex160s_hex160_id");
                });

            modelBuilder.Entity("botanical_survey_areas_quad75s", b =>
                {
                    b.HasOne("WBIS_2.DataModel.BotanicalSurveyArea", null)
                        .WithMany()
                        .HasForeignKey("botanical_survey_area_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_botanical_survey_areas_quad75s_botanical_survey_areas_botan");

                    b.HasOne("WBIS_2.DataModel.Quad75", null)
                        .WithMany()
                        .HasForeignKey("quad75_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_botanical_survey_areas_quad75s_quad75s_quad75_id");
                });

            modelBuilder.Entity("botanical_survey_areas_watersheds", b =>
                {
                    b.HasOne("WBIS_2.DataModel.BotanicalSurveyArea", null)
                        .WithMany()
                        .HasForeignKey("botanical_survey_area_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_botanical_survey_areas_watersheds_botanical_survey_areas_bo");

                    b.HasOne("WBIS_2.DataModel.Watershed", null)
                        .WithMany()
                        .HasForeignKey("watershed_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_botanical_survey_areas_watersheds_watersheds_watershed_id");
                });

            modelBuilder.Entity("botanical_surveys_hex160s", b =>
                {
                    b.HasOne("WBIS_2.DataModel.BotanicalSurvey", null)
                        .WithMany()
                        .HasForeignKey("botanical_survey_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_botanical_surveys_hex160s_botanical_surveys_botanical_surve");

                    b.HasOne("WBIS_2.DataModel.Hex160", null)
                        .WithMany()
                        .HasForeignKey("hex160_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_botanical_surveys_hex160s_hex160s_hex160_id");
                });

            modelBuilder.Entity("botanical_surveys_quad75s", b =>
                {
                    b.HasOne("WBIS_2.DataModel.BotanicalSurvey", null)
                        .WithMany()
                        .HasForeignKey("botanical_survey_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_botanical_surveys_quad75s_botanical_surveys_botanical_surve");

                    b.HasOne("WBIS_2.DataModel.Quad75", null)
                        .WithMany()
                        .HasForeignKey("quad75_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_botanical_surveys_quad75s_quad75s_quad75_id");
                });

            modelBuilder.Entity("botanical_surveys_watersheds", b =>
                {
                    b.HasOne("WBIS_2.DataModel.BotanicalSurvey", null)
                        .WithMany()
                        .HasForeignKey("botanical_survey_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_botanical_surveys_watersheds_botanical_surveys_botanical_su");

                    b.HasOne("WBIS_2.DataModel.Watershed", null)
                        .WithMany()
                        .HasForeignKey("watershed_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_botanical_surveys_watersheds_watersheds_watershed_id");
                });

            modelBuilder.Entity("cnddb_occurrences_districts", b =>
                {
                    b.HasOne("WBIS_2.DataModel.CNDDBOccurrence", null)
                        .WithMany()
                        .HasForeignKey("cnddb_occurrence_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cnddb_occurrences_districts_cnddb_occurrences_cnddb_occurre");

                    b.HasOne("WBIS_2.DataModel.District", null)
                        .WithMany()
                        .HasForeignKey("district_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cnddb_occurrences_districts_districts_district_id");
                });

            modelBuilder.Entity("cnddb_occurrences_hex160s", b =>
                {
                    b.HasOne("WBIS_2.DataModel.CNDDBOccurrence", null)
                        .WithMany()
                        .HasForeignKey("cnddb_occurrence_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cnddb_occurrences_hex160s_cnddb_occurrences_cnddb_occurrenc");

                    b.HasOne("WBIS_2.DataModel.Hex160", null)
                        .WithMany()
                        .HasForeignKey("hex160_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cnddb_occurrences_hex160s_hex160s_hex160_id");
                });

            modelBuilder.Entity("cnddb_occurrences_quad75s", b =>
                {
                    b.HasOne("WBIS_2.DataModel.CNDDBOccurrence", null)
                        .WithMany()
                        .HasForeignKey("cnddb_occurrence_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cnddb_occurrences_quad75s_cnddb_occurrences_cnddb_occurrenc");

                    b.HasOne("WBIS_2.DataModel.Quad75", null)
                        .WithMany()
                        .HasForeignKey("quad75_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cnddb_occurrences_quad75s_quad75s_quad75_id");
                });

            modelBuilder.Entity("cnddb_occurrences_watersheds", b =>
                {
                    b.HasOne("WBIS_2.DataModel.CNDDBOccurrence", null)
                        .WithMany()
                        .HasForeignKey("cnddb_occurrence_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cnddb_occurrences_watersheds_cnddb_occurrences_cnddb_occurr");

                    b.HasOne("WBIS_2.DataModel.Watershed", null)
                        .WithMany()
                        .HasForeignKey("watershed_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cnddb_occurrences_watersheds_watersheds_watershed_id");
                });

            modelBuilder.Entity("cnddb_quad_elements_districts", b =>
                {
                    b.HasOne("WBIS_2.DataModel.CNDDBQuadElement", null)
                        .WithMany()
                        .HasForeignKey("cnddb_quad_element_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cnddb_quad_elements_districts_cnddb_quad_elements_cnddb_qua");

                    b.HasOne("WBIS_2.DataModel.District", null)
                        .WithMany()
                        .HasForeignKey("district_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cnddb_quad_elements_districts_districts_district_id");
                });

            modelBuilder.Entity("hex160s_districts", b =>
                {
                    b.HasOne("WBIS_2.DataModel.District", null)
                        .WithMany()
                        .HasForeignKey("district_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_hex160s_districts_districts_district_id");

                    b.HasOne("WBIS_2.DataModel.Hex160", null)
                        .WithMany()
                        .HasForeignKey("hex160_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_hex160s_districts_hex160s_hex160_id");
                });

            modelBuilder.Entity("hex160s_protection_zones", b =>
                {
                    b.HasOne("WBIS_2.DataModel.Hex160", null)
                        .WithMany()
                        .HasForeignKey("hex160_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_hex160s_protection_zones_hex160s_hex160_id");

                    b.HasOne("WBIS_2.DataModel.ProtectionZone", null)
                        .WithMany()
                        .HasForeignKey("protection_zone_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_hex160s_protection_zones_protection_zones_protection_zone_id");
                });

            modelBuilder.Entity("hex160s_quad75s", b =>
                {
                    b.HasOne("WBIS_2.DataModel.Hex160", null)
                        .WithMany()
                        .HasForeignKey("hex160_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_hex160s_quad75s_hex160s_hex160_id");

                    b.HasOne("WBIS_2.DataModel.Quad75", null)
                        .WithMany()
                        .HasForeignKey("quad75_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_hex160s_quad75s_quad75s_quad75_id");
                });

            modelBuilder.Entity("hex160s_watersheds", b =>
                {
                    b.HasOne("WBIS_2.DataModel.Hex160", null)
                        .WithMany()
                        .HasForeignKey("hex160_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_hex160s_watersheds_hex160s_hex160_id");

                    b.HasOne("WBIS_2.DataModel.Watershed", null)
                        .WithMany()
                        .HasForeignKey("watershed_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_hex160s_watersheds_watersheds_watershed_id");
                });

            modelBuilder.Entity("quad75s_districts", b =>
                {
                    b.HasOne("WBIS_2.DataModel.District", null)
                        .WithMany()
                        .HasForeignKey("district_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_quad75s_districts_districts_district_id");

                    b.HasOne("WBIS_2.DataModel.Quad75", null)
                        .WithMany()
                        .HasForeignKey("quad75_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_quad75s_districts_quad75s_quad75_id");
                });

            modelBuilder.Entity("spi_plant_polygons_hex160s", b =>
                {
                    b.HasOne("WBIS_2.DataModel.Hex160", null)
                        .WithMany()
                        .HasForeignKey("hex160_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_spi_plant_polygons_hex160s_hex160s_hex160_id");

                    b.HasOne("WBIS_2.DataModel.SPIPlantPolygon", null)
                        .WithMany()
                        .HasForeignKey("spi_plant_polygon_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_spi_plant_polygons_hex160s_spi_plant_polygons_spi_plant_pol");
                });

            modelBuilder.Entity("spi_plant_polygons_quad75s", b =>
                {
                    b.HasOne("WBIS_2.DataModel.Quad75", null)
                        .WithMany()
                        .HasForeignKey("quad75_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_spi_plant_polygons_quad75s_quad75s_quad75_id");

                    b.HasOne("WBIS_2.DataModel.SPIPlantPolygon", null)
                        .WithMany()
                        .HasForeignKey("spi_plant_polygon_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_spi_plant_polygons_quad75s_spi_plant_polygons_spi_plant_pol");
                });

            modelBuilder.Entity("spi_plant_polygons_watersheds", b =>
                {
                    b.HasOne("WBIS_2.DataModel.SPIPlantPolygon", null)
                        .WithMany()
                        .HasForeignKey("spi_plant_polygon_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_spi_plant_polygons_watersheds_spi_plant_polygons_spi_plant_");

                    b.HasOne("WBIS_2.DataModel.Watershed", null)
                        .WithMany()
                        .HasForeignKey("watershed_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_spi_plant_polygons_watersheds_watersheds_watershed_id");
                });

            modelBuilder.Entity("users_districts", b =>
                {
                    b.HasOne("WBIS_2.DataModel.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("application_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_users_districts_application_users_application_user_id");

                    b.HasOne("WBIS_2.DataModel.District", null)
                        .WithMany()
                        .HasForeignKey("district_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_users_districts_districts_district_id");
                });

            modelBuilder.Entity("watersheds_districts", b =>
                {
                    b.HasOne("WBIS_2.DataModel.District", null)
                        .WithMany()
                        .HasForeignKey("district_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_watersheds_districts_districts_district_id");

                    b.HasOne("WBIS_2.DataModel.Watershed", null)
                        .WithMany()
                        .HasForeignKey("watershed_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_watersheds_districts_watersheds_watershed_id");
                });

            modelBuilder.Entity("watersheds_quad75s", b =>
                {
                    b.HasOne("WBIS_2.DataModel.Quad75", null)
                        .WithMany()
                        .HasForeignKey("quad75_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_watersheds_quad75s_quad75s_quad75_id");

                    b.HasOne("WBIS_2.DataModel.Watershed", null)
                        .WithMany()
                        .HasForeignKey("watershed_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_watersheds_quad75s_watersheds_watershed_id");
                });

            modelBuilder.Entity("WBIS_2.DataModel.AmphibianElement", b =>
                {
                    b.HasOne("WBIS_2.DataModel.AmphibianSurvey", "AmphibianSurvey")
                        .WithMany("AmphibianElements")
                        .HasForeignKey("AmphibianSurveyId")
                        .HasConstraintName("fk_amphibian_elements_amphibian_surveys_amphibian_survey_id");

                    b.HasOne("WBIS_2.DataModel.District", "District")
                        .WithMany("AmphibianElements")
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("fk_amphibian_elements_districts_district_id");

                    b.HasOne("WBIS_2.DataModel.Hex160", "Hex160")
                        .WithMany("AmphibianElements")
                        .HasForeignKey("Hex160Id")
                        .HasConstraintName("fk_amphibian_elements_hex160s_hex160_id");

                    b.HasOne("WBIS_2.DataModel.Quad75", "Quad75")
                        .WithMany("AmphibianElements")
                        .HasForeignKey("Quad75Id")
                        .HasConstraintName("fk_amphibian_elements_quad75s_quad75_id");

                    b.HasOne("WBIS_2.DataModel.ApplicationUser", "User")
                        .WithMany("AmphibianElements")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_amphibian_elements_application_users_user_id");

                    b.HasOne("WBIS_2.DataModel.ApplicationUser", "UserModified")
                        .WithMany("AmphibianElementsModified")
                        .HasForeignKey("UserModifiedId")
                        .HasConstraintName("fk_amphibian_elements_application_users_user_modified_id");

                    b.HasOne("WBIS_2.DataModel.Watershed", "Watershed")
                        .WithMany("AmphibianElements")
                        .HasForeignKey("WatershedId")
                        .HasConstraintName("fk_amphibian_elements_watersheds_watershed_id");

                    b.Navigation("AmphibianSurvey");

                    b.Navigation("District");

                    b.Navigation("Hex160");

                    b.Navigation("Quad75");

                    b.Navigation("User");

                    b.Navigation("UserModified");

                    b.Navigation("Watershed");
                });

            modelBuilder.Entity("WBIS_2.DataModel.AmphibianLocationFound", b =>
                {
                    b.HasOne("WBIS_2.DataModel.AmphibianSpecies", "AmphibianSpecies")
                        .WithMany("AmphibianLocationsFound")
                        .HasForeignKey("AmphibianSpeciesId")
                        .HasConstraintName("fk_amphibian_locations_found_amphibian_species_amphibian_speci");

                    b.HasOne("WBIS_2.DataModel.AmphibianElement", "AmphibianElement")
                        .WithOne("AmphibianLocationFound")
                        .HasForeignKey("WBIS_2.DataModel.AmphibianLocationFound", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_amphibian_locations_found_amphibian_elements_id");

                    b.Navigation("AmphibianElement");

                    b.Navigation("AmphibianSpecies");
                });

            modelBuilder.Entity("WBIS_2.DataModel.AmphibianPointOfInterest", b =>
                {
                    b.HasOne("WBIS_2.DataModel.AmphibianElement", "AmphibianElement")
                        .WithOne("AmphibianPointOfInterest")
                        .HasForeignKey("WBIS_2.DataModel.AmphibianPointOfInterest", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_amphibian_points_of_interest_amphibian_elements_id");

                    b.HasOne("WBIS_2.DataModel.AmphibianSpecies", "OtherWildlife")
                        .WithMany("AmphibianPointsOfInterest")
                        .HasForeignKey("OtherWildlifeId")
                        .HasConstraintName("fk_amphibian_points_of_interest_amphibian_species_other_wildli");

                    b.Navigation("AmphibianElement");

                    b.Navigation("OtherWildlife");
                });

            modelBuilder.Entity("WBIS_2.DataModel.AmphibianSurvey", b =>
                {
                    b.HasOne("WBIS_2.DataModel.District", "District")
                        .WithMany("AmphibianSurveys")
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("fk_amphibian_surveys_districts_district_id");

                    b.HasOne("WBIS_2.DataModel.ApplicationUser", "User")
                        .WithMany("AmphibianSurveys")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_amphibian_surveys_application_users_user_id");

                    b.HasOne("WBIS_2.DataModel.ApplicationUser", "UserModified")
                        .WithMany("AmphibianSurveysModified")
                        .HasForeignKey("UserModifiedId")
                        .HasConstraintName("fk_amphibian_surveys_application_users_user_modified_id");

                    b.Navigation("District");

                    b.Navigation("User");

                    b.Navigation("UserModified");
                });

            modelBuilder.Entity("WBIS_2.DataModel.ApplicationUser", b =>
                {
                    b.HasOne("WBIS_2.DataModel.ApplicationGroup", "ApplicationGroup")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("ApplicationGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_application_users_application_groups_application_group_id");

                    b.Navigation("ApplicationGroup");
                });

            modelBuilder.Entity("WBIS_2.DataModel.BotanicalElement", b =>
                {
                    b.HasOne("WBIS_2.DataModel.BotanicalScoping", "BotanicalScoping")
                        .WithMany("BotanicalElements")
                        .HasForeignKey("BotanicalScopingId")
                        .HasConstraintName("fk_botanical_elements_botanical_scopings_botanical_scoping_id");

                    b.HasOne("WBIS_2.DataModel.BotanicalSurveyArea", "BotanicalSurveyArea")
                        .WithMany("BotanicalElement")
                        .HasForeignKey("BotanicalSurveyAreaId")
                        .HasConstraintName("fk_botanical_elements_botanical_survey_areas_botanical_survey_");

                    b.HasOne("WBIS_2.DataModel.BotanicalSurvey", "BotanicalSurvey")
                        .WithMany("BotanicalElement")
                        .HasForeignKey("BotanicalSurveyId")
                        .HasConstraintName("fk_botanical_elements_botanical_surveys_botanical_survey_id");

                    b.HasOne("WBIS_2.DataModel.District", "District")
                        .WithMany("BotanicalElements")
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("fk_botanical_elements_districts_district_id");

                    b.HasOne("WBIS_2.DataModel.Hex160", "Hex160")
                        .WithMany("BotanicalElements")
                        .HasForeignKey("Hex160Id")
                        .HasConstraintName("fk_botanical_elements_hex160s_hex160_id");

                    b.HasOne("WBIS_2.DataModel.Quad75", "Quad75")
                        .WithMany("BotanicalElements")
                        .HasForeignKey("Quad75Id")
                        .HasConstraintName("fk_botanical_elements_quad75s_quad75_id");

                    b.HasOne("WBIS_2.DataModel.ApplicationUser", "User")
                        .WithMany("BotanicalElements")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_botanical_elements_application_users_user_id");

                    b.HasOne("WBIS_2.DataModel.ApplicationUser", "UserModified")
                        .WithMany("BotanicalElementsModified")
                        .HasForeignKey("UserModifiedId")
                        .HasConstraintName("fk_botanical_elements_application_users_user_modified_id");

                    b.HasOne("WBIS_2.DataModel.Watershed", "Watershed")
                        .WithMany("BotanicalElements")
                        .HasForeignKey("WatershedId")
                        .HasConstraintName("fk_botanical_elements_watersheds_watershed_id");

                    b.Navigation("BotanicalScoping");

                    b.Navigation("BotanicalSurvey");

                    b.Navigation("BotanicalSurveyArea");

                    b.Navigation("District");

                    b.Navigation("Hex160");

                    b.Navigation("Quad75");

                    b.Navigation("User");

                    b.Navigation("UserModified");

                    b.Navigation("Watershed");
                });

            modelBuilder.Entity("WBIS_2.DataModel.BotanicalPlantList", b =>
                {
                    b.HasOne("WBIS_2.DataModel.BotanicalPlantOfInterest", "BotanicalPlantOfInterest")
                        .WithMany("AssociatedPlants")
                        .HasForeignKey("BotanicalPlantOfInterestId")
                        .HasConstraintName("fk_botanical_plants_list_botanical_plants_of_interest_botanica");

                    b.HasOne("WBIS_2.DataModel.BotanicalElement", "BotanicalElement")
                        .WithOne("BotanicalPlantList")
                        .HasForeignKey("WBIS_2.DataModel.BotanicalPlantList", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_botanical_plants_list_botanical_elements_id");

                    b.HasOne("WBIS_2.DataModel.PlantSpecies", "PlantSpecies")
                        .WithMany("BotanicalPlantsList")
                        .HasForeignKey("PlantSpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_botanical_plants_list_plant_species_plant_species_id");

                    b.Navigation("BotanicalElement");

                    b.Navigation("BotanicalPlantOfInterest");

                    b.Navigation("PlantSpecies");
                });

            modelBuilder.Entity("WBIS_2.DataModel.BotanicalPlantOfInterest", b =>
                {
                    b.HasOne("WBIS_2.DataModel.BotanicalElement", "BotanicalElement")
                        .WithOne("BotanicalPlantOfInterest")
                        .HasForeignKey("WBIS_2.DataModel.BotanicalPlantOfInterest", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_botanical_plants_of_interest_botanical_elements_id");

                    b.HasOne("WBIS_2.DataModel.PlantSpecies", "PlantSpecies")
                        .WithMany("BotanicalPlantsOfInterest")
                        .HasForeignKey("PlantSpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_botanical_plants_of_interest_plant_species_plant_species_id");

                    b.Navigation("BotanicalElement");

                    b.Navigation("PlantSpecies");
                });

            modelBuilder.Entity("WBIS_2.DataModel.BotanicalPointOfInterest", b =>
                {
                    b.HasOne("WBIS_2.DataModel.BotanicalElement", "BotanicalElement")
                        .WithOne("BotanicalPointOfInterest")
                        .HasForeignKey("WBIS_2.DataModel.BotanicalPointOfInterest", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_botanical_points_of_interest_botanical_elements_id");

                    b.Navigation("BotanicalElement");
                });

            modelBuilder.Entity("WBIS_2.DataModel.BotanicalScoping", b =>
                {
                    b.HasOne("WBIS_2.DataModel.Region", "Region")
                        .WithMany("BotanicalScopings")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_botanical_scopings_regions_region_id");

                    b.HasOne("WBIS_2.DataModel.THP_Area", "THP_Area")
                        .WithMany("BotanicalScopings")
                        .HasForeignKey("THP_AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_botanical_scopings_thp_areas_thp_area_id");

                    b.HasOne("WBIS_2.DataModel.ApplicationUser", "User")
                        .WithMany("BotanicalScopings")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_botanical_scopings_application_users_user_id");

                    b.HasOne("WBIS_2.DataModel.ApplicationUser", "UserModified")
                        .WithMany("BotanicalScopingsModified")
                        .HasForeignKey("UserModifiedId")
                        .HasConstraintName("fk_botanical_scopings_application_users_user_modified_id");

                    b.Navigation("Region");

                    b.Navigation("THP_Area");

                    b.Navigation("User");

                    b.Navigation("UserModified");
                });

            modelBuilder.Entity("WBIS_2.DataModel.BotanicalScopingSpecies", b =>
                {
                    b.HasOne("WBIS_2.DataModel.BotanicalScoping", "BotanicalScoping")
                        .WithMany("BotanicalScopingSpecies")
                        .HasForeignKey("BotanicalScopingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_botanical_scoping_species_botanical_scopings_botanical_scop");

                    b.HasOne("WBIS_2.DataModel.PlantSpecies", "PlantSpecies")
                        .WithMany("BotanicalScopingSpecies")
                        .HasForeignKey("PlantSpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_botanical_scoping_species_plant_species_plant_species_id");

                    b.HasOne("WBIS_2.DataModel.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_botanical_scoping_species_application_users_user_id");

                    b.HasOne("WBIS_2.DataModel.ApplicationUser", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserModifiedId")
                        .HasConstraintName("fk_botanical_scoping_species_application_users_user_modified_id");

                    b.Navigation("BotanicalScoping");

                    b.Navigation("PlantSpecies");

                    b.Navigation("User");

                    b.Navigation("UserModified");
                });

            modelBuilder.Entity("WBIS_2.DataModel.BotanicalSurvey", b =>
                {
                    b.HasOne("WBIS_2.DataModel.BotanicalScoping", "BotanicalScoping")
                        .WithMany("BotanicalSurveys")
                        .HasForeignKey("BotanicalScopingId")
                        .HasConstraintName("fk_botanical_surveys_botanical_scopings_botanical_scoping_id");

                    b.HasOne("WBIS_2.DataModel.BotanicalSurveyArea", "BotanicalSurveyArea")
                        .WithMany("BotanicalSurvey")
                        .HasForeignKey("BotanicalSurveyAreaId")
                        .HasConstraintName("fk_botanical_surveys_botanical_survey_areas_botanical_survey_a");

                    b.HasOne("WBIS_2.DataModel.District", "District")
                        .WithMany("BotanicalSurveys")
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("fk_botanical_surveys_districts_district_id");

                    b.HasOne("WBIS_2.DataModel.THP_Area", "THP_Area")
                        .WithMany("BotanicalSurveys")
                        .HasForeignKey("THP_AreaId")
                        .HasConstraintName("fk_botanical_surveys_thp_areas_thp_area_id");

                    b.HasOne("WBIS_2.DataModel.ApplicationUser", "User")
                        .WithMany("BotanicalSurveys")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_botanical_surveys_application_users_user_id");

                    b.HasOne("WBIS_2.DataModel.ApplicationUser", "UserModified")
                        .WithMany("BotanicalSurveysModified")
                        .HasForeignKey("UserModifiedId")
                        .HasConstraintName("fk_botanical_surveys_application_users_user_modified_id");

                    b.Navigation("BotanicalScoping");

                    b.Navigation("BotanicalSurveyArea");

                    b.Navigation("District");

                    b.Navigation("THP_Area");

                    b.Navigation("User");

                    b.Navigation("UserModified");
                });

            modelBuilder.Entity("WBIS_2.DataModel.BotanicalSurveyArea", b =>
                {
                    b.HasOne("WBIS_2.DataModel.BotanicalScoping", "BotanicalScoping")
                        .WithMany("BotanicalSurveyAreas")
                        .HasForeignKey("BotanicalScopingId")
                        .HasConstraintName("fk_botanical_survey_areas_botanical_scopings_botanical_scoping");

                    b.HasOne("WBIS_2.DataModel.District", "District")
                        .WithMany("BotanicalSurveyAreas")
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("fk_botanical_survey_areas_districts_district_id");

                    b.HasOne("WBIS_2.DataModel.THP_Area", "THP_Area")
                        .WithMany("BotanicalSurveyAreas")
                        .HasForeignKey("THP_AreaId")
                        .HasConstraintName("fk_botanical_survey_areas_thp_areas_thp_area_id");

                    b.HasOne("WBIS_2.DataModel.ApplicationUser", "User")
                        .WithMany("BotanicalSurveyAreas")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_botanical_survey_areas_application_users_user_id");

                    b.HasOne("WBIS_2.DataModel.ApplicationUser", "UserModified")
                        .WithMany("BotanicalSurveyAreasModified")
                        .HasForeignKey("UserModifiedId")
                        .HasConstraintName("fk_botanical_survey_areas_application_users_user_modified_id");

                    b.Navigation("BotanicalScoping");

                    b.Navigation("District");

                    b.Navigation("THP_Area");

                    b.Navigation("User");

                    b.Navigation("UserModified");
                });

            modelBuilder.Entity("WBIS_2.DataModel.CDFW_SpottedOwl", b =>
                {
                    b.HasOne("WBIS_2.DataModel.District", "District")
                        .WithMany("CDFW_SpottedOwls")
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("fk_cdfw_spotted_owls_districts_district_id");

                    b.HasOne("WBIS_2.DataModel.Hex160", "Hex160")
                        .WithMany("CDFW_SpottedOwls")
                        .HasForeignKey("Hex160Id")
                        .HasConstraintName("fk_cdfw_spotted_owls_hex160s_hex160_id");

                    b.HasOne("WBIS_2.DataModel.Quad75", "Quad75")
                        .WithMany("CDFW_SpottedOwls")
                        .HasForeignKey("Quad75Id")
                        .HasConstraintName("fk_cdfw_spotted_owls_quad75s_quad75_id");

                    b.HasOne("WBIS_2.DataModel.Watershed", "Watershed")
                        .WithMany("CDFW_SpottedOwls")
                        .HasForeignKey("WatershedId")
                        .HasConstraintName("fk_cdfw_spotted_owls_watersheds_watershed_id");

                    b.Navigation("District");

                    b.Navigation("Hex160");

                    b.Navigation("Quad75");

                    b.Navigation("Watershed");
                });

            modelBuilder.Entity("WBIS_2.DataModel.CDFW_SpottedOwlDiagram", b =>
                {
                    b.HasOne("WBIS_2.DataModel.District", "District")
                        .WithMany("CDFW_SpottedOwlDiagrams")
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("fk_cdfw_spotted_owl_diagrams_districts_district_id");

                    b.Navigation("District");
                });

            modelBuilder.Entity("WBIS_2.DataModel.CNDDBOccurrence", b =>
                {
                    b.HasOne("WBIS_2.DataModel.PlantSpecies", "PlantSpecies")
                        .WithMany("CNDDBOccurrences")
                        .HasForeignKey("PlantSpeciesId")
                        .HasConstraintName("fk_cnddb_occurrences_plant_species_plant_species_id");

                    b.Navigation("PlantSpecies");
                });

            modelBuilder.Entity("WBIS_2.DataModel.CNDDBQuadElement", b =>
                {
                    b.HasOne("WBIS_2.DataModel.PlantSpecies", "PlantSpecies")
                        .WithMany("CNDDBQuadElements")
                        .HasForeignKey("PlantSpeciesId")
                        .HasConstraintName("fk_cnddb_quad_elements_plant_species_plant_species_id");

                    b.HasOne("WBIS_2.DataModel.Quad75", "Quad75")
                        .WithMany("CNDDBQuadElements")
                        .HasForeignKey("Quad75Id")
                        .HasConstraintName("fk_cnddb_quad_elements_quad75s_quad75_id");

                    b.Navigation("PlantSpecies");

                    b.Navigation("Quad75");
                });

            modelBuilder.Entity("WBIS_2.DataModel.DeviceInfo", b =>
                {
                    b.HasOne("WBIS_2.DataModel.AmphibianElement", "AmphibianElement")
                        .WithOne("DeviceInfo")
                        .HasForeignKey("WBIS_2.DataModel.DeviceInfo", "AmphibianElementId")
                        .HasConstraintName("fk_device_infos_amphibian_elements_amphibian_element_id");

                    b.HasOne("WBIS_2.DataModel.AmphibianSurvey", "AmphibianSurvey")
                        .WithOne("DeviceInfo")
                        .HasForeignKey("WBIS_2.DataModel.DeviceInfo", "AmphibianSurveyId")
                        .HasConstraintName("fk_device_infos_amphibian_surveys_amphibian_survey_id");

                    b.HasOne("WBIS_2.DataModel.BotanicalElement", "BotanicalElement")
                        .WithOne("DeviceInfo")
                        .HasForeignKey("WBIS_2.DataModel.DeviceInfo", "BotanicalElementId")
                        .HasConstraintName("fk_device_infos_botanical_elements_botanical_element_id");

                    b.HasOne("WBIS_2.DataModel.BotanicalSurvey", "BotanicalSurvey")
                        .WithOne("DeviceInfo")
                        .HasForeignKey("WBIS_2.DataModel.DeviceInfo", "BotanicalSurveyId")
                        .HasConstraintName("fk_device_infos_botanical_surveys_botanical_survey_id");

                    b.HasOne("WBIS_2.DataModel.OwlBanding", "OwlBanding")
                        .WithOne("DeviceInfo")
                        .HasForeignKey("WBIS_2.DataModel.DeviceInfo", "OwlBandingId")
                        .HasConstraintName("fk_device_infos_owl_bandings_owl_banding_id");

                    b.HasOne("WBIS_2.DataModel.SiteCalling", "SiteCalling")
                        .WithOne("DeviceInfo")
                        .HasForeignKey("WBIS_2.DataModel.DeviceInfo", "SiteCallingId")
                        .HasConstraintName("fk_device_infos_site_callings_site_calling_id");

                    b.Navigation("AmphibianElement");

                    b.Navigation("AmphibianSurvey");

                    b.Navigation("BotanicalElement");

                    b.Navigation("BotanicalSurvey");

                    b.Navigation("OwlBanding");

                    b.Navigation("SiteCalling");
                });

            modelBuilder.Entity("WBIS_2.DataModel.DistrictExtendedGeometry", b =>
                {
                    b.HasOne("WBIS_2.DataModel.District", "District")
                        .WithOne("DistrictExtendedGeometry")
                        .HasForeignKey("WBIS_2.DataModel.DistrictExtendedGeometry", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_district_extended_geometries_districts_id");

                    b.Navigation("District");
                });

            modelBuilder.Entity("WBIS_2.DataModel.FloweringTimeline", b =>
                {
                    b.HasOne("WBIS_2.DataModel.PlantSpecies", "PlantSpecies")
                        .WithMany("FloweringTimelines")
                        .HasForeignKey("PlantSpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_flowering_timelines_plant_species_plant_species_id");

                    b.Navigation("PlantSpecies");
                });

            modelBuilder.Entity("WBIS_2.DataModel.Hex160", b =>
                {
                    b.HasOne("WBIS_2.DataModel.ProtectionZone", "CurrentProtectionZone")
                        .WithMany("CurrentHex160s")
                        .HasForeignKey("CurrentProtectionZoneID")
                        .HasConstraintName("fk_hex160s_protection_zones_current_protection_zone_id");

                    b.Navigation("CurrentProtectionZone");
                });

            modelBuilder.Entity("WBIS_2.DataModel.Hex160RequiredPass", b =>
                {
                    b.HasOne("WBIS_2.DataModel.BirdSpecies", "BirdSpecies")
                        .WithMany("PassSpecies")
                        .HasForeignKey("BirdSpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_hex160_required_passes_bird_species_bird_species_id");

                    b.HasOne("WBIS_2.DataModel.Hex160", "Hex160")
                        .WithMany("Hex160RequiredPasses")
                        .HasForeignKey("Hex160Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_hex160_required_passes_hex160s_hex160_id");

                    b.HasOne("WBIS_2.DataModel.ApplicationUser", "User")
                        .WithMany("Hex160RequiredPasses")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_hex160_required_passes_application_users_user_id");

                    b.HasOne("WBIS_2.DataModel.ApplicationUser", "UserModified")
                        .WithMany("Hex160RequiredPassesModified")
                        .HasForeignKey("UserModifiedId")
                        .HasConstraintName("fk_hex160_required_passes_application_users_user_modified_id");

                    b.Navigation("BirdSpecies");

                    b.Navigation("Hex160");

                    b.Navigation("User");

                    b.Navigation("UserModified");
                });

            modelBuilder.Entity("WBIS_2.DataModel.OtherWildlife", b =>
                {
                    b.HasOne("WBIS_2.DataModel.SiteCalling", "SiteCalling")
                        .WithMany("OtherWildlifeRecords")
                        .HasForeignKey("SiteCallingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_other_wildlife_records_site_callings_site_calling_id");

                    b.HasOne("WBIS_2.DataModel.WildlifeSpecies", "WildlifeSpecies")
                        .WithMany("OtherWildlifeRecords")
                        .HasForeignKey("WildlifeSpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_other_wildlife_records_wildlife_species_wildlife_species_id");

                    b.Navigation("SiteCalling");

                    b.Navigation("WildlifeSpecies");
                });

            modelBuilder.Entity("WBIS_2.DataModel.OwlBanding", b =>
                {
                    b.HasOne("WBIS_2.DataModel.BirdSpecies", "BirdSpecies")
                        .WithMany("OwlBandings")
                        .HasForeignKey("BirdSpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_owl_bandings_bird_species_bird_species_id");

                    b.HasOne("WBIS_2.DataModel.District", "District")
                        .WithMany("OwlBandings")
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("fk_owl_bandings_districts_district_id");

                    b.HasOne("WBIS_2.DataModel.Hex160", "Hex160")
                        .WithMany("OwlBandings")
                        .HasForeignKey("Hex160Id")
                        .HasConstraintName("fk_owl_bandings_hex160s_hex160_id");

                    b.HasOne("WBIS_2.DataModel.ProtectionZone", "ProtectionZone")
                        .WithMany("OwlBandings")
                        .HasForeignKey("ProtectionZoneID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_owl_bandings_protection_zones_protection_zone_id");

                    b.HasOne("WBIS_2.DataModel.Quad75", "Quad75")
                        .WithMany("OwlBandings")
                        .HasForeignKey("Quad75Id")
                        .HasConstraintName("fk_owl_bandings_quad75s_quad75_id");

                    b.HasOne("WBIS_2.DataModel.ApplicationUser", "User")
                        .WithMany("OwlBandings")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_owl_bandings_application_users_user_id");

                    b.HasOne("WBIS_2.DataModel.ApplicationUser", "UserModified")
                        .WithMany("OwlBandingsModified")
                        .HasForeignKey("UserModifiedId")
                        .HasConstraintName("fk_owl_bandings_application_users_user_modified_id");

                    b.HasOne("WBIS_2.DataModel.Watershed", "Watershed")
                        .WithMany("OwlBandings")
                        .HasForeignKey("WatershedId")
                        .HasConstraintName("fk_owl_bandings_watersheds_watershed_id");

                    b.Navigation("BirdSpecies");

                    b.Navigation("District");

                    b.Navigation("Hex160");

                    b.Navigation("ProtectionZone");

                    b.Navigation("Quad75");

                    b.Navigation("User");

                    b.Navigation("UserModified");

                    b.Navigation("Watershed");
                });

            modelBuilder.Entity("WBIS_2.DataModel.PermanentCallStation", b =>
                {
                    b.HasOne("WBIS_2.DataModel.Hex160", "Hex160")
                        .WithMany("PermanentCallStations")
                        .HasForeignKey("Hex160Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_permanent_call_stations_hex160s_hex160_id");

                    b.HasOne("WBIS_2.DataModel.ApplicationUser", "User")
                        .WithMany("PermanentCallStations")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_permanent_call_stations_application_users_user_id");

                    b.HasOne("WBIS_2.DataModel.ApplicationUser", "UserModified")
                        .WithMany("PermanentCallStationsModified")
                        .HasForeignKey("UserModifiedId")
                        .HasConstraintName("fk_permanent_call_stations_application_users_user_modified_id");

                    b.Navigation("Hex160");

                    b.Navigation("User");

                    b.Navigation("UserModified");
                });

            modelBuilder.Entity("WBIS_2.DataModel.Picture", b =>
                {
                    b.HasOne("WBIS_2.DataModel.AmphibianElement", "AmphibianElement")
                        .WithMany("Pictures")
                        .HasForeignKey("AmphibianElementId")
                        .HasConstraintName("fk_pictures_amphibian_elements_amphibian_element_id");

                    b.HasOne("WBIS_2.DataModel.BotanicalElement", "BotanicalElement")
                        .WithMany("Pictures")
                        .HasForeignKey("BotanicalElementId")
                        .HasConstraintName("fk_pictures_botanical_elements_botanical_element_id");

                    b.HasOne("WBIS_2.DataModel.OwlBanding", "OwlBanding")
                        .WithMany("Pictures")
                        .HasForeignKey("OwlBandingId")
                        .HasConstraintName("fk_pictures_owl_bandings_owl_banding_id");

                    b.HasOne("WBIS_2.DataModel.SiteCalling", "SiteCalling")
                        .WithMany("Pictures")
                        .HasForeignKey("SiteCallingId")
                        .HasConstraintName("fk_pictures_site_callings_site_calling_id");

                    b.Navigation("AmphibianElement");

                    b.Navigation("BotanicalElement");

                    b.Navigation("OwlBanding");

                    b.Navigation("SiteCalling");
                });

            modelBuilder.Entity("WBIS_2.DataModel.PlantProtectionSummary", b =>
                {
                    b.HasOne("WBIS_2.DataModel.District", "District")
                        .WithMany("PlantProtectionSummaries")
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("fk_plant_protection_summaries_districts_district_id");

                    b.HasOne("WBIS_2.DataModel.PlantSpecies", "PlantSpecies")
                        .WithMany("PlantProtectionSummaries")
                        .HasForeignKey("PlantSpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_plant_protection_summaries_plant_species_plant_species_id");

                    b.Navigation("District");

                    b.Navigation("PlantSpecies");
                });

            modelBuilder.Entity("WBIS_2.DataModel.ProtectionZone", b =>
                {
                    b.HasOne("WBIS_2.DataModel.ApplicationUser", "User")
                        .WithMany("ProtectionZones")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_protection_zones_application_users_user_id");

                    b.HasOne("WBIS_2.DataModel.ApplicationUser", "UserModified")
                        .WithMany("ProtectionZonesModified")
                        .HasForeignKey("UserModifiedId")
                        .HasConstraintName("fk_protection_zones_application_users_user_modified_id");

                    b.Navigation("User");

                    b.Navigation("UserModified");
                });

            modelBuilder.Entity("WBIS_2.DataModel.RegionalPlantList", b =>
                {
                    b.HasOne("WBIS_2.DataModel.PlantSpecies", "PlantSpecies")
                        .WithMany("RegionalPlantLists")
                        .HasForeignKey("PlantSpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_regional_plant_lists_plant_species_plant_species_id");

                    b.HasOne("WBIS_2.DataModel.Region", "Region")
                        .WithMany("RegionalPlantLists")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_regional_plant_lists_regions_region_id");

                    b.Navigation("PlantSpecies");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("WBIS_2.DataModel.SiteCalling", b =>
                {
                    b.HasOne("WBIS_2.DataModel.District", "District")
                        .WithMany("SiteCallings")
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("fk_site_callings_districts_district_id");

                    b.HasOne("WBIS_2.DataModel.Hex160", "Hex160")
                        .WithMany("SiteCallings")
                        .HasForeignKey("Hex160Id")
                        .HasConstraintName("fk_site_callings_hex160s_hex160_id");

                    b.HasOne("WBIS_2.DataModel.Hex500", "Hex500")
                        .WithMany("SiteCallings")
                        .HasForeignKey("Hex500Id")
                        .HasConstraintName("fk_site_callings_hex500s_hex500_id");

                    b.HasOne("WBIS_2.DataModel.ProtectionZone", "ProtectionZone")
                        .WithMany("SiteCallings")
                        .HasForeignKey("ProtectionZoneID")
                        .HasConstraintName("fk_site_callings_protection_zones_protection_zone_id");

                    b.HasOne("WBIS_2.DataModel.Quad75", "Quad75")
                        .WithMany("SiteCallings")
                        .HasForeignKey("Quad75Id")
                        .HasConstraintName("fk_site_callings_quad75s_quad75_id");

                    b.HasOne("WBIS_2.DataModel.BirdSpecies", "SurveySpecies")
                        .WithMany("SurveySpecies")
                        .HasForeignKey("SurveySpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_site_callings_bird_species_bird_species_survey_id");

                    b.HasOne("WBIS_2.DataModel.ApplicationUser", "User")
                        .WithMany("SiteCallings")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_site_callings_application_users_user_id");

                    b.HasOne("WBIS_2.DataModel.ApplicationUser", "UserModified")
                        .WithMany("SiteCallingsModified")
                        .HasForeignKey("UserModifiedId")
                        .HasConstraintName("fk_site_callings_application_users_user_modified_id");

                    b.HasOne("WBIS_2.DataModel.Watershed", "Watershed")
                        .WithMany("SiteCallings")
                        .HasForeignKey("WatershedId")
                        .HasConstraintName("fk_site_callings_watersheds_watershed_id");

                    b.Navigation("District");

                    b.Navigation("Hex160");

                    b.Navigation("Hex500");

                    b.Navigation("ProtectionZone");

                    b.Navigation("Quad75");

                    b.Navigation("SurveySpecies");

                    b.Navigation("User");

                    b.Navigation("UserModified");

                    b.Navigation("Watershed");
                });

            modelBuilder.Entity("WBIS_2.DataModel.SiteCallingDetection", b =>
                {
                    b.HasOne("WBIS_2.DataModel.District", "District")
                        .WithMany("SiteCallingDetections")
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("fk_site_calling_detections_districts_district_id");

                    b.HasOne("WBIS_2.DataModel.Hex160", "Hex160")
                        .WithMany("SiteCallingDetections")
                        .HasForeignKey("Hex160Id")
                        .HasConstraintName("fk_site_calling_detections_hex160s_hex160_id");

                    b.HasOne("WBIS_2.DataModel.Hex500", "Hex500")
                        .WithMany("SiteCallingDetections")
                        .HasForeignKey("Hex500Id")
                        .HasConstraintName("fk_site_calling_detections_hex500s_hex500_id");

                    b.HasOne("WBIS_2.DataModel.Quad75", "Quad75")
                        .WithMany("SiteCallingDetections")
                        .HasForeignKey("Quad75Id")
                        .HasConstraintName("fk_site_calling_detections_quad75s_quad75_id");

                    b.HasOne("WBIS_2.DataModel.SiteCalling", "SiteCalling")
                        .WithMany("SiteCallingDetections")
                        .HasForeignKey("SiteCallingId")
                        .HasConstraintName("fk_site_calling_detections_site_callings_site_calling_id");

                    b.HasOne("WBIS_2.DataModel.BirdSpecies", "SpeciesFound")
                        .WithMany("SpeciesFound")
                        .HasForeignKey("SpeciesFoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_site_calling_detections_bird_species_bird_species_found_id");

                    b.HasOne("WBIS_2.DataModel.ApplicationUser", "User")
                        .WithMany("SiteCallingDetections")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_site_calling_detections_application_users_user_id");

                    b.HasOne("WBIS_2.DataModel.UserLocation", "UserLocation")
                        .WithMany()
                        .HasForeignKey("UserLocationId")
                        .HasConstraintName("fk_site_calling_detections_user_locations_user_location_id");

                    b.HasOne("WBIS_2.DataModel.ApplicationUser", "UserModified")
                        .WithMany("SiteCallingDetectionsModified")
                        .HasForeignKey("UserModifiedId")
                        .HasConstraintName("fk_site_calling_detections_application_users_user_modified_id");

                    b.HasOne("WBIS_2.DataModel.Watershed", "Watershed")
                        .WithMany("SiteCallingDetections")
                        .HasForeignKey("WatershedId")
                        .HasConstraintName("fk_site_calling_detections_watersheds_watershed_id");

                    b.Navigation("District");

                    b.Navigation("Hex160");

                    b.Navigation("Hex500");

                    b.Navigation("Quad75");

                    b.Navigation("SiteCalling");

                    b.Navigation("SpeciesFound");

                    b.Navigation("User");

                    b.Navigation("UserLocation");

                    b.Navigation("UserModified");

                    b.Navigation("Watershed");
                });

            modelBuilder.Entity("WBIS_2.DataModel.SiteCallingTrack", b =>
                {
                    b.HasOne("WBIS_2.DataModel.SiteCalling", "SiteCalling")
                        .WithOne("SiteCallingTrack")
                        .HasForeignKey("WBIS_2.DataModel.SiteCallingTrack", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_site_calling_tracks_site_callings_id");

                    b.Navigation("SiteCalling");
                });

            modelBuilder.Entity("WBIS_2.DataModel.SPI_GGOW", b =>
                {
                    b.HasOne("WBIS_2.DataModel.District", "District")
                        .WithMany("SPI_GGOWs")
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("fk_spi_ggows_districts_district_id");

                    b.HasOne("WBIS_2.DataModel.Watershed", "Watershed")
                        .WithMany("SPI_GGOWs")
                        .HasForeignKey("WatershedId")
                        .HasConstraintName("fk_spi_ggows_watersheds_watershed_id");

                    b.Navigation("District");

                    b.Navigation("Watershed");
                });

            modelBuilder.Entity("WBIS_2.DataModel.SPI_NOGO", b =>
                {
                    b.HasOne("WBIS_2.DataModel.District", "District")
                        .WithMany("SPI_NOGOs")
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("fk_spi_nogos_districts_district_id");

                    b.HasOne("WBIS_2.DataModel.Watershed", "Watershed")
                        .WithMany("SPI_NOGOs")
                        .HasForeignKey("WatershedId")
                        .HasConstraintName("fk_spi_nogos_watersheds_watershed_id");

                    b.Navigation("District");

                    b.Navigation("Watershed");
                });

            modelBuilder.Entity("WBIS_2.DataModel.SPI_SPOW", b =>
                {
                    b.HasOne("WBIS_2.DataModel.District", "District")
                        .WithMany("SPI_SPOWs")
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("fk_spi_spows_districts_district_id");

                    b.HasOne("WBIS_2.DataModel.Watershed", "Watershed")
                        .WithMany("SPI_SPOWs")
                        .HasForeignKey("WatershedId")
                        .HasConstraintName("fk_spi_spows_watersheds_watershed_id");

                    b.Navigation("District");

                    b.Navigation("Watershed");
                });

            modelBuilder.Entity("WBIS_2.DataModel.SPI_WildlifeSighting", b =>
                {
                    b.HasOne("WBIS_2.DataModel.District", "District")
                        .WithMany("SPI_WildlifeSightings")
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("fk_spi_wildlife_sightings_districts_district_id");

                    b.HasOne("WBIS_2.DataModel.Watershed", "Watershed")
                        .WithMany("SPI_WildlifeSightings")
                        .HasForeignKey("WatershedId")
                        .HasConstraintName("fk_spi_wildlife_sightings_watersheds_watershed_id");

                    b.Navigation("District");

                    b.Navigation("Watershed");
                });

            modelBuilder.Entity("WBIS_2.DataModel.SPIPlantPoint", b =>
                {
                    b.HasOne("WBIS_2.DataModel.District", "District")
                        .WithMany("SPIPlantPoints")
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("fk_spi_plant_points_districts_district_id");

                    b.HasOne("WBIS_2.DataModel.Hex160", "Hex160")
                        .WithMany("SPIPlantPoints")
                        .HasForeignKey("Hex160Id")
                        .HasConstraintName("fk_spi_plant_points_hex160s_hex160_id");

                    b.HasOne("WBIS_2.DataModel.PlantSpecies", "PlantSpecies")
                        .WithMany("SPIPlantPoints")
                        .HasForeignKey("PlantSpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_spi_plant_points_plant_species_plant_species_id");

                    b.HasOne("WBIS_2.DataModel.Quad75", "Quad75")
                        .WithMany("SPIPlantPoints")
                        .HasForeignKey("Quad75Id")
                        .HasConstraintName("fk_spi_plant_points_quad75s_quad75_id");

                    b.HasOne("WBIS_2.DataModel.Watershed", "Watershed")
                        .WithMany("SPIPlantPoints")
                        .HasForeignKey("WatershedId")
                        .HasConstraintName("fk_spi_plant_points_watersheds_watershed_id");

                    b.Navigation("District");

                    b.Navigation("Hex160");

                    b.Navigation("PlantSpecies");

                    b.Navigation("Quad75");

                    b.Navigation("Watershed");
                });

            modelBuilder.Entity("WBIS_2.DataModel.SPIPlantPolygon", b =>
                {
                    b.HasOne("WBIS_2.DataModel.District", "District")
                        .WithMany("SPIPlantPolygons")
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("fk_spi_plant_polygons_districts_district_id");

                    b.HasOne("WBIS_2.DataModel.PlantSpecies", "PlantSpecies")
                        .WithMany("SPIPlantPolys")
                        .HasForeignKey("PlantSpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_spi_plant_polygons_plant_species_plant_species_id");

                    b.Navigation("District");

                    b.Navigation("PlantSpecies");
                });

            modelBuilder.Entity("WBIS_2.DataModel.UserFlexRecord", b =>
                {
                    b.HasOne("Alpine.FlexForms.DataForm", "DataForm")
                        .WithMany()
                        .HasForeignKey("DataFormID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_flex_records_data_forms_data_form_id");

                    b.HasOne("WBIS_2.DataModel.ApplicationUser", "User")
                        .WithMany("UserFlexRecords")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_flex_records_application_users_user_id");

                    b.HasOne("WBIS_2.DataModel.ApplicationUser", "UserModified")
                        .WithMany("UserFlexRecordUserModifieds")
                        .HasForeignKey("UserModifiedId")
                        .HasConstraintName("fk_user_flex_records_application_users_user_modified_id");

                    b.Navigation("DataForm");

                    b.Navigation("User");

                    b.Navigation("UserModified");
                });

            modelBuilder.Entity("WBIS_2.DataModel.UserMapLayer", b =>
                {
                    b.HasOne("WBIS_2.DataModel.ApplicationUser", "ApplicationUser")
                        .WithMany("UserMapLayers")
                        .HasForeignKey("ApplicationUserId")
                        .HasConstraintName("fk_user_map_layers_application_users_application_user_id");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Alpine.FlexForms.DataForm", b =>
                {
                    b.Navigation("Fields");
                });

            modelBuilder.Entity("Alpine.FlexForms.Template", b =>
                {
                    b.Navigation("Fields");
                });

            modelBuilder.Entity("WBIS_2.DataModel.AmphibianElement", b =>
                {
                    b.Navigation("AmphibianLocationFound");

                    b.Navigation("AmphibianPointOfInterest");

                    b.Navigation("DeviceInfo");

                    b.Navigation("Pictures");
                });

            modelBuilder.Entity("WBIS_2.DataModel.AmphibianSpecies", b =>
                {
                    b.Navigation("AmphibianLocationsFound");

                    b.Navigation("AmphibianPointsOfInterest");
                });

            modelBuilder.Entity("WBIS_2.DataModel.AmphibianSurvey", b =>
                {
                    b.Navigation("AmphibianElements");

                    b.Navigation("DeviceInfo");
                });

            modelBuilder.Entity("WBIS_2.DataModel.ApplicationGroup", b =>
                {
                    b.Navigation("ApplicationUsers");
                });

            modelBuilder.Entity("WBIS_2.DataModel.ApplicationUser", b =>
                {
                    b.Navigation("AmphibianElements");

                    b.Navigation("AmphibianElementsModified");

                    b.Navigation("AmphibianSurveys");

                    b.Navigation("AmphibianSurveysModified");

                    b.Navigation("BotanicalElements");

                    b.Navigation("BotanicalElementsModified");

                    b.Navigation("BotanicalScopings");

                    b.Navigation("BotanicalScopingsModified");

                    b.Navigation("BotanicalSurveyAreas");

                    b.Navigation("BotanicalSurveyAreasModified");

                    b.Navigation("BotanicalSurveys");

                    b.Navigation("BotanicalSurveysModified");

                    b.Navigation("Hex160RequiredPasses");

                    b.Navigation("Hex160RequiredPassesModified");

                    b.Navigation("OwlBandings");

                    b.Navigation("OwlBandingsModified");

                    b.Navigation("PermanentCallStations");

                    b.Navigation("PermanentCallStationsModified");

                    b.Navigation("ProtectionZones");

                    b.Navigation("ProtectionZonesModified");

                    b.Navigation("SiteCallingDetections");

                    b.Navigation("SiteCallingDetectionsModified");

                    b.Navigation("SiteCallings");

                    b.Navigation("SiteCallingsModified");

                    b.Navigation("UserFlexRecordUserModifieds");

                    b.Navigation("UserFlexRecords");

                    b.Navigation("UserMapLayers");
                });

            modelBuilder.Entity("WBIS_2.DataModel.BirdSpecies", b =>
                {
                    b.Navigation("OwlBandings");

                    b.Navigation("PassSpecies");

                    b.Navigation("SpeciesFound");

                    b.Navigation("SurveySpecies");
                });

            modelBuilder.Entity("WBIS_2.DataModel.BotanicalElement", b =>
                {
                    b.Navigation("BotanicalPlantList");

                    b.Navigation("BotanicalPlantOfInterest");

                    b.Navigation("BotanicalPointOfInterest");

                    b.Navigation("DeviceInfo");

                    b.Navigation("Pictures");
                });

            modelBuilder.Entity("WBIS_2.DataModel.BotanicalPlantOfInterest", b =>
                {
                    b.Navigation("AssociatedPlants");
                });

            modelBuilder.Entity("WBIS_2.DataModel.BotanicalScoping", b =>
                {
                    b.Navigation("BotanicalElements");

                    b.Navigation("BotanicalScopingSpecies");

                    b.Navigation("BotanicalSurveyAreas");

                    b.Navigation("BotanicalSurveys");
                });

            modelBuilder.Entity("WBIS_2.DataModel.BotanicalSurvey", b =>
                {
                    b.Navigation("BotanicalElement");

                    b.Navigation("DeviceInfo");
                });

            modelBuilder.Entity("WBIS_2.DataModel.BotanicalSurveyArea", b =>
                {
                    b.Navigation("BotanicalElement");

                    b.Navigation("BotanicalSurvey");
                });

            modelBuilder.Entity("WBIS_2.DataModel.District", b =>
                {
                    b.Navigation("AmphibianElements");

                    b.Navigation("AmphibianSurveys");

                    b.Navigation("BotanicalElements");

                    b.Navigation("BotanicalSurveyAreas");

                    b.Navigation("BotanicalSurveys");

                    b.Navigation("CDFW_SpottedOwlDiagrams");

                    b.Navigation("CDFW_SpottedOwls");

                    b.Navigation("DistrictExtendedGeometry");

                    b.Navigation("OwlBandings");

                    b.Navigation("PlantProtectionSummaries");

                    b.Navigation("SPIPlantPoints");

                    b.Navigation("SPIPlantPolygons");

                    b.Navigation("SPI_GGOWs");

                    b.Navigation("SPI_NOGOs");

                    b.Navigation("SPI_SPOWs");

                    b.Navigation("SPI_WildlifeSightings");

                    b.Navigation("SiteCallingDetections");

                    b.Navigation("SiteCallings");
                });

            modelBuilder.Entity("WBIS_2.DataModel.Hex160", b =>
                {
                    b.Navigation("AmphibianElements");

                    b.Navigation("BotanicalElements");

                    b.Navigation("CDFW_SpottedOwls");

                    b.Navigation("Hex160RequiredPasses");

                    b.Navigation("OwlBandings");

                    b.Navigation("PermanentCallStations");

                    b.Navigation("SPIPlantPoints");

                    b.Navigation("SiteCallingDetections");

                    b.Navigation("SiteCallings");
                });

            modelBuilder.Entity("WBIS_2.DataModel.Hex500", b =>
                {
                    b.Navigation("SiteCallingDetections");

                    b.Navigation("SiteCallings");
                });

            modelBuilder.Entity("WBIS_2.DataModel.OwlBanding", b =>
                {
                    b.Navigation("DeviceInfo");

                    b.Navigation("Pictures");
                });

            modelBuilder.Entity("WBIS_2.DataModel.PlantSpecies", b =>
                {
                    b.Navigation("BotanicalPlantsList");

                    b.Navigation("BotanicalPlantsOfInterest");

                    b.Navigation("BotanicalScopingSpecies");

                    b.Navigation("CNDDBOccurrences");

                    b.Navigation("CNDDBQuadElements");

                    b.Navigation("FloweringTimelines");

                    b.Navigation("PlantProtectionSummaries");

                    b.Navigation("RegionalPlantLists");

                    b.Navigation("SPIPlantPoints");

                    b.Navigation("SPIPlantPolys");
                });

            modelBuilder.Entity("WBIS_2.DataModel.ProtectionZone", b =>
                {
                    b.Navigation("CurrentHex160s");

                    b.Navigation("OwlBandings");

                    b.Navigation("SiteCallings");
                });

            modelBuilder.Entity("WBIS_2.DataModel.Quad75", b =>
                {
                    b.Navigation("AmphibianElements");

                    b.Navigation("BotanicalElements");

                    b.Navigation("CDFW_SpottedOwls");

                    b.Navigation("CNDDBQuadElements");

                    b.Navigation("OwlBandings");

                    b.Navigation("SPIPlantPoints");

                    b.Navigation("SiteCallingDetections");

                    b.Navigation("SiteCallings");
                });

            modelBuilder.Entity("WBIS_2.DataModel.Region", b =>
                {
                    b.Navigation("BotanicalScopings");

                    b.Navigation("RegionalPlantLists");
                });

            modelBuilder.Entity("WBIS_2.DataModel.SiteCalling", b =>
                {
                    b.Navigation("DeviceInfo");

                    b.Navigation("OtherWildlifeRecords");

                    b.Navigation("Pictures");

                    b.Navigation("SiteCallingDetections");

                    b.Navigation("SiteCallingTrack");
                });

            modelBuilder.Entity("WBIS_2.DataModel.THP_Area", b =>
                {
                    b.Navigation("BotanicalScopings");

                    b.Navigation("BotanicalSurveyAreas");

                    b.Navigation("BotanicalSurveys");
                });

            modelBuilder.Entity("WBIS_2.DataModel.Watershed", b =>
                {
                    b.Navigation("AmphibianElements");

                    b.Navigation("BotanicalElements");

                    b.Navigation("CDFW_SpottedOwls");

                    b.Navigation("OwlBandings");

                    b.Navigation("SPIPlantPoints");

                    b.Navigation("SPI_GGOWs");

                    b.Navigation("SPI_NOGOs");

                    b.Navigation("SPI_SPOWs");

                    b.Navigation("SPI_WildlifeSightings");

                    b.Navigation("SiteCallingDetections");

                    b.Navigation("SiteCallings");
                });

            modelBuilder.Entity("WBIS_2.DataModel.WildlifeSpecies", b =>
                {
                    b.Navigation("OtherWildlifeRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
