// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WBIS_2.DataModel;

#nullable disable

namespace WBIS_2.DataModel.Migrations
{
    [DbContext(typeof(WBIS2Model))]
    partial class WBIS2ModelModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("cdfw_spotted_owl_diagrams_districts", b =>
                {
                    b.Property<Guid>("cdfw_spotted_owl_diagram_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("district_id")
                        .HasColumnType("uuid");

                    b.HasKey("cdfw_spotted_owl_diagram_id", "district_id");

                    b.HasIndex("district_id");

                    b.ToTable("cdfw_spotted_owl_diagrams_districts", "public");
                });

            modelBuilder.Entity("cdfw_spotted_owls_districts", b =>
                {
                    b.Property<Guid>("cdfw_spotted_owl_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("district_id")
                        .HasColumnType("uuid");

                    b.HasKey("cdfw_spotted_owl_id", "district_id");

                    b.HasIndex("district_id");

                    b.ToTable("cdfw_spotted_owls_districts", "public");
                });

            modelBuilder.Entity("cdfw_spotted_owls_hex160s", b =>
                {
                    b.Property<Guid>("cdfw_spotted_owl_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("hex160_id")
                        .HasColumnType("uuid");

                    b.HasKey("cdfw_spotted_owl_id", "hex160_id");

                    b.HasIndex("hex160_id");

                    b.ToTable("cdfw_spotted_owls_hex160s", "public");
                });

            modelBuilder.Entity("cdfw_spotted_owls_quad75s", b =>
                {
                    b.Property<Guid>("cdfw_spotted_owl_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("quad75_id")
                        .HasColumnType("uuid");

                    b.HasKey("cdfw_spotted_owl_id", "quad75_id");

                    b.HasIndex("quad75_id");

                    b.ToTable("cdfw_spotted_owls_quad75s", "public");
                });

            modelBuilder.Entity("cdfw_spotted_owls_watersheds", b =>
                {
                    b.Property<Guid>("cdfw_spotted_owl_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("watershed_id")
                        .HasColumnType("uuid");

                    b.HasKey("cdfw_spotted_owl_id", "watershed_id");

                    b.HasIndex("watershed_id");

                    b.ToTable("cdfw_spotted_owls_watersheds", "public");
                });

            modelBuilder.Entity("cnddb_occurrences_districts", b =>
                {
                    b.Property<Guid>("cnddb_occurrence_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("district_id")
                        .HasColumnType("uuid");

                    b.HasKey("cnddb_occurrence_id", "district_id");

                    b.HasIndex("district_id");

                    b.ToTable("cnddb_occurrences_districts", "public");
                });

            modelBuilder.Entity("cnddb_occurrences_hex160s", b =>
                {
                    b.Property<Guid>("cnddb_occurrence_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("hex160_id")
                        .HasColumnType("uuid");

                    b.HasKey("cnddb_occurrence_id", "hex160_id");

                    b.HasIndex("hex160_id");

                    b.ToTable("cnddb_occurrences_hex160s", "public");
                });

            modelBuilder.Entity("cnddb_occurrences_quad75s", b =>
                {
                    b.Property<Guid>("cnddb_occurrence_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("quad75_id")
                        .HasColumnType("uuid");

                    b.HasKey("cnddb_occurrence_id", "quad75_id");

                    b.HasIndex("quad75_id");

                    b.ToTable("cnddb_occurrences_quad75s", "public");
                });

            modelBuilder.Entity("cnddb_occurrences_watersheds", b =>
                {
                    b.Property<Guid>("cnddb_occurrence_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("watershed_id")
                        .HasColumnType("uuid");

                    b.HasKey("cnddb_occurrence_id", "watershed_id");

                    b.HasIndex("watershed_id");

                    b.ToTable("cnddb_occurrences_watersheds", "public");
                });

            modelBuilder.Entity("hex160s_districts", b =>
                {
                    b.Property<Guid>("district_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("hex160_id")
                        .HasColumnType("uuid");

                    b.HasKey("district_id", "hex160_id");

                    b.HasIndex("hex160_id");

                    b.ToTable("hex160s_districts", "public");
                });

            modelBuilder.Entity("hex160s_protection_zones", b =>
                {
                    b.Property<Guid>("hex160_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("protection_zone_id")
                        .HasColumnType("uuid");

                    b.HasKey("hex160_id", "protection_zone_id");

                    b.HasIndex("protection_zone_id");

                    b.ToTable("hex160s_protection_zones", "public");
                });

            modelBuilder.Entity("hex160s_quad75s", b =>
                {
                    b.Property<Guid>("hex160_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("quad75_id")
                        .HasColumnType("uuid");

                    b.HasKey("hex160_id", "quad75_id");

                    b.HasIndex("quad75_id");

                    b.ToTable("hex160s_quad75s", "public");
                });

            modelBuilder.Entity("hex160s_watersheds", b =>
                {
                    b.Property<Guid>("hex160_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("watershed_id")
                        .HasColumnType("uuid");

                    b.HasKey("hex160_id", "watershed_id");

                    b.HasIndex("watershed_id");

                    b.ToTable("hex160s_watersheds", "public");
                });

            modelBuilder.Entity("quad75s_districts", b =>
                {
                    b.Property<Guid>("district_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("quad75_id")
                        .HasColumnType("uuid");

                    b.HasKey("district_id", "quad75_id");

                    b.HasIndex("quad75_id");

                    b.ToTable("quad75s_districts", "public");
                });

            modelBuilder.Entity("users_districts", b =>
                {
                    b.Property<Guid>("application_user_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("district_id")
                        .HasColumnType("uuid");

                    b.HasKey("application_user_id", "district_id");

                    b.HasIndex("district_id");

                    b.ToTable("users_districts", "public");
                });

            modelBuilder.Entity("watersheds_districts", b =>
                {
                    b.Property<Guid>("district_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("watershed_id")
                        .HasColumnType("uuid");

                    b.HasKey("district_id", "watershed_id");

                    b.HasIndex("watershed_id");

                    b.ToTable("watersheds_districts", "public");
                });

            modelBuilder.Entity("WBIS_2.DataModel.ApplicationGroup", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<bool>("AdminPrivileges")
                        .HasColumnType("boolean")
                        .HasColumnName("admin_privileges");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("group_name");

                    b.Property<bool>("ReadOnly")
                        .HasColumnType("boolean")
                        .HasColumnName("read_only");

                    b.HasKey("Guid");

                    b.ToTable("application_groups", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.ApplicationUser", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<Guid>("AdminId")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_user_id");

                    b.Property<Guid>("ApplicationGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("application_group_id");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("EmailDefault")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Hint")
                        .HasColumnType("text")
                        .HasColumnName("hint");

                    b.Property<string>("PasswordSHA")
                        .HasColumnType("text")
                        .HasColumnName("password_sha");

                    b.Property<DateTime?>("PasswordTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("password_time_stamp");

                    b.Property<string>("UserID")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_name");

                    b.Property<bool>("_delete")
                        .HasColumnType("boolean");

                    b.HasKey("Guid");

                    b.HasIndex("AdminId");

                    b.HasIndex("ApplicationGroupId");

                    b.ToTable("application_users", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.BirdSpecies", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<string>("Species")
                        .HasColumnType("text")
                        .HasColumnName("species");

                    b.HasKey("Guid");

                    b.ToTable("bird_species", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.CDFW_SpottedOwl", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<string>("AGESEX")
                        .HasColumnType("text")
                        .HasColumnName("agesex");

                    b.Property<string>("CNAME")
                        .HasColumnType("text")
                        .HasColumnName("cname");

                    b.Property<string>("COMMENTS")
                        .HasColumnType("text")
                        .HasColumnName("comments");

                    b.Property<string>("COORDSRC")
                        .HasColumnType("text")
                        .HasColumnName("coordsrc");

                    b.Property<string>("DATEOBS")
                        .HasColumnType("text")
                        .HasColumnName("dateobs");

                    b.Property<string>("DOCID")
                        .HasColumnType("text")
                        .HasColumnName("docid");

                    b.Property<Point>("Geometry")
                        .HasColumnType("geometry(Point,26710)")
                        .HasColumnName("geometry");

                    b.Property<string>("HIGHESTUSE")
                        .HasColumnType("text")
                        .HasColumnName("highestuse");

                    b.Property<double>("LATDD_N83")
                        .HasColumnType("double precision")
                        .HasColumnName("latdd_n83");

                    b.Property<double>("LONDD_N83")
                        .HasColumnType("double precision")
                        .HasColumnName("londd_n83");

                    b.Property<string>("MASTEROWL")
                        .HasColumnType("text")
                        .HasColumnName("masterowl");

                    b.Property<string>("MTRS")
                        .HasColumnType("text")
                        .HasColumnName("mtrs");

                    b.Property<string>("NEST")
                        .HasColumnType("text")
                        .HasColumnName("nest");

                    b.Property<int>("NUMADOBS")
                        .HasColumnType("integer")
                        .HasColumnName("numadobs");

                    b.Property<string>("NUMYOUNG")
                        .HasColumnType("text")
                        .HasColumnName("numyoung");

                    b.Property<string>("OBSERVER")
                        .HasColumnType("text")
                        .HasColumnName("observer");

                    b.Property<int>("OBSID")
                        .HasColumnType("integer")
                        .HasColumnName("obsid");

                    b.Property<string>("PAIR")
                        .HasColumnType("text")
                        .HasColumnName("pair");

                    b.Property<string>("SNAME")
                        .HasColumnType("text")
                        .HasColumnName("sname");

                    b.Property<string>("SUBSPECIES")
                        .HasColumnType("text")
                        .HasColumnName("subspecies");

                    b.Property<string>("SYMBOLOGY")
                        .HasColumnType("text")
                        .HasColumnName("symbology");

                    b.Property<string>("TIMEOBS")
                        .HasColumnType("text")
                        .HasColumnName("timeobs");

                    b.Property<string>("TYPEOBS")
                        .HasColumnType("text")
                        .HasColumnName("typeobs");

                    b.HasKey("Guid");

                    b.ToTable("cdfw_spotted_owls", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.CDFW_SpottedOwlDiagram", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<LineString>("Geometry")
                        .HasColumnType("geometry(LineString,26710)")
                        .HasColumnName("geometry");

                    b.HasKey("Guid");

                    b.ToTable("cdfw_spotted_owl_diagrams", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.CNDDBOccurrence", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<string>("ACCURACY")
                        .HasColumnType("text")
                        .HasColumnName("accuracy");

                    b.Property<double>("AREA")
                        .HasColumnType("double precision")
                        .HasColumnName("area");

                    b.Property<int>("AVLCODE")
                        .HasColumnType("integer")
                        .HasColumnName("avlcode");

                    b.Property<string>("CALLIST")
                        .HasColumnType("text")
                        .HasColumnName("callist");

                    b.Property<string>("CDFWSTATUS")
                        .HasColumnType("text")
                        .HasColumnName("cdfwstatus");

                    b.Property<string>("CNAME")
                        .HasColumnType("text")
                        .HasColumnName("cname");

                    b.Property<string>("ECOLOGICAL")
                        .HasColumnType("text")
                        .HasColumnName("ecological");

                    b.Property<int>("ELEVATION")
                        .HasColumnType("integer")
                        .HasColumnName("elevation");

                    b.Property<string>("ELMCODE")
                        .HasColumnType("text")
                        .HasColumnName("elmcode");

                    b.Property<string>("ELMDATE")
                        .HasColumnType("text")
                        .HasColumnName("elmdate");

                    b.Property<int>("ELMTYPE")
                        .HasColumnType("integer")
                        .HasColumnName("elmtype");

                    b.Property<int>("EOCOUNT")
                        .HasColumnType("integer")
                        .HasColumnName("eocount");

                    b.Property<int>("EONDX")
                        .HasColumnType("integer")
                        .HasColumnName("eondx");

                    b.Property<string>("FEDLIST")
                        .HasColumnType("text")
                        .HasColumnName("fedlist");

                    b.Property<string>("GENERAL")
                        .HasColumnType("text")
                        .HasColumnName("general");

                    b.Property<string>("GRANK")
                        .HasColumnType("text")
                        .HasColumnName("grank");

                    b.Property<MultiPolygon>("Geometry")
                        .HasColumnType("geometry(MultiPolygon,26710)")
                        .HasColumnName("geometry");

                    b.Property<string>("KEYCOUNTY")
                        .HasColumnType("text")
                        .HasColumnName("keycounty");

                    b.Property<string>("KEYQUAD")
                        .HasColumnType("text")
                        .HasColumnName("keyquad");

                    b.Property<string>("KQUADNAME")
                        .HasColumnType("text")
                        .HasColumnName("kquadname");

                    b.Property<string>("LASTUPDATE")
                        .HasColumnType("text")
                        .HasColumnName("lastupdate");

                    b.Property<string>("LOCATION")
                        .HasColumnType("text")
                        .HasColumnName("location");

                    b.Property<string>("LOCDETAILS")
                        .HasColumnType("text")
                        .HasColumnName("locdetails");

                    b.Property<string>("MAPNDX")
                        .HasColumnType("text")
                        .HasColumnName("mapndx");

                    b.Property<int>("OCCNUMBER")
                        .HasColumnType("integer")
                        .HasColumnName("occnumber");

                    b.Property<string>("OCCRANK")
                        .HasColumnType("text")
                        .HasColumnName("occrank");

                    b.Property<string>("OCCTYPE")
                        .HasColumnType("text")
                        .HasColumnName("occtype");

                    b.Property<string>("OTHRSTATUS")
                        .HasColumnType("text")
                        .HasColumnName("othrstatus");

                    b.Property<string>("OWNERMGT")
                        .HasColumnType("text")
                        .HasColumnName("ownermgt");

                    b.Property<int>("PARTS")
                        .HasColumnType("integer")
                        .HasColumnName("parts");

                    b.Property<double>("PERIMETER")
                        .HasColumnType("double precision")
                        .HasColumnName("perimeter");

                    b.Property<string>("PLSS")
                        .HasColumnType("text")
                        .HasColumnName("plss");

                    b.Property<string>("PRESENCE")
                        .HasColumnType("text")
                        .HasColumnName("presence");

                    b.Property<string>("RPLANTRANK")
                        .HasColumnType("text")
                        .HasColumnName("rplantrank");

                    b.Property<string>("SENSITIVE")
                        .HasColumnType("text")
                        .HasColumnName("sensitive");

                    b.Property<string>("SITEDATE")
                        .HasColumnType("text")
                        .HasColumnName("sitedate");

                    b.Property<string>("SNAME")
                        .HasColumnType("text")
                        .HasColumnName("sname");

                    b.Property<string>("SRANK")
                        .HasColumnType("text")
                        .HasColumnName("srank");

                    b.Property<int>("Symbology")
                        .HasColumnType("integer")
                        .HasColumnName("symbology");

                    b.Property<string>("SymbologyText")
                        .HasColumnType("text")
                        .HasColumnName("symbology_text");

                    b.Property<string>("TAXONGROUP")
                        .HasColumnType("text")
                        .HasColumnName("taxongroup");

                    b.Property<string>("THREAT")
                        .HasColumnType("text")
                        .HasColumnName("threat");

                    b.Property<string>("THREATLIST")
                        .HasColumnType("text")
                        .HasColumnName("threatlist");

                    b.HasKey("Guid");

                    b.ToTable("cnddb_occurrences", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.DeletedGeometry", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<LineString>("LineGeometry")
                        .HasColumnType("geometry(LineString,26710)")
                        .HasColumnName("line_geometry");

                    b.Property<MultiPolygon>("MPolyGeometry")
                        .HasColumnType("geometry(MultiPolygon,26710)")
                        .HasColumnName("mpoly_geometry");

                    b.Property<Guid>("ObjectGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("object_guid");

                    b.Property<Point>("PointGeometry")
                        .HasColumnType("geometry(Point,26710)")
                        .HasColumnName("point_eometry");

                    b.Property<Polygon>("PolyGeometry")
                        .HasColumnType("geometry(Polygon,26710)")
                        .HasColumnName("poly_geometry");

                    b.HasKey("Guid");

                    b.ToTable("deleted_geometries", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.DeviceInfo", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<string>("Datum")
                        .HasColumnType("text")
                        .HasColumnName("datum");

                    b.Property<double>("DeviceLat")
                        .HasColumnType("double precision")
                        .HasColumnName("device_lat");

                    b.Property<double>("DeviceLon")
                        .HasColumnType("double precision")
                        .HasColumnName("device_lon");

                    b.Property<DateTime>("DeviceTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("device_time");

                    b.Property<Point>("Geometry")
                        .HasColumnType("geometry(Point,26710)")
                        .HasColumnName("geometry");

                    b.Property<Guid>("SiteCallingId")
                        .HasColumnType("uuid")
                        .HasColumnName("site_calling_id");

                    b.Property<Guid>("SiteCallingRepositoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("site_calling_repository_id");

                    b.HasKey("Guid");

                    b.HasIndex("SiteCallingId")
                        .IsUnique();

                    b.HasIndex("SiteCallingRepositoryId")
                        .IsUnique();

                    b.ToTable("device_infos", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.District", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<Guid>("DistrictExtendedGeometryID")
                        .HasColumnType("uuid")
                        .HasColumnName("district_extended_geometry_id");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("district_name");

                    b.Property<MultiPolygon>("Geometry")
                        .HasColumnType("geometry(MultiPolygon,26710)")
                        .HasColumnName("geometry");

                    b.Property<string>("ManagementArea")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("management_area");

                    b.HasKey("Guid");

                    b.ToTable("districts", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.DistrictExtendedGeometry", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<Guid>("DistrictID")
                        .HasColumnType("uuid")
                        .HasColumnName("district_id");

                    b.Property<MultiPolygon>("Geometry")
                        .HasColumnType("geometry(MultiPolygon,26710)")
                        .HasColumnName("geometry");

                    b.HasKey("Guid");

                    b.ToTable("district_extended_geometry", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.Hex160", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<int>("CallingResponses")
                        .HasColumnType("integer")
                        .HasColumnName("calling_responses");

                    b.Property<Guid>("CurrentProtectionZoneID")
                        .HasColumnType("uuid")
                        .HasColumnName("current_preotection_zone_id");

                    b.Property<int>("Drops")
                        .HasColumnType("integer")
                        .HasColumnName("drops");

                    b.Property<int>("FollowUps")
                        .HasColumnType("integer")
                        .HasColumnName("follow_ups");

                    b.Property<Polygon>("Geometry")
                        .HasColumnType("geometry(Polygon,26710)")
                        .HasColumnName("geometry");

                    b.Property<string>("Hex160ID")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("hex160_id");

                    b.Property<DateTime>("LatestActivity")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("latest_activity");

                    b.Property<string>("RecentActivity")
                        .HasColumnType("text")
                        .HasColumnName("recent_activity");

                    b.Property<int>("Skips")
                        .HasColumnType("integer")
                        .HasColumnName("skips");

                    b.HasKey("Guid");

                    b.HasIndex("CurrentProtectionZoneID");

                    b.ToTable("hex160s", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.Hex160RequiredPass", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<Guid>("BirdSpeciesId")
                        .HasColumnType("uuid")
                        .HasColumnName("bird_species_id");

                    b.Property<int>("CurrentPasses")
                        .HasColumnType("integer")
                        .HasColumnName("current_passes");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<bool>("Dropped")
                        .HasColumnType("boolean")
                        .HasColumnName("dropped");

                    b.Property<Guid>("Hex160Id")
                        .HasColumnType("uuid")
                        .HasColumnName("hex160_id");

                    b.Property<int>("RequiredPasses")
                        .HasColumnType("integer")
                        .HasColumnName("required_passes");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<bool>("_delete")
                        .HasColumnType("boolean");

                    b.HasKey("Guid");

                    b.HasIndex("BirdSpeciesId");

                    b.HasIndex("Hex160Id");

                    b.HasIndex("UserId");

                    b.ToTable("hex160_required_passes", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.OtherWildlife", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<Guid>("SiteCallingId")
                        .HasColumnType("uuid")
                        .HasColumnName("site_calling_id");

                    b.Property<Guid>("SiteCallingRepositoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("site_calling_repository_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("WildlifeSpeciesId")
                        .HasColumnType("uuid")
                        .HasColumnName("wildlife_species_id");

                    b.Property<bool>("_delete")
                        .HasColumnType("boolean");

                    b.HasKey("Guid");

                    b.HasIndex("SiteCallingId");

                    b.HasIndex("SiteCallingRepositoryId");

                    b.HasIndex("UserId");

                    b.HasIndex("WildlifeSpeciesId");

                    b.ToTable("other_wildlife_records", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.PermanentCallStation", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<Point>("Geometry")
                        .HasColumnType("geometry(Point,26710)")
                        .HasColumnName("geometry");

                    b.Property<Guid>("Hex160Id")
                        .HasColumnType("uuid")
                        .HasColumnName("hex160_id");

                    b.Property<string>("PCS_ID")
                        .HasColumnType("text")
                        .HasColumnName("pcs_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<bool>("_delete")
                        .HasColumnType("boolean");

                    b.HasKey("Guid");

                    b.HasIndex("Hex160Id");

                    b.HasIndex("UserId");

                    b.ToTable("permanent_call_stations", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.ProtectionZone", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<MultiPolygon>("Geometry")
                        .HasColumnType("geometry(MultiPolygon,26710)")
                        .HasColumnName("geometry");

                    b.Property<string>("PZ_ID")
                        .HasColumnType("text")
                        .HasColumnName("pz_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<bool>("_delete")
                        .HasColumnType("boolean");

                    b.HasKey("Guid");

                    b.HasIndex("UserId");

                    b.ToTable("protection_zones", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.Quad75", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<double>("Area")
                        .HasColumnType("double precision")
                        .HasColumnName("area");

                    b.Property<string>("B_M")
                        .HasColumnType("text")
                        .HasColumnName("b_m");

                    b.Property<string>("Border")
                        .HasColumnType("text")
                        .HasColumnName("border");

                    b.Property<string>("CNPSCode")
                        .HasColumnType("text")
                        .HasColumnName("cnps_code");

                    b.Property<Polygon>("Geometry")
                        .HasColumnType("geometry(Polygon,26710)")
                        .HasColumnName("geometry");

                    b.Property<double>("Perimeter")
                        .HasColumnType("double precision")
                        .HasColumnName("perimeter");

                    b.Property<string>("Q100Name")
                        .HasColumnType("text")
                        .HasColumnName("q100_name");

                    b.Property<int>("Q24Year")
                        .HasColumnType("integer")
                        .HasColumnName("q24_year");

                    b.Property<string>("QuadCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("quad_code");

                    b.Property<string>("QuadName")
                        .HasColumnType("text")
                        .HasColumnName("quad_name");

                    b.Property<string>("QuadSize")
                        .HasColumnType("text")
                        .HasColumnName("quad_size");

                    b.Property<string>("Sensitive")
                        .HasColumnType("text")
                        .HasColumnName("sensitive");

                    b.Property<string>("UTMZone")
                        .HasColumnType("text")
                        .HasColumnName("utm_zone");

                    b.Property<string>("UsgsCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("isgs_code");

                    b.HasKey("Guid");

                    b.ToTable("quad75s", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.SiteCalling", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<string>("AreaDescription")
                        .HasColumnType("text")
                        .HasColumnName("area_description");

                    b.Property<string>("Comments")
                        .HasColumnType("text")
                        .HasColumnName("comments");

                    b.Property<double>("DBH")
                        .HasColumnType("double precision")
                        .HasColumnName("dbh");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("Datum")
                        .HasColumnType("text")
                        .HasColumnName("datum");

                    b.Property<Guid>("DeviceInfoID")
                        .HasColumnType("uuid")
                        .HasColumnName("device_info_id");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_time");

                    b.Property<Point>("Geometry")
                        .IsRequired()
                        .HasColumnType("geometry(Point,26710)")
                        .HasColumnName("geometry");

                    b.Property<Guid>("Hex160Id")
                        .HasColumnType("uuid")
                        .HasColumnName("hex160_id");

                    b.Property<bool>("Moused")
                        .HasColumnType("boolean")
                        .HasColumnName("moused");

                    b.Property<double>("NestHeight")
                        .HasColumnType("double precision")
                        .HasColumnName("nest_height");

                    b.Property<bool>("NestTree")
                        .HasColumnType("boolean")
                        .HasColumnName("nest_tree");

                    b.Property<string>("NestType")
                        .HasColumnType("text")
                        .HasColumnName("nest_type");

                    b.Property<string>("NestingStatus")
                        .HasColumnType("text")
                        .HasColumnName("nesting_status");

                    b.Property<string>("OccupancyStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("occupancy_status");

                    b.Property<int>("PZPassNumber")
                        .HasColumnType("integer")
                        .HasColumnName("pz_pass_number");

                    b.Property<int>("PassNumber")
                        .HasColumnType("integer")
                        .HasColumnName("pass_number");

                    b.Property<string>("Precipitation")
                        .HasColumnType("text")
                        .HasColumnName("precipitation");

                    b.Property<Guid>("ProtectionZoneID")
                        .HasColumnType("uuid")
                        .HasColumnName("preotection_zone_id");

                    b.Property<string>("ReproductiveStatus")
                        .HasColumnType("text")
                        .HasColumnName("reproductive_status");

                    b.Property<Guid>("SiteCallingDetectionID")
                        .HasColumnType("uuid")
                        .HasColumnName("site_calling_detection_id");

                    b.Property<Guid>("SiteCallingTrackID")
                        .HasColumnType("uuid")
                        .HasColumnName("site_calling_track_id");

                    b.Property<string>("SiteID")
                        .HasColumnType("text")
                        .HasColumnName("site_id");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time");

                    b.Property<double>("StartingLat")
                        .HasColumnType("double precision")
                        .HasColumnName("starting_lat");

                    b.Property<double>("StartingLon")
                        .HasColumnType("double precision")
                        .HasColumnName("starting_lon");

                    b.Property<DateTime>("SunsetTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("sunset_time");

                    b.Property<Guid>("SurveySpeciesId")
                        .HasColumnType("uuid")
                        .HasColumnName("bird_species_survey_id");

                    b.Property<string>("SurveyType1")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("survey_type1");

                    b.Property<string>("SurveyType2")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("survey_type2");

                    b.Property<bool>("TargetSpeciesPresent")
                        .HasColumnType("boolean")
                        .HasColumnName("target_species_present");

                    b.Property<string>("TreeSpecies")
                        .HasColumnType("text")
                        .HasColumnName("tree_species");

                    b.Property<bool>("TreeTagged")
                        .HasColumnType("boolean")
                        .HasColumnName("tree_tagged");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("Wind")
                        .HasColumnType("text")
                        .HasColumnName("wind");

                    b.Property<bool>("YearlyActivityCenter")
                        .HasColumnType("boolean")
                        .HasColumnName("yearly_activity_center");

                    b.Property<bool>("_delete")
                        .HasColumnType("boolean");

                    b.HasKey("Guid");

                    b.HasIndex("Hex160Id");

                    b.HasIndex("ProtectionZoneID");

                    b.HasIndex("SurveySpeciesId");

                    b.HasIndex("UserId");

                    b.ToTable("site_callings", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.SiteCallingDetection", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<string>("Age")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("age");

                    b.Property<double>("Bearing")
                        .HasColumnType("double precision")
                        .HasColumnName("bearing");

                    b.Property<string>("Datum")
                        .HasColumnType("text")
                        .HasColumnName("datum");

                    b.Property<double>("DetectionLat")
                        .HasColumnType("double precision")
                        .HasColumnName("detection_lat");

                    b.Property<double>("DetectionLon")
                        .HasColumnType("double precision")
                        .HasColumnName("detection_lon");

                    b.Property<string>("DetectionMethod")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("detection_method");

                    b.Property<DateTime>("DetectionTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("detection_time");

                    b.Property<double>("Distance")
                        .HasColumnType("double precision")
                        .HasColumnName("distance");

                    b.Property<bool>("EstimatedLocation")
                        .HasColumnType("boolean")
                        .HasColumnName("estimated_location");

                    b.Property<string>("FemaleBindingLeg")
                        .HasColumnType("text")
                        .HasColumnName("female_banding_leg");

                    b.Property<string>("FemaleBindingPattern")
                        .HasColumnType("text")
                        .HasColumnName("female_banding_pattern");

                    b.Property<Point>("Geometry")
                        .IsRequired()
                        .HasColumnType("geometry(Point,26710)")
                        .HasColumnName("geometry");

                    b.Property<string>("MaleBindingLeg")
                        .HasColumnType("text")
                        .HasColumnName("male_banding_leg");

                    b.Property<string>("MaleBindingPattern")
                        .HasColumnType("text")
                        .HasColumnName("male_banding_pattern");

                    b.Property<int>("NumberOfYoung")
                        .HasColumnType("integer")
                        .HasColumnName("number_of_young");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sex");

                    b.Property<Guid>("SiteCallingId")
                        .HasColumnType("uuid")
                        .HasColumnName("site_calling_id");

                    b.Property<Guid>("SpeciesFoundId")
                        .HasColumnType("uuid")
                        .HasColumnName("bird_species_found_id");

                    b.Property<string>("SpeciesSite")
                        .HasColumnType("text")
                        .HasColumnName("species_site");

                    b.Property<Guid>("UserLocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_location_id");

                    b.HasKey("Guid");

                    b.HasIndex("SpeciesFoundId");

                    b.ToTable("site_calling_detections", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.SiteCallingRepository", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<string>("AreaDescription")
                        .HasColumnType("text")
                        .HasColumnName("area_description");

                    b.Property<string>("Comments")
                        .HasColumnType("text")
                        .HasColumnName("comments");

                    b.Property<double>("DBH")
                        .HasColumnType("double precision")
                        .HasColumnName("dbh");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("Datum")
                        .HasColumnType("text")
                        .HasColumnName("datum");

                    b.Property<Guid>("DeviceInfoID")
                        .HasColumnType("uuid")
                        .HasColumnName("device_info_id");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_time");

                    b.Property<Point>("Geometry")
                        .IsRequired()
                        .HasColumnType("geometry(Point,26710)")
                        .HasColumnName("geometry");

                    b.Property<Guid>("Hex160Id")
                        .HasColumnType("uuid")
                        .HasColumnName("hex160_id");

                    b.Property<bool>("Moused")
                        .HasColumnType("boolean")
                        .HasColumnName("moused");

                    b.Property<double>("NestHeight")
                        .HasColumnType("double precision")
                        .HasColumnName("nest_height");

                    b.Property<bool>("NestTree")
                        .HasColumnType("boolean")
                        .HasColumnName("nest_tree");

                    b.Property<string>("NestType")
                        .HasColumnType("text")
                        .HasColumnName("nest_type");

                    b.Property<string>("NestingStatus")
                        .HasColumnType("text")
                        .HasColumnName("nesting_status");

                    b.Property<string>("OccupancyStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("occupancy_status");

                    b.Property<int>("PZPassNumber")
                        .HasColumnType("integer")
                        .HasColumnName("pz_pass_number");

                    b.Property<int>("PassNumber")
                        .HasColumnType("integer")
                        .HasColumnName("pass_number");

                    b.Property<string>("Precipitation")
                        .HasColumnType("text")
                        .HasColumnName("precipitation");

                    b.Property<Guid>("ProtectionZoneID")
                        .HasColumnType("uuid")
                        .HasColumnName("preotection_zone_id");

                    b.Property<string>("ReproductiveStatus")
                        .HasColumnType("text")
                        .HasColumnName("reproductive_status");

                    b.Property<Guid>("SiteCallingRepositoryDetectionID")
                        .HasColumnType("uuid")
                        .HasColumnName("site_calling_repository_detection_id");

                    b.Property<Guid>("SiteCallingRepositoryTrackID")
                        .HasColumnType("uuid")
                        .HasColumnName("site_calling_repository_track_id");

                    b.Property<string>("SiteID")
                        .HasColumnType("text")
                        .HasColumnName("site_id");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time");

                    b.Property<double>("StartingLat")
                        .HasColumnType("double precision")
                        .HasColumnName("starting_lat");

                    b.Property<double>("StartingLon")
                        .HasColumnType("double precision")
                        .HasColumnName("starting_lon");

                    b.Property<DateTime>("SunsetTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("sunset_time");

                    b.Property<Guid>("SurveySpeciesId")
                        .HasColumnType("uuid")
                        .HasColumnName("bird_species_survey_id");

                    b.Property<string>("SurveyType1")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("survey_type1");

                    b.Property<string>("SurveyType2")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("survey_type2");

                    b.Property<bool>("TargetSpeciesPresent")
                        .HasColumnType("boolean")
                        .HasColumnName("target_species_present");

                    b.Property<string>("TreeSpecies")
                        .HasColumnType("text")
                        .HasColumnName("tree_species");

                    b.Property<bool>("TreeTagged")
                        .HasColumnType("boolean")
                        .HasColumnName("tree_tagged");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("Wind")
                        .HasColumnType("text")
                        .HasColumnName("wind");

                    b.Property<bool>("YearlyActivityCenter")
                        .HasColumnType("boolean")
                        .HasColumnName("yearly_activity_center");

                    b.Property<bool>("_delete")
                        .HasColumnType("boolean");

                    b.HasKey("Guid");

                    b.HasIndex("Hex160Id");

                    b.HasIndex("ProtectionZoneID");

                    b.HasIndex("SurveySpeciesId");

                    b.HasIndex("UserId");

                    b.ToTable("site_calling_repositories", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.SiteCallingRepositoryDetection", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<string>("Age")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("age");

                    b.Property<double>("Bearing")
                        .HasColumnType("double precision")
                        .HasColumnName("bearing");

                    b.Property<string>("Datum")
                        .HasColumnType("text")
                        .HasColumnName("datum");

                    b.Property<double>("DetectionLat")
                        .HasColumnType("double precision")
                        .HasColumnName("detection_lat");

                    b.Property<double>("DetectionLon")
                        .HasColumnType("double precision")
                        .HasColumnName("detection_lon");

                    b.Property<string>("DetectionMethod")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("detection_method");

                    b.Property<DateTime>("DetectionTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("detection_time");

                    b.Property<double>("Distance")
                        .HasColumnType("double precision")
                        .HasColumnName("distance");

                    b.Property<bool>("EstimatedLocation")
                        .HasColumnType("boolean")
                        .HasColumnName("estimated_location");

                    b.Property<string>("FemaleBindingLeg")
                        .HasColumnType("text")
                        .HasColumnName("female_banding_leg");

                    b.Property<string>("FemaleBindingPattern")
                        .HasColumnType("text")
                        .HasColumnName("female_banding_pattern");

                    b.Property<Point>("Geometry")
                        .IsRequired()
                        .HasColumnType("geometry(Point,26710)")
                        .HasColumnName("geometry");

                    b.Property<string>("MaleBindingLeg")
                        .HasColumnType("text")
                        .HasColumnName("male_banding_leg");

                    b.Property<string>("MaleBindingPattern")
                        .HasColumnType("text")
                        .HasColumnName("male_banding_pattern");

                    b.Property<int>("NumberOfYoung")
                        .HasColumnType("integer")
                        .HasColumnName("number_of_young");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sex");

                    b.Property<Guid>("SiteCallingRepositoryID")
                        .HasColumnType("uuid")
                        .HasColumnName("site_calling_repository_id");

                    b.Property<Guid>("SpeciesFoundId")
                        .HasColumnType("uuid")
                        .HasColumnName("bird_species_found_id");

                    b.Property<string>("SpeciesSite")
                        .HasColumnType("text")
                        .HasColumnName("species_site");

                    b.Property<Guid>("UserLocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_location_id");

                    b.HasKey("Guid");

                    b.HasIndex("SpeciesFoundId");

                    b.ToTable("site_calling_repository_detections", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.SiteCallingRepositoryTrack", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<LineString>("Geometry")
                        .HasColumnType("geometry(LineString,26710)")
                        .HasColumnName("geometry");

                    b.Property<Guid>("SiteCallingRepositoryID")
                        .HasColumnType("uuid")
                        .HasColumnName("site_calling_repository_id");

                    b.HasKey("Guid");

                    b.ToTable("site_calling_repository_tracks", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.SiteCallingTrack", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<LineString>("Geometry")
                        .HasColumnType("geometry(LineString,26710)")
                        .HasColumnName("geometry");

                    b.Property<Guid>("SiteCallingId")
                        .HasColumnType("uuid")
                        .HasColumnName("site_calling_id");

                    b.HasKey("Guid");

                    b.ToTable("site_calling_tracks", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.UserLocation", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<string>("Datum")
                        .HasColumnType("text")
                        .HasColumnName("datum");

                    b.Property<Point>("Geometry")
                        .IsRequired()
                        .HasColumnType("geometry(Point,26710)")
                        .HasColumnName("geometry");

                    b.Property<Guid>("SiteCallingDetectionId")
                        .HasColumnType("uuid")
                        .HasColumnName("site_calling_detection_id");

                    b.Property<Guid>("SiteCallingRepositoryDetectionId")
                        .HasColumnType("uuid")
                        .HasColumnName("site_calling_repository_detection_id");

                    b.Property<double>("UserLat")
                        .HasColumnType("double precision")
                        .HasColumnName("user_lat");

                    b.Property<double>("UserLon")
                        .HasColumnType("double precision")
                        .HasColumnName("user_lon");

                    b.HasKey("Guid");

                    b.HasIndex("SiteCallingDetectionId")
                        .IsUnique();

                    b.HasIndex("SiteCallingRepositoryDetectionId")
                        .IsUnique();

                    b.ToTable("user_locations", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.Watershed", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<string>("ASP_UP")
                        .HasColumnType("text")
                        .HasColumnName("asp_up");

                    b.Property<double>("BasinLength")
                        .HasColumnType("double precision")
                        .HasColumnName("basin_length");

                    b.Property<int>("BasinMType")
                        .HasColumnType("integer")
                        .HasColumnName("basin_m_type");

                    b.Property<double>("ChanelLength")
                        .HasColumnType("double precision")
                        .HasColumnName("chanel_length");

                    b.Property<string>("ChanelOrientation")
                        .HasColumnType("text")
                        .HasColumnName("chanel_orientation");

                    b.Property<string>("D303")
                        .HasColumnType("text")
                        .HasColumnName("d303");

                    b.Property<string>("DownStrWshd")
                        .HasColumnType("text")
                        .HasColumnName("down_str_wshd");

                    b.Property<bool?>("ESU")
                        .HasColumnType("boolean")
                        .HasColumnName("esu");

                    b.Property<double>("ElevationMax")
                        .HasColumnType("double precision")
                        .HasColumnName("elevation_max");

                    b.Property<double>("ElevationMin")
                        .HasColumnType("double precision")
                        .HasColumnName("elevation_min");

                    b.Property<string>("Geology")
                        .HasColumnType("text")
                        .HasColumnName("geology");

                    b.Property<MultiPolygon>("Geometry")
                        .HasColumnType("geometry(MultiPolygon,26710)")
                        .HasColumnName("geometry");

                    b.Property<string>("HumintPop")
                        .HasColumnType("text")
                        .HasColumnName("humint_pop");

                    b.Property<string>("HumintRec")
                        .HasColumnType("text")
                        .HasColumnName("humint_rec");

                    b.Property<string>("HumintVis")
                        .HasColumnType("text")
                        .HasColumnName("humint_vis");

                    b.Property<string>("HydroArea")
                        .HasColumnType("text")
                        .HasColumnName("hydro_area");

                    b.Property<string>("HydroReg")
                        .HasColumnType("text")
                        .HasColumnName("hydro_reg");

                    b.Property<string>("HydroSuba")
                        .HasColumnType("text")
                        .HasColumnName("hydro_suba");

                    b.Property<string>("Hydrologic")
                        .HasColumnType("text")
                        .HasColumnName("hydrologic");

                    b.Property<double>("MouthLat")
                        .HasColumnType("double precision")
                        .HasColumnName("mouth_lat");

                    b.Property<double>("MouthLon")
                        .HasColumnType("double precision")
                        .HasColumnName("mouth_lon");

                    b.Property<string>("MouthTRS")
                        .HasColumnType("text")
                        .HasColumnName("mouth_trs");

                    b.Property<double>("Perim001")
                        .HasColumnType("double precision")
                        .HasColumnName("perim001");

                    b.Property<double>("Perimeter")
                        .HasColumnType("double precision")
                        .HasColumnName("perimeter");

                    b.Property<string>("RWQCB")
                        .HasColumnType("text")
                        .HasColumnName("rwqcb");

                    b.Property<string>("RiverName")
                        .HasColumnType("text")
                        .HasColumnName("river_name");

                    b.Property<double>("SPIAcres")
                        .HasColumnType("double precision")
                        .HasColumnName("spi_acres");

                    b.Property<string>("SuperPlan")
                        .HasColumnType("text")
                        .HasColumnName("super_plan");

                    b.Property<bool?>("TOC")
                        .HasColumnType("boolean")
                        .HasColumnName("toc");

                    b.Property<string>("Threatend")
                        .HasColumnType("text")
                        .HasColumnName("threatend");

                    b.Property<double>("VallyLength")
                        .HasColumnType("double precision")
                        .HasColumnName("vally_length");

                    b.Property<double>("WS_Order")
                        .HasColumnType("double precision")
                        .HasColumnName("ws_order");

                    b.Property<string>("WatershedID")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("watershed_id");

                    b.Property<string>("WatershedName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("watershed_name");

                    b.Property<double>("WshdAcres")
                        .HasColumnType("double precision")
                        .HasColumnName("wshd_acres");

                    b.HasKey("Guid");

                    b.ToTable("watersheds", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.WildlifeSpecies", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<string>("AlphaCode")
                        .HasColumnType("text")
                        .HasColumnName("alpha_code");

                    b.Property<string>("Class")
                        .HasColumnType("text")
                        .HasColumnName("class");

                    b.Property<string>("Family")
                        .HasColumnType("text")
                        .HasColumnName("family");

                    b.Property<string>("Genus")
                        .HasColumnType("text")
                        .HasColumnName("genus");

                    b.Property<string>("Order")
                        .HasColumnType("text")
                        .HasColumnName("order");

                    b.Property<string>("Species")
                        .HasColumnType("text")
                        .HasColumnName("pecies");

                    b.Property<string>("SubSpecies")
                        .HasColumnType("text")
                        .HasColumnName("sub_species");

                    b.Property<string>("WHRNum")
                        .HasColumnType("text")
                        .HasColumnName("whr_num");

                    b.Property<int>("WLSorting")
                        .HasColumnType("integer")
                        .HasColumnName("wl_sorting");

                    b.Property<string>("WildlifeSpeciesDescription")
                        .HasColumnType("text")
                        .HasColumnName("wildlife_species_description");

                    b.HasKey("Guid");

                    b.ToTable("wildlife_species", (string)null);
                });

            modelBuilder.Entity("cdfw_spotted_owl_diagrams_districts", b =>
                {
                    b.HasOne("WBIS_2.DataModel.CDFW_SpottedOwlDiagram", null)
                        .WithMany()
                        .HasForeignKey("cdfw_spotted_owl_diagram_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.District", null)
                        .WithMany()
                        .HasForeignKey("district_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("cdfw_spotted_owls_districts", b =>
                {
                    b.HasOne("WBIS_2.DataModel.CDFW_SpottedOwl", null)
                        .WithMany()
                        .HasForeignKey("cdfw_spotted_owl_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.District", null)
                        .WithMany()
                        .HasForeignKey("district_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("cdfw_spotted_owls_hex160s", b =>
                {
                    b.HasOne("WBIS_2.DataModel.CDFW_SpottedOwl", null)
                        .WithMany()
                        .HasForeignKey("cdfw_spotted_owl_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.Hex160", null)
                        .WithMany()
                        .HasForeignKey("hex160_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("cdfw_spotted_owls_quad75s", b =>
                {
                    b.HasOne("WBIS_2.DataModel.CDFW_SpottedOwl", null)
                        .WithMany()
                        .HasForeignKey("cdfw_spotted_owl_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.Quad75", null)
                        .WithMany()
                        .HasForeignKey("quad75_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("cdfw_spotted_owls_watersheds", b =>
                {
                    b.HasOne("WBIS_2.DataModel.CDFW_SpottedOwl", null)
                        .WithMany()
                        .HasForeignKey("cdfw_spotted_owl_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.Watershed", null)
                        .WithMany()
                        .HasForeignKey("watershed_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("cnddb_occurrences_districts", b =>
                {
                    b.HasOne("WBIS_2.DataModel.CNDDBOccurrence", null)
                        .WithMany()
                        .HasForeignKey("cnddb_occurrence_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.District", null)
                        .WithMany()
                        .HasForeignKey("district_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("cnddb_occurrences_hex160s", b =>
                {
                    b.HasOne("WBIS_2.DataModel.CNDDBOccurrence", null)
                        .WithMany()
                        .HasForeignKey("cnddb_occurrence_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.Hex160", null)
                        .WithMany()
                        .HasForeignKey("hex160_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("cnddb_occurrences_quad75s", b =>
                {
                    b.HasOne("WBIS_2.DataModel.CNDDBOccurrence", null)
                        .WithMany()
                        .HasForeignKey("cnddb_occurrence_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.Quad75", null)
                        .WithMany()
                        .HasForeignKey("quad75_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("cnddb_occurrences_watersheds", b =>
                {
                    b.HasOne("WBIS_2.DataModel.CNDDBOccurrence", null)
                        .WithMany()
                        .HasForeignKey("cnddb_occurrence_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.Watershed", null)
                        .WithMany()
                        .HasForeignKey("watershed_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("hex160s_districts", b =>
                {
                    b.HasOne("WBIS_2.DataModel.District", null)
                        .WithMany()
                        .HasForeignKey("district_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.Hex160", null)
                        .WithMany()
                        .HasForeignKey("hex160_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("hex160s_protection_zones", b =>
                {
                    b.HasOne("WBIS_2.DataModel.ProtectionZone", null)
                        .WithMany()
                        .HasForeignKey("hex160_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.Hex160", null)
                        .WithMany()
                        .HasForeignKey("protection_zone_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("hex160s_quad75s", b =>
                {
                    b.HasOne("WBIS_2.DataModel.Hex160", null)
                        .WithMany()
                        .HasForeignKey("hex160_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.Quad75", null)
                        .WithMany()
                        .HasForeignKey("quad75_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("hex160s_watersheds", b =>
                {
                    b.HasOne("WBIS_2.DataModel.Hex160", null)
                        .WithMany()
                        .HasForeignKey("hex160_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.Watershed", null)
                        .WithMany()
                        .HasForeignKey("watershed_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("quad75s_districts", b =>
                {
                    b.HasOne("WBIS_2.DataModel.District", null)
                        .WithMany()
                        .HasForeignKey("district_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.Quad75", null)
                        .WithMany()
                        .HasForeignKey("quad75_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("users_districts", b =>
                {
                    b.HasOne("WBIS_2.DataModel.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("application_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.District", null)
                        .WithMany()
                        .HasForeignKey("district_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("watersheds_districts", b =>
                {
                    b.HasOne("WBIS_2.DataModel.District", null)
                        .WithMany()
                        .HasForeignKey("district_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.Watershed", null)
                        .WithMany()
                        .HasForeignKey("watershed_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WBIS_2.DataModel.ApplicationUser", b =>
                {
                    b.HasOne("WBIS_2.DataModel.ApplicationUser", "Admin")
                        .WithMany("Contractors")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.ApplicationGroup", "ApplicationGroup")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("ApplicationGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("ApplicationGroup");
                });

            modelBuilder.Entity("WBIS_2.DataModel.DeviceInfo", b =>
                {
                    b.HasOne("WBIS_2.DataModel.SiteCalling", "SiteCalling")
                        .WithOne("DeviceInfo")
                        .HasForeignKey("WBIS_2.DataModel.DeviceInfo", "SiteCallingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.SiteCallingRepository", "SiteCallingRepository")
                        .WithOne("DeviceInfo")
                        .HasForeignKey("WBIS_2.DataModel.DeviceInfo", "SiteCallingRepositoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SiteCalling");

                    b.Navigation("SiteCallingRepository");
                });

            modelBuilder.Entity("WBIS_2.DataModel.DistrictExtendedGeometry", b =>
                {
                    b.HasOne("WBIS_2.DataModel.District", "District")
                        .WithOne("DistrictExtendedGeometry")
                        .HasForeignKey("WBIS_2.DataModel.DistrictExtendedGeometry", "Guid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("WBIS_2.DataModel.Hex160", b =>
                {
                    b.HasOne("WBIS_2.DataModel.ProtectionZone", "CurrentProtectionZone")
                        .WithMany("CurrentHex160s")
                        .HasForeignKey("CurrentProtectionZoneID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentProtectionZone");
                });

            modelBuilder.Entity("WBIS_2.DataModel.Hex160RequiredPass", b =>
                {
                    b.HasOne("WBIS_2.DataModel.BirdSpecies", "BirdSpecies")
                        .WithMany("PassSpecies")
                        .HasForeignKey("BirdSpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.Hex160", "Hex160")
                        .WithMany("Hex160RequiredPasses")
                        .HasForeignKey("Hex160Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.ApplicationUser", "User")
                        .WithMany("Hex160RequiredPasses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BirdSpecies");

                    b.Navigation("Hex160");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WBIS_2.DataModel.OtherWildlife", b =>
                {
                    b.HasOne("WBIS_2.DataModel.SiteCalling", "SiteCalling")
                        .WithMany("OtherWildlifeRecords")
                        .HasForeignKey("SiteCallingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.SiteCallingRepository", "SiteCallingRepository")
                        .WithMany("OtherWildlifeRecords")
                        .HasForeignKey("SiteCallingRepositoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.WildlifeSpecies", "WildlifeSpecies")
                        .WithMany("OtherWildlifeRecords")
                        .HasForeignKey("WildlifeSpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SiteCalling");

                    b.Navigation("SiteCallingRepository");

                    b.Navigation("User");

                    b.Navigation("WildlifeSpecies");
                });

            modelBuilder.Entity("WBIS_2.DataModel.PermanentCallStation", b =>
                {
                    b.HasOne("WBIS_2.DataModel.Hex160", "Hex160")
                        .WithMany("PermanentCallStations")
                        .HasForeignKey("Hex160Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.ApplicationUser", "User")
                        .WithMany("PermanentCallStations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hex160");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WBIS_2.DataModel.ProtectionZone", b =>
                {
                    b.HasOne("WBIS_2.DataModel.ApplicationUser", "User")
                        .WithMany("ProtectionZones")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WBIS_2.DataModel.SiteCalling", b =>
                {
                    b.HasOne("WBIS_2.DataModel.Hex160", "Hex160")
                        .WithMany("SiteCallings")
                        .HasForeignKey("Hex160Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.ProtectionZone", "ProtectionZone")
                        .WithMany("SiteCallings")
                        .HasForeignKey("ProtectionZoneID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.BirdSpecies", "SurveySpecies")
                        .WithMany("SurveySpecies")
                        .HasForeignKey("SurveySpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.ApplicationUser", "User")
                        .WithMany("SiteCallings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hex160");

                    b.Navigation("ProtectionZone");

                    b.Navigation("SurveySpecies");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WBIS_2.DataModel.SiteCallingDetection", b =>
                {
                    b.HasOne("WBIS_2.DataModel.SiteCalling", "SiteCalling")
                        .WithOne("SiteCallingDetection")
                        .HasForeignKey("WBIS_2.DataModel.SiteCallingDetection", "Guid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.BirdSpecies", "SpeciesFound")
                        .WithMany("SpeciesFound")
                        .HasForeignKey("SpeciesFoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SiteCalling");

                    b.Navigation("SpeciesFound");
                });

            modelBuilder.Entity("WBIS_2.DataModel.SiteCallingRepository", b =>
                {
                    b.HasOne("WBIS_2.DataModel.Hex160", "Hex160")
                        .WithMany("SiteCallingRepositories")
                        .HasForeignKey("Hex160Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.ProtectionZone", "ProtectionZone")
                        .WithMany("SiteCallingRepositories")
                        .HasForeignKey("ProtectionZoneID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.BirdSpecies", "SurveySpecies")
                        .WithMany("SurveySpeciesRepository")
                        .HasForeignKey("SurveySpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.ApplicationUser", "User")
                        .WithMany("SiteCallingRepositories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hex160");

                    b.Navigation("ProtectionZone");

                    b.Navigation("SurveySpecies");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WBIS_2.DataModel.SiteCallingRepositoryDetection", b =>
                {
                    b.HasOne("WBIS_2.DataModel.SiteCallingRepository", "SiteCallingRepository")
                        .WithOne("SiteCallingRepositoryDetection")
                        .HasForeignKey("WBIS_2.DataModel.SiteCallingRepositoryDetection", "Guid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.BirdSpecies", "SpeciesFound")
                        .WithMany("SpeciesFoundRepository")
                        .HasForeignKey("SpeciesFoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SiteCallingRepository");

                    b.Navigation("SpeciesFound");
                });

            modelBuilder.Entity("WBIS_2.DataModel.SiteCallingRepositoryTrack", b =>
                {
                    b.HasOne("WBIS_2.DataModel.SiteCallingRepository", "SiteCallingRepository")
                        .WithOne("SiteCallingRepositoryTrack")
                        .HasForeignKey("WBIS_2.DataModel.SiteCallingRepositoryTrack", "Guid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SiteCallingRepository");
                });

            modelBuilder.Entity("WBIS_2.DataModel.SiteCallingTrack", b =>
                {
                    b.HasOne("WBIS_2.DataModel.SiteCalling", "SiteCalling")
                        .WithOne("SiteCallingTrack")
                        .HasForeignKey("WBIS_2.DataModel.SiteCallingTrack", "Guid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SiteCalling");
                });

            modelBuilder.Entity("WBIS_2.DataModel.UserLocation", b =>
                {
                    b.HasOne("WBIS_2.DataModel.SiteCallingDetection", "SiteCallingDetection")
                        .WithOne("UserLocation")
                        .HasForeignKey("WBIS_2.DataModel.UserLocation", "SiteCallingDetectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.SiteCallingRepositoryDetection", "SiteCallingRepositoryDetection")
                        .WithOne("UserLocation")
                        .HasForeignKey("WBIS_2.DataModel.UserLocation", "SiteCallingRepositoryDetectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SiteCallingDetection");

                    b.Navigation("SiteCallingRepositoryDetection");
                });

            modelBuilder.Entity("WBIS_2.DataModel.ApplicationGroup", b =>
                {
                    b.Navigation("ApplicationUsers");
                });

            modelBuilder.Entity("WBIS_2.DataModel.ApplicationUser", b =>
                {
                    b.Navigation("Contractors");

                    b.Navigation("Hex160RequiredPasses");

                    b.Navigation("PermanentCallStations");

                    b.Navigation("ProtectionZones");

                    b.Navigation("SiteCallingRepositories");

                    b.Navigation("SiteCallings");
                });

            modelBuilder.Entity("WBIS_2.DataModel.BirdSpecies", b =>
                {
                    b.Navigation("PassSpecies");

                    b.Navigation("SpeciesFound");

                    b.Navigation("SpeciesFoundRepository");

                    b.Navigation("SurveySpecies");

                    b.Navigation("SurveySpeciesRepository");
                });

            modelBuilder.Entity("WBIS_2.DataModel.District", b =>
                {
                    b.Navigation("DistrictExtendedGeometry");
                });

            modelBuilder.Entity("WBIS_2.DataModel.Hex160", b =>
                {
                    b.Navigation("Hex160RequiredPasses");

                    b.Navigation("PermanentCallStations");

                    b.Navigation("SiteCallingRepositories");

                    b.Navigation("SiteCallings");
                });

            modelBuilder.Entity("WBIS_2.DataModel.ProtectionZone", b =>
                {
                    b.Navigation("CurrentHex160s");

                    b.Navigation("SiteCallingRepositories");

                    b.Navigation("SiteCallings");
                });

            modelBuilder.Entity("WBIS_2.DataModel.SiteCalling", b =>
                {
                    b.Navigation("DeviceInfo");

                    b.Navigation("OtherWildlifeRecords");

                    b.Navigation("SiteCallingDetection");

                    b.Navigation("SiteCallingTrack");
                });

            modelBuilder.Entity("WBIS_2.DataModel.SiteCallingDetection", b =>
                {
                    b.Navigation("UserLocation");
                });

            modelBuilder.Entity("WBIS_2.DataModel.SiteCallingRepository", b =>
                {
                    b.Navigation("DeviceInfo");

                    b.Navigation("OtherWildlifeRecords");

                    b.Navigation("SiteCallingRepositoryDetection");

                    b.Navigation("SiteCallingRepositoryTrack");
                });

            modelBuilder.Entity("WBIS_2.DataModel.SiteCallingRepositoryDetection", b =>
                {
                    b.Navigation("UserLocation");
                });

            modelBuilder.Entity("WBIS_2.DataModel.WildlifeSpecies", b =>
                {
                    b.Navigation("OtherWildlifeRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
