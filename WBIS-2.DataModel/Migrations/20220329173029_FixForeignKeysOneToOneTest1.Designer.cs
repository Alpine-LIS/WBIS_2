// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WBIS_2.DataModel;

#nullable disable

namespace WBIS_2.DataModel.Migrations
{
    [DbContext(typeof(WBIS2Model))]
    [Migration("20220329173029_FixForeignKeysOneToOneTest1")]
    partial class FixForeignKeysOneToOneTest1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("amphibian_surveys_hex160s", b =>
                {
                    b.Property<Guid>("amphibian_survey_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("hex160_id")
                        .HasColumnType("uuid");

                    b.HasKey("amphibian_survey_id", "hex160_id");

                    b.HasIndex("hex160_id");

                    b.ToTable("amphibian_surveys_hex160s", "public");
                });

            modelBuilder.Entity("amphibian_surveys_quad75s", b =>
                {
                    b.Property<Guid>("amphibian_survey_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("quad75_id")
                        .HasColumnType("uuid");

                    b.HasKey("amphibian_survey_id", "quad75_id");

                    b.HasIndex("quad75_id");

                    b.ToTable("amphibian_surveys_quad75s", "public");
                });

            modelBuilder.Entity("amphibian_surveys_watersheds", b =>
                {
                    b.Property<Guid>("amphibian_survey_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("watershed_id")
                        .HasColumnType("uuid");

                    b.HasKey("amphibian_survey_id", "watershed_id");

                    b.HasIndex("watershed_id");

                    b.ToTable("amphibian_surveys_watersheds", "public");
                });

            modelBuilder.Entity("botanical_scopings_districts", b =>
                {
                    b.Property<Guid>("botanical_scoping_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("district_id")
                        .HasColumnType("uuid");

                    b.HasKey("botanical_scoping_id", "district_id");

                    b.HasIndex("district_id");

                    b.ToTable("botanical_scopings_districts", "public");
                });

            modelBuilder.Entity("botanical_scopings_quad75s", b =>
                {
                    b.Property<Guid>("botanical_scoping_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("quad75_id")
                        .HasColumnType("uuid");

                    b.HasKey("botanical_scoping_id", "quad75_id");

                    b.HasIndex("quad75_id");

                    b.ToTable("botanical_scopings_quad75s", "public");
                });

            modelBuilder.Entity("botanical_scopings_watersheds", b =>
                {
                    b.Property<Guid>("botanical_scoping_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("watershed_id")
                        .HasColumnType("uuid");

                    b.HasKey("botanical_scoping_id", "watershed_id");

                    b.HasIndex("watershed_id");

                    b.ToTable("botanical_scopings_watersheds", "public");
                });

            modelBuilder.Entity("botanical_survey_areas_hex160s", b =>
                {
                    b.Property<Guid>("botanical_survey_area_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("hex160_id")
                        .HasColumnType("uuid");

                    b.HasKey("botanical_survey_area_id", "hex160_id");

                    b.HasIndex("hex160_id");

                    b.ToTable("botanical_survey_areas_hex160s", "public");
                });

            modelBuilder.Entity("botanical_survey_areas_quad75s", b =>
                {
                    b.Property<Guid>("botanical_survey_area_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("quad75_id")
                        .HasColumnType("uuid");

                    b.HasKey("botanical_survey_area_id", "quad75_id");

                    b.HasIndex("quad75_id");

                    b.ToTable("botanical_survey_areas_quad75s", "public");
                });

            modelBuilder.Entity("botanical_survey_areas_watersheds", b =>
                {
                    b.Property<Guid>("botanical_survey_area_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("watershed_id")
                        .HasColumnType("uuid");

                    b.HasKey("botanical_survey_area_id", "watershed_id");

                    b.HasIndex("watershed_id");

                    b.ToTable("botanical_survey_areas_watersheds", "public");
                });

            modelBuilder.Entity("botanical_surveys_hex160s", b =>
                {
                    b.Property<Guid>("botanical_survey_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("hex160_id")
                        .HasColumnType("uuid");

                    b.HasKey("botanical_survey_id", "hex160_id");

                    b.HasIndex("hex160_id");

                    b.ToTable("botanical_surveys_hex160s", "public");
                });

            modelBuilder.Entity("botanical_surveys_quad75s", b =>
                {
                    b.Property<Guid>("botanical_survey_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("quad75_id")
                        .HasColumnType("uuid");

                    b.HasKey("botanical_survey_id", "quad75_id");

                    b.HasIndex("quad75_id");

                    b.ToTable("botanical_surveys_quad75s", "public");
                });

            modelBuilder.Entity("botanical_surveys_watersheds", b =>
                {
                    b.Property<Guid>("botanical_survey_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("watershed_id")
                        .HasColumnType("uuid");

                    b.HasKey("botanical_survey_id", "watershed_id");

                    b.HasIndex("watershed_id");

                    b.ToTable("botanical_surveys_watersheds", "public");
                });

            modelBuilder.Entity("cnddb_occurrences_districts", b =>
                {
                    b.Property<Guid>("cnddb_occurrence_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("district_id")
                        .HasColumnType("uuid");

                    b.HasKey("cnddb_occurrence_id", "district_id");

                    b.HasIndex("district_id");

                    b.ToTable("cnddb_occurrences_districts", "public");
                });

            modelBuilder.Entity("cnddb_occurrences_hex160s", b =>
                {
                    b.Property<Guid>("cnddb_occurrence_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("hex160_id")
                        .HasColumnType("uuid");

                    b.HasKey("cnddb_occurrence_id", "hex160_id");

                    b.HasIndex("hex160_id");

                    b.ToTable("cnddb_occurrences_hex160s", "public");
                });

            modelBuilder.Entity("cnddb_occurrences_quad75s", b =>
                {
                    b.Property<Guid>("cnddb_occurrence_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("quad75_id")
                        .HasColumnType("uuid");

                    b.HasKey("cnddb_occurrence_id", "quad75_id");

                    b.HasIndex("quad75_id");

                    b.ToTable("cnddb_occurrences_quad75s", "public");
                });

            modelBuilder.Entity("cnddb_occurrences_watersheds", b =>
                {
                    b.Property<Guid>("cnddb_occurrence_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("watershed_id")
                        .HasColumnType("uuid");

                    b.HasKey("cnddb_occurrence_id", "watershed_id");

                    b.HasIndex("watershed_id");

                    b.ToTable("cnddb_occurrences_watersheds", "public");
                });

            modelBuilder.Entity("hex160s_districts", b =>
                {
                    b.Property<Guid>("district_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("hex160_id")
                        .HasColumnType("uuid");

                    b.HasKey("district_id", "hex160_id");

                    b.HasIndex("hex160_id");

                    b.ToTable("hex160s_districts", "public");
                });

            modelBuilder.Entity("hex160s_protection_zones", b =>
                {
                    b.Property<Guid>("hex160_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("protection_zone_id")
                        .HasColumnType("uuid");

                    b.HasKey("hex160_id", "protection_zone_id");

                    b.HasIndex("protection_zone_id");

                    b.ToTable("hex160s_protection_zones", "public");
                });

            modelBuilder.Entity("hex160s_quad75s", b =>
                {
                    b.Property<Guid>("hex160_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("quad75_id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("watershed_id")
                        .HasColumnType("uuid");

                    b.HasKey("hex160_id", "quad75_id");

                    b.HasIndex("quad75_id");

                    b.HasIndex("watershed_id");

                    b.ToTable("watersheds_quad75s", "public");
                });

            modelBuilder.Entity("hex160s_watersheds", b =>
                {
                    b.Property<Guid>("hex160_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("watershed_id")
                        .HasColumnType("uuid");

                    b.HasKey("hex160_id", "watershed_id");

                    b.HasIndex("watershed_id");

                    b.ToTable("hex160s_watersheds", "public");
                });

            modelBuilder.Entity("quad75s_districts", b =>
                {
                    b.Property<Guid>("district_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("quad75_id")
                        .HasColumnType("uuid");

                    b.HasKey("district_id", "quad75_id");

                    b.HasIndex("quad75_id");

                    b.ToTable("quad75s_districts", "public");
                });

            modelBuilder.Entity("spi_plant_polygons_hex160s", b =>
                {
                    b.Property<Guid>("hex160_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("spi_plant_polygon_id")
                        .HasColumnType("uuid");

                    b.HasKey("hex160_id", "spi_plant_polygon_id");

                    b.HasIndex("spi_plant_polygon_id");

                    b.ToTable("spi_plant_polygons_hex160s", "public");
                });

            modelBuilder.Entity("spi_plant_polygons_quad75s", b =>
                {
                    b.Property<Guid>("quad75_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("spi_plant_polygon_id")
                        .HasColumnType("uuid");

                    b.HasKey("quad75_id", "spi_plant_polygon_id");

                    b.HasIndex("spi_plant_polygon_id");

                    b.ToTable("spi_plant_polygons_quad75s", "public");
                });

            modelBuilder.Entity("spi_plant_polygons_watersheds", b =>
                {
                    b.Property<Guid>("spi_plant_polygon_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("watershed_id")
                        .HasColumnType("uuid");

                    b.HasKey("spi_plant_polygon_id", "watershed_id");

                    b.HasIndex("watershed_id");

                    b.ToTable("spi_plant_polygons_watersheds", "public");
                });

            modelBuilder.Entity("users_districts", b =>
                {
                    b.Property<Guid>("application_user_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("district_id")
                        .HasColumnType("uuid");

                    b.HasKey("application_user_id", "district_id");

                    b.HasIndex("district_id");

                    b.ToTable("users_districts", "public");
                });

            modelBuilder.Entity("watersheds_districts", b =>
                {
                    b.Property<Guid>("district_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("watershed_id")
                        .HasColumnType("uuid");

                    b.HasKey("district_id", "watershed_id");

                    b.HasIndex("watershed_id");

                    b.ToTable("watersheds_districts", "public");
                });

            modelBuilder.Entity("WBIS_2.DataModel.AmphibianElement", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<Guid>("AmphibianLocationFoundId")
                        .HasColumnType("uuid")
                        .HasColumnName("amphibian_location_found_id");

                    b.Property<Guid>("AmphibianPointOfInterestId")
                        .HasColumnType("uuid")
                        .HasColumnName("amphibian_point_of_interest_id");

                    b.Property<Guid>("AmphibianSurveyId")
                        .HasColumnType("uuid")
                        .HasColumnName("amphibian_survey_id");

                    b.Property<string>("Comments")
                        .HasColumnType("text")
                        .HasColumnName("comments");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_time");

                    b.Property<string>("Datum")
                        .HasColumnType("text")
                        .HasColumnName("datum");

                    b.Property<Guid>("DeviceInfoID")
                        .HasColumnType("uuid")
                        .HasColumnName("device_info_id");

                    b.Property<Guid>("DistrictId")
                        .HasColumnType("uuid")
                        .HasColumnName("district_id");

                    b.Property<Point>("Geometry")
                        .IsRequired()
                        .HasColumnType("geometry(Point,26710)")
                        .HasColumnName("geometry");

                    b.Property<Guid>("Hex160Id")
                        .HasColumnType("uuid")
                        .HasColumnName("hex160_id");

                    b.Property<double>("Lat")
                        .HasColumnType("double precision")
                        .HasColumnName("lat");

                    b.Property<double>("Lon")
                        .HasColumnType("double precision")
                        .HasColumnName("lon");

                    b.Property<Guid>("Quad75Id")
                        .HasColumnType("uuid")
                        .HasColumnName("quad75_id");

                    b.Property<string>("RecordType")
                        .HasColumnType("text")
                        .HasColumnName("record_type");

                    b.Property<bool>("Repository")
                        .HasColumnType("boolean")
                        .HasColumnName("repository");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("UserModifiedId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_modified_id");

                    b.Property<Guid>("WatershedId")
                        .HasColumnType("uuid")
                        .HasColumnName("watershed_id");

                    b.Property<bool>("_delete")
                        .HasColumnType("boolean");

                    b.HasKey("Guid");

                    b.HasIndex("AmphibianSurveyId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("Hex160Id");

                    b.HasIndex("Quad75Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserModifiedId");

                    b.HasIndex("WatershedId");

                    b.ToTable("amphibian_elements", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.AmphibianLocationFound", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<Guid>("AmphibianElementId")
                        .HasColumnType("uuid")
                        .HasColumnName("amphibian_element_id");

                    b.Property<Guid>("AmphibianSpeciesId")
                        .HasColumnType("uuid")
                        .HasColumnName("amphibian_species_id");

                    b.Property<bool>("Aural")
                        .HasColumnType("boolean")
                        .HasColumnName("aural");

                    b.Property<double>("NumberOfAdults")
                        .HasColumnType("double precision")
                        .HasColumnName("number_of_adults");

                    b.Property<double>("NumberOfEggMasses")
                        .HasColumnType("double precision")
                        .HasColumnName("number_of_egg_masses");

                    b.Property<double>("NumberOfLarve")
                        .HasColumnType("double precision")
                        .HasColumnName("number_of_larve");

                    b.Property<double>("NumberOfSubadults")
                        .HasColumnType("double precision")
                        .HasColumnName("number_of_subadults");

                    b.Property<string>("PointOfInterest")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("point_of_interest");

                    b.Property<bool>("Visual")
                        .HasColumnType("boolean")
                        .HasColumnName("visual");

                    b.HasKey("Guid");

                    b.HasIndex("AmphibianElementId")
                        .IsUnique();

                    b.HasIndex("AmphibianSpeciesId");

                    b.ToTable("amphibian_locations_found", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.AmphibianPointOfInterest", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<Guid>("AmphibianElementId")
                        .HasColumnType("uuid")
                        .HasColumnName("amphibian_element_id");

                    b.Property<Guid>("OtherWildlifeId")
                        .HasColumnType("uuid")
                        .HasColumnName("other_wildlife_id");

                    b.Property<string>("PointOfInterest")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("point_of_interest");

                    b.HasKey("Guid");

                    b.HasIndex("AmphibianElementId")
                        .IsUnique();

                    b.HasIndex("OtherWildlifeId");

                    b.ToTable("amphibian_points_of_interest", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.AmphibianSpecies", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<string>("SpeciesCode")
                        .HasColumnType("text")
                        .HasColumnName("species_code");

                    b.Property<string>("SpeciesName")
                        .HasColumnType("text")
                        .HasColumnName("species_name");

                    b.HasKey("Guid");

                    b.ToTable("amphibian_species", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.AmphibianSurvey", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<double>("AirTemp")
                        .HasColumnType("double precision")
                        .HasColumnName("air_temp");

                    b.Property<double>("Bedrock")
                        .HasColumnType("double precision")
                        .HasColumnName("bedrock");

                    b.Property<double>("Boulders")
                        .HasColumnType("double precision")
                        .HasColumnName("boulders");

                    b.Property<double>("CanopyClosure")
                        .HasColumnType("double precision")
                        .HasColumnName("canopy_closure");

                    b.Property<double>("Cobble")
                        .HasColumnType("double precision")
                        .HasColumnName("cobble");

                    b.Property<string>("County")
                        .HasColumnType("text")
                        .HasColumnName("county");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_time");

                    b.Property<Guid>("DeviceInfoID")
                        .HasColumnType("uuid")
                        .HasColumnName("device_info_id");

                    b.Property<Guid>("DistrictId")
                        .HasColumnType("uuid")
                        .HasColumnName("district_id");

                    b.Property<string>("Elevation")
                        .HasColumnType("text")
                        .HasColumnName("elevation");

                    b.Property<double>("EstAvgStreamWidth")
                        .HasColumnType("double precision")
                        .HasColumnName("est_avg_stream_width");

                    b.Property<string>("Flow")
                        .HasColumnType("text")
                        .HasColumnName("flow");

                    b.Property<LineString>("Geometry")
                        .IsRequired()
                        .HasColumnType("geometry(LineString,26710)")
                        .HasColumnName("geometry");

                    b.Property<double>("Gravel")
                        .HasColumnType("double precision")
                        .HasColumnName("gravel");

                    b.Property<string>("LakeStreamName")
                        .HasColumnType("text")
                        .HasColumnName("lake_stream_name");

                    b.Property<string>("Location")
                        .HasColumnType("text")
                        .HasColumnName("location");

                    b.Property<string>("LocationComments")
                        .HasColumnType("text")
                        .HasColumnName("location_comments");

                    b.Property<string>("PlanningWatershed")
                        .HasColumnType("text")
                        .HasColumnName("planning_watershed");

                    b.Property<double>("Pool")
                        .HasColumnType("double precision")
                        .HasColumnName("pool");

                    b.Property<bool>("Repository")
                        .HasColumnType("boolean")
                        .HasColumnName("repository");

                    b.Property<double>("Riffle")
                        .HasColumnType("double precision")
                        .HasColumnName("riffle");

                    b.Property<double>("Run")
                        .HasColumnType("double precision")
                        .HasColumnName("run");

                    b.Property<double>("Sand")
                        .HasColumnType("double precision")
                        .HasColumnName("sand");

                    b.Property<string>("SeasonalityOfFlow")
                        .HasColumnType("text")
                        .HasColumnName("seasonality_if_flow");

                    b.Property<double>("Silt")
                        .HasColumnType("double precision")
                        .HasColumnName("silt");

                    b.Property<string>("SiteID")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("site_id");

                    b.Property<string>("StreamGradient")
                        .HasColumnType("text")
                        .HasColumnName("stream_gradient");

                    b.Property<string>("Surveyors")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("surveyors");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("UserModifiedId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_modified_id");

                    b.Property<double>("WaterTemp")
                        .HasColumnType("double precision")
                        .HasColumnName("water_temp");

                    b.Property<string>("WaterType")
                        .HasColumnType("text")
                        .HasColumnName("water_type");

                    b.Property<string>("Weather")
                        .HasColumnType("text")
                        .HasColumnName("weather");

                    b.Property<string>("Wind")
                        .HasColumnType("text")
                        .HasColumnName("wind");

                    b.Property<bool>("_delete")
                        .HasColumnType("boolean");

                    b.HasKey("Guid");

                    b.HasIndex("DistrictId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserModifiedId");

                    b.ToTable("amphibian_surveys", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.ApplicationGroup", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<bool>("AdminPrivileges")
                        .HasColumnType("boolean")
                        .HasColumnName("admin_privileges");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("group_name");

                    b.Property<bool>("ReadOnly")
                        .HasColumnType("boolean")
                        .HasColumnName("read_only");

                    b.HasKey("Guid");

                    b.ToTable("application_groups", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.ApplicationUser", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<Guid>("ApplicationGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("application_group_id");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("EmailDefault")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Hint")
                        .HasColumnType("text")
                        .HasColumnName("hint");

                    b.Property<string>("PasswordSHA")
                        .HasColumnType("text")
                        .HasColumnName("password_sha");

                    b.Property<DateTime?>("PasswordTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("password_time_stamp");

                    b.Property<string>("UserID")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_name");

                    b.Property<bool>("_delete")
                        .HasColumnType("boolean");

                    b.HasKey("Guid");

                    b.HasIndex("ApplicationGroupId");

                    b.ToTable("application_users", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.BirdSpecies", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<bool>("BandingSpecies")
                        .HasColumnType("boolean")
                        .HasColumnName("banding_species");

                    b.Property<bool>("IsFindable")
                        .HasColumnType("boolean")
                        .HasColumnName("is_findable");

                    b.Property<bool>("IsSurveyable")
                        .HasColumnType("boolean")
                        .HasColumnName("is_surveyable");

                    b.Property<string>("Species")
                        .HasColumnType("text")
                        .HasColumnName("species");

                    b.HasKey("Guid");

                    b.ToTable("bird_species", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.BotanicalElement", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<Guid>("BotanicalPlantListId")
                        .HasColumnType("uuid")
                        .HasColumnName("botanical_plant_list_id");

                    b.Property<Guid>("BotanicalPlantOfInterestId")
                        .HasColumnType("uuid")
                        .HasColumnName("botanical_plant_of_interest_id");

                    b.Property<Guid>("BotanicalPointOfInterestId")
                        .HasColumnType("uuid")
                        .HasColumnName("botanical_point_of_interest_id");

                    b.Property<Guid>("BotanicalScopingId")
                        .HasColumnType("uuid")
                        .HasColumnName("botanical_scoping_id");

                    b.Property<Guid>("BotanicalSurveyAreaId")
                        .HasColumnType("uuid")
                        .HasColumnName("botanical_survey_area_id");

                    b.Property<Guid>("BotanicalSurveyId")
                        .HasColumnType("uuid")
                        .HasColumnName("botanical_survey_id");

                    b.Property<string>("Comments")
                        .HasColumnType("text")
                        .HasColumnName("comments");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_time");

                    b.Property<string>("Datum")
                        .HasColumnType("text")
                        .HasColumnName("datum");

                    b.Property<Guid>("DeviceInfoID")
                        .HasColumnType("uuid")
                        .HasColumnName("device_info_id");

                    b.Property<Guid>("DistrictId")
                        .HasColumnType("uuid")
                        .HasColumnName("district_id");

                    b.Property<Point>("Geometry")
                        .IsRequired()
                        .HasColumnType("geometry(Point,26710)")
                        .HasColumnName("geometry");

                    b.Property<Guid>("Hex160Id")
                        .HasColumnType("uuid")
                        .HasColumnName("hex160_id");

                    b.Property<double>("Lat")
                        .HasColumnType("double precision")
                        .HasColumnName("lat");

                    b.Property<double>("Lon")
                        .HasColumnType("double precision")
                        .HasColumnName("lon");

                    b.Property<Guid>("Quad75Id")
                        .HasColumnType("uuid")
                        .HasColumnName("quad75_id");

                    b.Property<string>("RecordType")
                        .HasColumnType("text")
                        .HasColumnName("record_type");

                    b.Property<bool>("Repository")
                        .HasColumnType("boolean")
                        .HasColumnName("repository");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("UserModifiedId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_modified_id");

                    b.Property<Guid>("WatershedId")
                        .HasColumnType("uuid")
                        .HasColumnName("watershed_id");

                    b.Property<bool>("_delete")
                        .HasColumnType("boolean");

                    b.HasKey("Guid");

                    b.HasIndex("BotanicalScopingId");

                    b.HasIndex("BotanicalSurveyAreaId");

                    b.HasIndex("BotanicalSurveyId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("Hex160Id");

                    b.HasIndex("Quad75Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserModifiedId");

                    b.HasIndex("WatershedId");

                    b.ToTable("botanical_elements", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.BotanicalPlantList", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<Guid>("BotanicalElementId")
                        .HasColumnType("uuid")
                        .HasColumnName("botanical_element_id");

                    b.Property<Guid>("PlantSpeciesId")
                        .HasColumnType("uuid")
                        .HasColumnName("plant_species_id");

                    b.HasKey("Guid");

                    b.HasIndex("BotanicalElementId")
                        .IsUnique();

                    b.HasIndex("PlantSpeciesId");

                    b.ToTable("botanical_plants_list", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.BotanicalPlantOfInterest", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<Guid>("BotanicalElementId")
                        .HasColumnType("uuid")
                        .HasColumnName("botanical_element_id");

                    b.Property<string>("Disturbances")
                        .HasColumnType("text")
                        .HasColumnName("disturbances");

                    b.Property<bool>("ExistingCNDDB")
                        .HasColumnType("boolean")
                        .HasColumnName("existing_cnddb");

                    b.Property<int>("Flowering")
                        .HasColumnType("integer")
                        .HasColumnName("flowering");

                    b.Property<int>("Fruiting")
                        .HasColumnType("integer")
                        .HasColumnName("fruiting");

                    b.Property<string>("Habitat")
                        .HasColumnType("text")
                        .HasColumnName("habitat");

                    b.Property<string>("LandUse")
                        .HasColumnType("text")
                        .HasColumnName("land_use");

                    b.Property<int>("NumInd")
                        .HasColumnType("integer")
                        .HasColumnName("num_ind");

                    b.Property<int>("NumIndMax")
                        .HasColumnType("integer")
                        .HasColumnName("num_ind_max");

                    b.Property<int>("OccNum")
                        .HasColumnType("integer")
                        .HasColumnName("occ_num");

                    b.Property<Guid>("PlantSpeciesId")
                        .HasColumnType("uuid")
                        .HasColumnName("plant_species_id");

                    b.Property<double>("Radius")
                        .HasColumnType("double precision")
                        .HasColumnName("radius");

                    b.Property<string>("SiteQuality")
                        .HasColumnType("text")
                        .HasColumnName("site_quality");

                    b.Property<bool>("SpeciesFound")
                        .HasColumnType("boolean")
                        .HasColumnName("species_found");

                    b.Property<string>("SpeciesFoundText")
                        .HasColumnType("text")
                        .HasColumnName("species_found_text");

                    b.Property<bool>("SubsequentVisit")
                        .HasColumnType("boolean")
                        .HasColumnName("subsequent_visit");

                    b.Property<string>("Threats")
                        .HasColumnType("text")
                        .HasColumnName("threats");

                    b.Property<int>("Vegetative")
                        .HasColumnType("integer")
                        .HasColumnName("vegetative");

                    b.HasKey("Guid");

                    b.HasIndex("BotanicalElementId")
                        .IsUnique();

                    b.HasIndex("PlantSpeciesId");

                    b.ToTable("botanical_plants_of_interest", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.BotanicalPointOfInterest", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<Guid>("BotanicalElementId")
                        .HasColumnType("uuid")
                        .HasColumnName("botanical_element_id");

                    b.Property<string>("Gradient")
                        .HasColumnType("text")
                        .HasColumnName("gradient");

                    b.Property<bool>("HerbaceousVegetation")
                        .HasColumnType("boolean")
                        .HasColumnName("herbaceous_vegetation");

                    b.Property<bool>("Instream")
                        .HasColumnType("boolean")
                        .HasColumnName("instream");

                    b.Property<bool>("Inundated")
                        .HasColumnType("boolean")
                        .HasColumnName("inundated");

                    b.Property<bool>("Isolated")
                        .HasColumnType("boolean")
                        .HasColumnName("isolated");

                    b.Property<bool>("LittoralZone")
                        .HasColumnType("boolean")
                        .HasColumnName("littoral_zone");

                    b.Property<double>("Radius")
                        .HasColumnType("double precision")
                        .HasColumnName("radius");

                    b.Property<bool>("Recheck")
                        .HasColumnType("boolean")
                        .HasColumnName("recheck");

                    b.Property<bool>("RechecksNeeded")
                        .HasColumnType("boolean")
                        .HasColumnName("rechecks_needed");

                    b.Property<string>("RecordType")
                        .HasColumnType("text")
                        .HasColumnName("record_type");

                    b.Property<string>("Substrate")
                        .HasColumnType("text")
                        .HasColumnName("substrate");

                    b.Property<bool>("WoodyVegetation")
                        .HasColumnType("boolean")
                        .HasColumnName("woody_vedetation");

                    b.HasKey("Guid");

                    b.HasIndex("BotanicalElementId")
                        .IsUnique();

                    b.ToTable("botanical_points_of_interest", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.BotanicalScoping", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("EcologicalUnit")
                        .HasColumnType("text")
                        .HasColumnName("ecological_unit");

                    b.Property<int>("ElevationMax")
                        .HasColumnType("integer")
                        .HasColumnName("elevation_max");

                    b.Property<int>("ElevationMin")
                        .HasColumnType("integer")
                        .HasColumnName("elevation_min");

                    b.Property<string>("Forester")
                        .HasColumnType("text");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uuid")
                        .HasColumnName("region_id");

                    b.Property<bool>("Repository")
                        .HasColumnType("boolean")
                        .HasColumnName("repository");

                    b.Property<Guid>("THP_AreaId")
                        .HasColumnType("uuid")
                        .HasColumnName("thp_area_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("UserModifiedId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_modified_id");

                    b.Property<int>("WshdElevationMax")
                        .HasColumnType("integer")
                        .HasColumnName("wshd_elevation_max");

                    b.Property<int>("WshdElevationMin")
                        .HasColumnType("integer")
                        .HasColumnName("wshd_elevation_min");

                    b.Property<bool>("_delete")
                        .HasColumnType("boolean");

                    b.HasKey("Guid");

                    b.HasIndex("RegionId");

                    b.HasIndex("THP_AreaId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserModifiedId");

                    b.ToTable("botanical_scopings", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.BotanicalScopingSpecies", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<Guid>("BotanicalScopingId")
                        .HasColumnType("uuid")
                        .HasColumnName("botanical_scoping_id");

                    b.Property<bool>("Exclude")
                        .HasColumnType("boolean")
                        .HasColumnName("exclude");

                    b.Property<bool>("ExcludeReport")
                        .HasColumnType("boolean")
                        .HasColumnName("exclude_report");

                    b.Property<string>("ExcludeText")
                        .HasColumnType("text")
                        .HasColumnName("exclude_text");

                    b.Property<string>("HabitatDescription")
                        .HasColumnType("text")
                        .HasColumnName("habitat_description");

                    b.Property<string>("NddbHabitatDescription")
                        .HasColumnType("text")
                        .HasColumnName("nddb_habitat_description");

                    b.Property<Guid>("PlantSpeciesId")
                        .HasColumnType("uuid")
                        .HasColumnName("plant_species_id");

                    b.Property<string>("ProtectionSummary")
                        .HasColumnType("text")
                        .HasColumnName("protection_summary");

                    b.Property<string>("SpiHabitatDescription")
                        .HasColumnType("text")
                        .HasColumnName("spi_habitat_description");

                    b.HasKey("Guid");

                    b.HasIndex("BotanicalScopingId");

                    b.HasIndex("PlantSpeciesId");

                    b.ToTable("botanical_scoping_species", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.BotanicalSurvey", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<Guid>("BotanicalScopingId")
                        .HasColumnType("uuid")
                        .HasColumnName("botanical_scoping_id");

                    b.Property<Guid>("BotanicalSurveyAreaId")
                        .HasColumnType("uuid")
                        .HasColumnName("botanical_survey_area_id");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<Guid>("DeviceInfoID")
                        .HasColumnType("uuid")
                        .HasColumnName("device_info_id");

                    b.Property<Guid>("DistrictId")
                        .HasColumnType("uuid")
                        .HasColumnName("district_id");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_time");

                    b.Property<LineString>("Geometry")
                        .IsRequired()
                        .HasColumnType("geometry(LineString,26710)")
                        .HasColumnName("geometry");

                    b.Property<bool>("ManualTrack")
                        .HasColumnType("boolean")
                        .HasColumnName("manual_track");

                    b.Property<string>("OtherSurveyors")
                        .HasColumnType("text")
                        .HasColumnName("other_surveyors");

                    b.Property<bool>("Repository")
                        .HasColumnType("boolean")
                        .HasColumnName("repository");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time");

                    b.Property<string>("SurveyName")
                        .HasColumnType("text")
                        .HasColumnName("survey_name");

                    b.Property<Guid>("THP_AreaId")
                        .HasColumnType("uuid")
                        .HasColumnName("thp_area_id");

                    b.Property<TimeSpan>("TimeSpent")
                        .HasColumnType("interval")
                        .HasColumnName("time_spent");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("UserModifiedId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_modified_id");

                    b.Property<bool>("_delete")
                        .HasColumnType("boolean");

                    b.HasKey("Guid");

                    b.HasIndex("BotanicalScopingId");

                    b.HasIndex("BotanicalSurveyAreaId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("THP_AreaId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserModifiedId");

                    b.ToTable("botanical_surveys", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.BotanicalSurveyArea", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<string>("AreaName")
                        .HasColumnType("text")
                        .HasColumnName("area_name");

                    b.Property<string>("Aspect")
                        .HasColumnType("text")
                        .HasColumnName("aspect");

                    b.Property<Guid>("BotanicalScopingId")
                        .HasColumnType("uuid")
                        .HasColumnName("botanical_scoping_id");

                    b.Property<string>("Boulders")
                        .HasColumnType("text")
                        .HasColumnName("boulders");

                    b.Property<string>("Canopy")
                        .HasColumnType("text")
                        .HasColumnName("canopy");

                    b.Property<string>("Comments")
                        .HasColumnType("text")
                        .HasColumnName("comments");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<Guid>("DistrictId")
                        .HasColumnType("uuid")
                        .HasColumnName("district_id");

                    b.Property<string>("GeneralHabitat")
                        .HasColumnType("text")
                        .HasColumnName("general_habitat");

                    b.Property<MultiPolygon>("Geometry")
                        .IsRequired()
                        .HasColumnType("geometry(MultiPolygon,26710)")
                        .HasColumnName("geometry");

                    b.Property<bool>("LavaCap")
                        .HasColumnType("boolean")
                        .HasColumnName("lava_cap");

                    b.Property<string>("OtherWetlands")
                        .HasColumnType("text")
                        .HasColumnName("other_wetlands");

                    b.Property<bool>("Pond")
                        .HasColumnType("boolean")
                        .HasColumnName("pond");

                    b.Property<bool>("Repository")
                        .HasColumnType("boolean")
                        .HasColumnName("repository");

                    b.Property<string>("RockOutcrops")
                        .HasColumnType("text")
                        .HasColumnName("rock_outcrops");

                    b.Property<string>("Slope")
                        .HasColumnType("text")
                        .HasColumnName("slope");

                    b.Property<bool>("SpringSeep")
                        .HasColumnType("boolean")
                        .HasColumnName("spring_seep");

                    b.Property<string>("Substrate")
                        .HasColumnType("text")
                        .HasColumnName("substrate");

                    b.Property<string>("SurveyType")
                        .HasColumnType("text")
                        .HasColumnName("survey_type");

                    b.Property<int>("Surveys")
                        .HasColumnType("integer")
                        .HasColumnName("surveys");

                    b.Property<Guid>("THP_AreaId")
                        .HasColumnType("uuid")
                        .HasColumnName("thp_area_id");

                    b.Property<bool>("TalusScree")
                        .HasColumnType("boolean")
                        .HasColumnName("talus_scree");

                    b.Property<string>("UnderstoryVegetation")
                        .HasColumnType("text")
                        .HasColumnName("understory_vegetation");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("UserModifiedId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_modified_id");

                    b.Property<bool>("_delete")
                        .HasColumnType("boolean");

                    b.HasKey("Guid");

                    b.HasIndex("BotanicalScopingId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("THP_AreaId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserModifiedId");

                    b.ToTable("botanical_survey_areas", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.CDFW_SpottedOwl", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<string>("AGESEX")
                        .HasColumnType("text")
                        .HasColumnName("agesex");

                    b.Property<string>("CNAME")
                        .HasColumnType("text")
                        .HasColumnName("cname");

                    b.Property<string>("COMMENTS")
                        .HasColumnType("text")
                        .HasColumnName("comments");

                    b.Property<string>("COORDSRC")
                        .HasColumnType("text")
                        .HasColumnName("coordsrc");

                    b.Property<string>("DATEOBS")
                        .HasColumnType("text")
                        .HasColumnName("dateobs");

                    b.Property<string>("DOCID")
                        .HasColumnType("text")
                        .HasColumnName("docid");

                    b.Property<Guid>("DistrictId")
                        .HasColumnType("uuid")
                        .HasColumnName("district_id");

                    b.Property<Point>("Geometry")
                        .HasColumnType("geometry(Point,26710)")
                        .HasColumnName("geometry");

                    b.Property<string>("HIGHESTUSE")
                        .HasColumnType("text")
                        .HasColumnName("highestuse");

                    b.Property<Guid>("Hex160Id")
                        .HasColumnType("uuid")
                        .HasColumnName("hex160_id");

                    b.Property<double>("LATDD_N83")
                        .HasColumnType("double precision")
                        .HasColumnName("latdd_n83");

                    b.Property<double>("LONDD_N83")
                        .HasColumnType("double precision")
                        .HasColumnName("londd_n83");

                    b.Property<string>("MASTEROWL")
                        .HasColumnType("text")
                        .HasColumnName("masterowl");

                    b.Property<string>("MTRS")
                        .HasColumnType("text")
                        .HasColumnName("mtrs");

                    b.Property<string>("NEST")
                        .HasColumnType("text")
                        .HasColumnName("nest");

                    b.Property<int>("NUMADOBS")
                        .HasColumnType("integer")
                        .HasColumnName("numadobs");

                    b.Property<string>("NUMYOUNG")
                        .HasColumnType("text")
                        .HasColumnName("numyoung");

                    b.Property<string>("OBSERVER")
                        .HasColumnType("text")
                        .HasColumnName("observer");

                    b.Property<int>("OBSID")
                        .HasColumnType("integer")
                        .HasColumnName("obsid");

                    b.Property<string>("PAIR")
                        .HasColumnType("text")
                        .HasColumnName("pair");

                    b.Property<Guid>("Quad75Id")
                        .HasColumnType("uuid")
                        .HasColumnName("quad75_id");

                    b.Property<string>("SNAME")
                        .HasColumnType("text")
                        .HasColumnName("sname");

                    b.Property<string>("SUBSPECIES")
                        .HasColumnType("text")
                        .HasColumnName("subspecies");

                    b.Property<string>("SYMBOLOGY")
                        .HasColumnType("text")
                        .HasColumnName("symbology");

                    b.Property<string>("TIMEOBS")
                        .HasColumnType("text")
                        .HasColumnName("timeobs");

                    b.Property<string>("TYPEOBS")
                        .HasColumnType("text")
                        .HasColumnName("typeobs");

                    b.Property<Guid>("WatershedId")
                        .HasColumnType("uuid")
                        .HasColumnName("watershed_id");

                    b.HasKey("Guid");

                    b.HasIndex("DistrictId");

                    b.HasIndex("Hex160Id");

                    b.HasIndex("Quad75Id");

                    b.HasIndex("WatershedId");

                    b.ToTable("cdfw_spotted_owls", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.CDFW_SpottedOwlDiagram", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<Guid>("DistrictId")
                        .HasColumnType("uuid")
                        .HasColumnName("district_id");

                    b.Property<LineString>("Geometry")
                        .HasColumnType("geometry(LineString,26710)")
                        .HasColumnName("geometry");

                    b.HasKey("Guid");

                    b.HasIndex("DistrictId");

                    b.ToTable("cdfw_spotted_owl_diagrams", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.CNDDBOccurrence", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<string>("ACCURACY")
                        .HasColumnType("text")
                        .HasColumnName("accuracy");

                    b.Property<double>("AREA")
                        .HasColumnType("double precision")
                        .HasColumnName("area");

                    b.Property<int>("AVLCODE")
                        .HasColumnType("integer")
                        .HasColumnName("avlcode");

                    b.Property<string>("CALLIST")
                        .HasColumnType("text")
                        .HasColumnName("callist");

                    b.Property<string>("CDFWSTATUS")
                        .HasColumnType("text")
                        .HasColumnName("cdfwstatus");

                    b.Property<string>("CNAME")
                        .HasColumnType("text")
                        .HasColumnName("cname");

                    b.Property<string>("ECOLOGICAL")
                        .HasColumnType("text")
                        .HasColumnName("ecological");

                    b.Property<int>("ELEVATION")
                        .HasColumnType("integer")
                        .HasColumnName("elevation");

                    b.Property<string>("ELMCODE")
                        .HasColumnType("text")
                        .HasColumnName("elmcode");

                    b.Property<string>("ELMDATE")
                        .HasColumnType("text")
                        .HasColumnName("elmdate");

                    b.Property<int>("ELMTYPE")
                        .HasColumnType("integer")
                        .HasColumnName("elmtype");

                    b.Property<int>("EOCOUNT")
                        .HasColumnType("integer")
                        .HasColumnName("eocount");

                    b.Property<int>("EONDX")
                        .HasColumnType("integer")
                        .HasColumnName("eondx");

                    b.Property<string>("FEDLIST")
                        .HasColumnType("text")
                        .HasColumnName("fedlist");

                    b.Property<string>("GENERAL")
                        .HasColumnType("text")
                        .HasColumnName("general");

                    b.Property<string>("GRANK")
                        .HasColumnType("text")
                        .HasColumnName("grank");

                    b.Property<MultiPolygon>("Geometry")
                        .HasColumnType("geometry(MultiPolygon,26710)")
                        .HasColumnName("geometry");

                    b.Property<string>("KEYCOUNTY")
                        .HasColumnType("text")
                        .HasColumnName("keycounty");

                    b.Property<string>("KEYQUAD")
                        .HasColumnType("text")
                        .HasColumnName("keyquad");

                    b.Property<string>("KQUADNAME")
                        .HasColumnType("text")
                        .HasColumnName("kquadname");

                    b.Property<string>("LASTUPDATE")
                        .HasColumnType("text")
                        .HasColumnName("lastupdate");

                    b.Property<string>("LOCATION")
                        .HasColumnType("text")
                        .HasColumnName("location");

                    b.Property<string>("LOCDETAILS")
                        .HasColumnType("text")
                        .HasColumnName("locdetails");

                    b.Property<string>("MAPNDX")
                        .HasColumnType("text")
                        .HasColumnName("mapndx");

                    b.Property<int>("OCCNUMBER")
                        .HasColumnType("integer")
                        .HasColumnName("occnumber");

                    b.Property<string>("OCCRANK")
                        .HasColumnType("text")
                        .HasColumnName("occrank");

                    b.Property<string>("OCCTYPE")
                        .HasColumnType("text")
                        .HasColumnName("occtype");

                    b.Property<string>("OTHRSTATUS")
                        .HasColumnType("text")
                        .HasColumnName("othrstatus");

                    b.Property<string>("OWNERMGT")
                        .HasColumnType("text")
                        .HasColumnName("ownermgt");

                    b.Property<int>("PARTS")
                        .HasColumnType("integer")
                        .HasColumnName("parts");

                    b.Property<double>("PERIMETER")
                        .HasColumnType("double precision")
                        .HasColumnName("perimeter");

                    b.Property<string>("PLSS")
                        .HasColumnType("text")
                        .HasColumnName("plss");

                    b.Property<string>("PRESENCE")
                        .HasColumnType("text")
                        .HasColumnName("presence");

                    b.Property<string>("RPLANTRANK")
                        .HasColumnType("text")
                        .HasColumnName("rplantrank");

                    b.Property<string>("SENSITIVE")
                        .HasColumnType("text")
                        .HasColumnName("sensitive");

                    b.Property<string>("SITEDATE")
                        .HasColumnType("text")
                        .HasColumnName("sitedate");

                    b.Property<string>("SNAME")
                        .HasColumnType("text")
                        .HasColumnName("sname");

                    b.Property<string>("SRANK")
                        .HasColumnType("text")
                        .HasColumnName("srank");

                    b.Property<int>("Symbology")
                        .HasColumnType("integer")
                        .HasColumnName("symbology");

                    b.Property<string>("SymbologyText")
                        .HasColumnType("text")
                        .HasColumnName("symbology_text");

                    b.Property<string>("TAXONGROUP")
                        .HasColumnType("text")
                        .HasColumnName("taxongroup");

                    b.Property<string>("THREAT")
                        .HasColumnType("text")
                        .HasColumnName("threat");

                    b.Property<string>("THREATLIST")
                        .HasColumnType("text")
                        .HasColumnName("threatlist");

                    b.HasKey("Guid");

                    b.ToTable("cnddb_occurrences", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.DeletedGeometry", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<LineString>("LineGeometry")
                        .HasColumnType("geometry(LineString,26710)")
                        .HasColumnName("line_geometry");

                    b.Property<MultiPolygon>("MPolyGeometry")
                        .HasColumnType("geometry(MultiPolygon,26710)")
                        .HasColumnName("mpoly_geometry");

                    b.Property<Guid>("ObjectGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("object_guid");

                    b.Property<Point>("PointGeometry")
                        .HasColumnType("geometry(Point,26710)")
                        .HasColumnName("point_eometry");

                    b.Property<Polygon>("PolyGeometry")
                        .HasColumnType("geometry(Polygon,26710)")
                        .HasColumnName("poly_geometry");

                    b.HasKey("Guid");

                    b.ToTable("deleted_geometries", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.DeviceInfo", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<Guid>("AmphibianElementId")
                        .HasColumnType("uuid")
                        .HasColumnName("amphibian_element_id");

                    b.Property<Guid>("AmphibianSurveyId")
                        .HasColumnType("uuid")
                        .HasColumnName("amphibian_survey_id");

                    b.Property<Guid>("BotanicalElementId")
                        .HasColumnType("uuid")
                        .HasColumnName("botanical_element_id");

                    b.Property<Guid>("BotanicalSurveyId")
                        .HasColumnType("uuid")
                        .HasColumnName("botanical_survey_id");

                    b.Property<string>("Datum")
                        .HasColumnType("text")
                        .HasColumnName("datum");

                    b.Property<DateTime>("DeviceTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("device_time");

                    b.Property<Point>("Geometry")
                        .IsRequired()
                        .HasColumnType("geometry(Point,26710)")
                        .HasColumnName("geometry");

                    b.Property<double>("HorizontalAccuracy")
                        .HasColumnType("double precision")
                        .HasColumnName("horizontal_accuracy");

                    b.Property<double>("Lat")
                        .HasColumnType("double precision")
                        .HasColumnName("lat");

                    b.Property<double>("Lon")
                        .HasColumnType("double precision")
                        .HasColumnName("lon");

                    b.Property<Guid>("OwlBandingId")
                        .HasColumnType("uuid")
                        .HasColumnName("owl_banding_id");

                    b.Property<Guid>("SiteCallingId")
                        .HasColumnType("uuid")
                        .HasColumnName("site_calling_id");

                    b.HasKey("Guid");

                    b.HasIndex("AmphibianElementId")
                        .IsUnique();

                    b.HasIndex("AmphibianSurveyId")
                        .IsUnique();

                    b.HasIndex("BotanicalElementId")
                        .IsUnique();

                    b.HasIndex("BotanicalSurveyId")
                        .IsUnique();

                    b.HasIndex("OwlBandingId")
                        .IsUnique();

                    b.HasIndex("SiteCallingId")
                        .IsUnique();

                    b.ToTable("device_infos", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.District", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("district_name");

                    b.Property<string>("ManagementArea")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("management_area");

                    b.HasKey("Guid");

                    b.ToTable("districts", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.DistrictExtendedGeometry", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<Guid>("DistrictId")
                        .HasColumnType("uuid")
                        .HasColumnName("district_id");

                    b.Property<MultiPolygon>("Geometry")
                        .HasColumnType("geometry(MultiPolygon,26710)")
                        .HasColumnName("geometry");

                    b.HasKey("Guid");

                    b.HasIndex("DistrictId");

                    b.ToTable("district_extended_geometries", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.FloweringTimeline", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<string>("ActiveFrom")
                        .HasColumnType("text")
                        .HasColumnName("active_from");

                    b.Property<string>("ActiveTo")
                        .HasColumnType("text")
                        .HasColumnName("active_to");

                    b.Property<Guid>("PlantSpeciesId")
                        .HasColumnType("uuid")
                        .HasColumnName("plant_species_id");

                    b.HasKey("Guid");

                    b.HasIndex("PlantSpeciesId");

                    b.ToTable("flowering_timelines", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.Hex160", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<int>("CallingResponses")
                        .HasColumnType("integer")
                        .HasColumnName("calling_responses");

                    b.Property<Guid>("CurrentProtectionZoneID")
                        .HasColumnType("uuid")
                        .HasColumnName("current_preotection_zone_id");

                    b.Property<int>("Drops")
                        .HasColumnType("integer")
                        .HasColumnName("drops");

                    b.Property<int>("FollowUps")
                        .HasColumnType("integer")
                        .HasColumnName("follow_ups");

                    b.Property<Polygon>("Geometry")
                        .HasColumnType("geometry(Polygon,26710)")
                        .HasColumnName("geometry");

                    b.Property<string>("Hex160ID")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("hex160_id");

                    b.Property<DateTime>("LatestActivity")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("latest_activity");

                    b.Property<string>("RecentActivity")
                        .HasColumnType("text")
                        .HasColumnName("recent_activity");

                    b.Property<int>("Skips")
                        .HasColumnType("integer")
                        .HasColumnName("skips");

                    b.HasKey("Guid");

                    b.HasIndex("CurrentProtectionZoneID");

                    b.ToTable("hex160s", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.Hex160RequiredPass", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<Guid>("BirdSpeciesId")
                        .HasColumnType("uuid")
                        .HasColumnName("bird_species_id");

                    b.Property<int>("CurrentPasses")
                        .HasColumnType("integer")
                        .HasColumnName("current_passes");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<bool>("Dropped")
                        .HasColumnType("boolean")
                        .HasColumnName("dropped");

                    b.Property<Polygon>("Geometry")
                        .HasColumnType("geometry(Polygon,26710)")
                        .HasColumnName("geometry");

                    b.Property<Guid>("Hex160Id")
                        .HasColumnType("uuid")
                        .HasColumnName("hex160_id");

                    b.Property<bool>("Repository")
                        .HasColumnType("boolean")
                        .HasColumnName("repository");

                    b.Property<int>("RequiredPasses")
                        .HasColumnType("integer")
                        .HasColumnName("required_passes");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("UserModifiedId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_modified_id");

                    b.Property<bool>("_delete")
                        .HasColumnType("boolean");

                    b.HasKey("Guid");

                    b.HasIndex("BirdSpeciesId");

                    b.HasIndex("Hex160Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserModifiedId");

                    b.ToTable("hex160_required_passes", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.NestingStatus", b =>
                {
                    b.Property<string>("Status")
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.ToTable("nesting_status", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.OtherWildlife", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<Guid>("SiteCallingId")
                        .HasColumnType("uuid")
                        .HasColumnName("site_calling_id");

                    b.Property<Guid>("WildlifeSpeciesId")
                        .HasColumnType("uuid")
                        .HasColumnName("wildlife_species_id");

                    b.Property<bool>("_delete")
                        .HasColumnType("boolean");

                    b.HasKey("Guid");

                    b.HasIndex("SiteCallingId");

                    b.HasIndex("WildlifeSpeciesId");

                    b.ToTable("other_wildlife_records", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.OwlBanding", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<string>("AgeClass")
                        .HasColumnType("text")
                        .HasColumnName("age_class");

                    b.Property<string>("Bander")
                        .HasColumnType("text")
                        .HasColumnName("bander");

                    b.Property<string>("BandingLeg")
                        .HasColumnType("text")
                        .HasColumnName("banding_leg");

                    b.Property<string>("BandingPattern")
                        .HasColumnType("text")
                        .HasColumnName("banding_pattern");

                    b.Property<string>("Bands")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bands");

                    b.Property<Guid>("BirdSpeciesId")
                        .HasColumnType("uuid")
                        .HasColumnName("bird_species_id");

                    b.Property<bool>("Blood")
                        .HasColumnType("boolean")
                        .HasColumnName("blood");

                    b.Property<string>("CaptureMethod")
                        .HasColumnType("text")
                        .HasColumnName("capture_method");

                    b.Property<string>("Capturer")
                        .HasColumnType("text")
                        .HasColumnName("capturer");

                    b.Property<string>("Comments")
                        .HasColumnType("text")
                        .HasColumnName("comments");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("Datum")
                        .HasColumnType("text")
                        .HasColumnName("datum");

                    b.Property<Guid>("DeviceInfoID")
                        .HasColumnType("uuid")
                        .HasColumnName("device_info_id");

                    b.Property<Guid>("DistrictId")
                        .HasColumnType("uuid")
                        .HasColumnName("district_id");

                    b.Property<bool>("Ectoparasites")
                        .HasColumnType("boolean")
                        .HasColumnName("ectoparasites");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_time");

                    b.Property<bool>("Feathers")
                        .HasColumnType("boolean")
                        .HasColumnName("feathers");

                    b.Property<double>("Footpad")
                        .HasColumnType("double precision")
                        .HasColumnName("footpad");

                    b.Property<string>("GPS_TagId")
                        .HasColumnType("text")
                        .HasColumnName("gps_tag_id");

                    b.Property<Point>("Geometry")
                        .IsRequired()
                        .HasColumnType("geometry(Point,26710)")
                        .HasColumnName("geometry");

                    b.Property<Guid>("Hex160Id")
                        .HasColumnType("uuid")
                        .HasColumnName("hex160_id");

                    b.Property<double>("Lat")
                        .HasColumnType("double precision")
                        .HasColumnName("lat");

                    b.Property<double>("Lon")
                        .HasColumnType("double precision")
                        .HasColumnName("lon");

                    b.Property<bool>("OralSample")
                        .HasColumnType("boolean")
                        .HasColumnName("oral_sample");

                    b.Property<Guid>("ProtectionZoneID")
                        .HasColumnType("uuid")
                        .HasColumnName("preotection_zone_id");

                    b.Property<Guid>("Quad75Id")
                        .HasColumnType("uuid")
                        .HasColumnName("quad75_id");

                    b.Property<string>("RecordType")
                        .HasColumnType("text")
                        .HasColumnName("record_type");

                    b.Property<bool>("Repository")
                        .HasColumnType("boolean")
                        .HasColumnName("repository");

                    b.Property<string>("Sex")
                        .HasColumnType("text")
                        .HasColumnName("sex");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time");

                    b.Property<double>("TailLength")
                        .HasColumnType("double precision")
                        .HasColumnName("tail_length");

                    b.Property<double>("Temperature")
                        .HasColumnType("double precision")
                        .HasColumnName("temperature");

                    b.Property<string>("TrapCode")
                        .HasColumnType("text")
                        .HasColumnName("trap_code");

                    b.Property<string>("USFWS_BandColor")
                        .HasColumnType("text")
                        .HasColumnName("usfws_band_color");

                    b.Property<string>("USFWS_BandNum")
                        .HasColumnType("text")
                        .HasColumnName("usfws_band_num");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("UserModifiedId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_modified_id");

                    b.Property<Guid>("WatershedId")
                        .HasColumnType("uuid")
                        .HasColumnName("watershed_id");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision")
                        .HasColumnName("weight");

                    b.Property<double>("WingChord")
                        .HasColumnType("double precision")
                        .HasColumnName("wing_chord");

                    b.Property<bool>("_delete")
                        .HasColumnType("boolean");

                    b.HasKey("Guid");

                    b.HasIndex("BirdSpeciesId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("Hex160Id");

                    b.HasIndex("ProtectionZoneID");

                    b.HasIndex("Quad75Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserModifiedId");

                    b.HasIndex("WatershedId");

                    b.ToTable("owl_bandings", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.PermanentCallStation", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<Point>("Geometry")
                        .HasColumnType("geometry(Point,26710)")
                        .HasColumnName("geometry");

                    b.Property<Guid>("Hex160Id")
                        .HasColumnType("uuid")
                        .HasColumnName("hex160_id");

                    b.Property<string>("PCS_ID")
                        .HasColumnType("text")
                        .HasColumnName("pcs_id");

                    b.Property<bool>("Repository")
                        .HasColumnType("boolean")
                        .HasColumnName("repository");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("UserModifiedId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_modified_id");

                    b.Property<bool>("_delete")
                        .HasColumnType("boolean");

                    b.HasKey("Guid");

                    b.HasIndex("Hex160Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserModifiedId");

                    b.ToTable("permanent_call_stations", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.Picture", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<Guid>("AmphibianElementId")
                        .HasColumnType("uuid")
                        .HasColumnName("amphibian_element_id");

                    b.Property<Guid>("BotanicalElementId")
                        .HasColumnType("uuid")
                        .HasColumnName("botanical_element_id");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_time");

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("bytea")
                        .HasColumnName("image_data");

                    b.Property<Guid>("OwlBandingId")
                        .HasColumnType("uuid")
                        .HasColumnName("owl_banding_id");

                    b.Property<byte[]>("PreviewData")
                        .HasColumnType("bytea")
                        .HasColumnName("preview_data");

                    b.Property<Guid>("SiteCallingId")
                        .HasColumnType("uuid")
                        .HasColumnName("site_calling_id");

                    b.HasKey("Guid");

                    b.HasIndex("AmphibianElementId");

                    b.HasIndex("BotanicalElementId");

                    b.HasIndex("OwlBandingId");

                    b.HasIndex("SiteCallingId");

                    b.ToTable("pictures", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.PlantProtectionSummary", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<Guid>("PlantSpeciesId")
                        .HasColumnType("uuid")
                        .HasColumnName("plant_species_id");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uuid")
                        .HasColumnName("region_id");

                    b.Property<string>("Summary")
                        .HasColumnType("text")
                        .HasColumnName("summary");

                    b.HasKey("Guid");

                    b.HasIndex("PlantSpeciesId");

                    b.HasIndex("RegionId");

                    b.ToTable("plant_protection_summaries", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.PlantSpecies", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<string>("CalList")
                        .HasColumnType("text")
                        .HasColumnName("cal_list");

                    b.Property<string>("ComName")
                        .HasColumnType("text")
                        .HasColumnName("com_name");

                    b.Property<string>("ElmCode")
                        .HasColumnType("text")
                        .HasColumnName("elm_code");

                    b.Property<string>("Family")
                        .HasColumnType("text")
                        .HasColumnName("family");

                    b.Property<string>("FedList")
                        .HasColumnType("text")
                        .HasColumnName("fed_list");

                    b.Property<string>("GRank")
                        .HasColumnType("text")
                        .HasColumnName("g_rank");

                    b.Property<string>("GenHabitat")
                        .HasColumnType("text")
                        .HasColumnName("gen_habitat");

                    b.Property<string>("Habitats")
                        .HasColumnType("text")
                        .HasColumnName("habitats");

                    b.Property<string>("MicroHabitat")
                        .HasColumnType("text")
                        .HasColumnName("micro_habitat");

                    b.Property<string>("OtherStatus")
                        .HasColumnType("text")
                        .HasColumnName("other_status");

                    b.Property<string>("RPlantRank")
                        .HasColumnType("text")
                        .HasColumnName("r_plant_rank");

                    b.Property<string>("SRank")
                        .HasColumnType("text")
                        .HasColumnName("s_rank");

                    b.Property<string>("SciName")
                        .HasColumnType("text")
                        .HasColumnName("sci_name");

                    b.Property<string>("SpeciesCode")
                        .HasColumnType("text")
                        .HasColumnName("species_code");

                    b.Property<string>("SpiHabitat")
                        .HasColumnType("text")
                        .HasColumnName("spi_habitat");

                    b.Property<string>("TaxonGroup")
                        .HasColumnType("text")
                        .HasColumnName("taxon_group");

                    b.HasKey("Guid");

                    b.ToTable("plant_species", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.ProtectionZone", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<MultiPolygon>("Geometry")
                        .HasColumnType("geometry(MultiPolygon,26710)")
                        .HasColumnName("geometry");

                    b.Property<string>("PZ_ID")
                        .HasColumnType("text")
                        .HasColumnName("pz_id");

                    b.Property<bool>("Repository")
                        .HasColumnType("boolean")
                        .HasColumnName("repository");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("UserModifiedId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_modified_id");

                    b.Property<bool>("_delete")
                        .HasColumnType("boolean");

                    b.HasKey("Guid");

                    b.HasIndex("UserId");

                    b.HasIndex("UserModifiedId");

                    b.ToTable("protection_zones", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.Quad75", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<double>("Area")
                        .HasColumnType("double precision")
                        .HasColumnName("area");

                    b.Property<string>("B_M")
                        .HasColumnType("text")
                        .HasColumnName("b_m");

                    b.Property<string>("Border")
                        .HasColumnType("text")
                        .HasColumnName("border");

                    b.Property<string>("CNPSCode")
                        .HasColumnType("text")
                        .HasColumnName("cnps_code");

                    b.Property<Polygon>("Geometry")
                        .HasColumnType("geometry(Polygon,26710)")
                        .HasColumnName("geometry");

                    b.Property<double>("Perimeter")
                        .HasColumnType("double precision")
                        .HasColumnName("perimeter");

                    b.Property<string>("Q100Name")
                        .HasColumnType("text")
                        .HasColumnName("q100_name");

                    b.Property<int>("Q24Year")
                        .HasColumnType("integer")
                        .HasColumnName("q24_year");

                    b.Property<string>("QuadCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("quad_code");

                    b.Property<string>("QuadName")
                        .HasColumnType("text")
                        .HasColumnName("quad_name");

                    b.Property<string>("QuadSize")
                        .HasColumnType("text")
                        .HasColumnName("quad_size");

                    b.Property<string>("Sensitive")
                        .HasColumnType("text")
                        .HasColumnName("sensitive");

                    b.Property<string>("UTMZone")
                        .HasColumnType("text")
                        .HasColumnName("utm_zone");

                    b.Property<string>("UsgsCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("isgs_code");

                    b.HasKey("Guid");

                    b.ToTable("quad75s", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.Region", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<string>("RegionName")
                        .HasColumnType("text")
                        .HasColumnName("region_name");

                    b.HasKey("Guid");

                    b.ToTable("regions", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.RegionalPlantList", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<Guid>("PlantSpeciesId")
                        .HasColumnType("uuid")
                        .HasColumnName("plant_species_id");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uuid")
                        .HasColumnName("region_id");

                    b.HasKey("Guid");

                    b.HasIndex("PlantSpeciesId");

                    b.HasIndex("RegionId");

                    b.ToTable("regional_plant_lists", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.ReproductiveStatus", b =>
                {
                    b.Property<string>("Status")
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.ToTable("reproductive_status", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.SiteCalling", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<string>("AreaDescription")
                        .HasColumnType("text")
                        .HasColumnName("area_description");

                    b.Property<string>("Comments")
                        .HasColumnType("text")
                        .HasColumnName("comments");

                    b.Property<double>("DBH")
                        .HasColumnType("double precision")
                        .HasColumnName("dbh");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_added");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("Datum")
                        .HasColumnType("text")
                        .HasColumnName("datum");

                    b.Property<Guid>("DeviceInfoID")
                        .HasColumnType("uuid")
                        .HasColumnName("device_info_id");

                    b.Property<Guid>("DistrictId")
                        .HasColumnType("uuid")
                        .HasColumnName("district_id");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_time");

                    b.Property<Point>("Geometry")
                        .IsRequired()
                        .HasColumnType("geometry(Point,26710)")
                        .HasColumnName("geometry");

                    b.Property<Guid>("Hex160Id")
                        .HasColumnType("uuid")
                        .HasColumnName("hex160_id");

                    b.Property<double>("Lat")
                        .HasColumnType("double precision")
                        .HasColumnName("lat");

                    b.Property<double>("Lon")
                        .HasColumnType("double precision")
                        .HasColumnName("lon");

                    b.Property<bool>("ManualPassChanged")
                        .HasColumnType("boolean")
                        .HasColumnName("manual_pass_changed");

                    b.Property<bool>("Moused")
                        .HasColumnType("boolean")
                        .HasColumnName("moused");

                    b.Property<double>("NestHeight")
                        .HasColumnType("double precision")
                        .HasColumnName("nest_height");

                    b.Property<bool>("NestTree")
                        .HasColumnType("boolean")
                        .HasColumnName("nest_tree");

                    b.Property<string>("NestType")
                        .HasColumnType("text")
                        .HasColumnName("nest_type");

                    b.Property<string>("NestingStatus")
                        .HasColumnType("text")
                        .HasColumnName("nesting_status");

                    b.Property<int>("PZPassNumber")
                        .HasColumnType("integer")
                        .HasColumnName("pz_pass_number");

                    b.Property<int>("PassNumber")
                        .HasColumnType("integer")
                        .HasColumnName("pass_number");

                    b.Property<string>("Precipitation")
                        .HasColumnType("text")
                        .HasColumnName("precipitation");

                    b.Property<Guid>("ProtectionZoneID")
                        .HasColumnType("uuid")
                        .HasColumnName("preotection_zone_id");

                    b.Property<Guid>("Quad75Id")
                        .HasColumnType("uuid")
                        .HasColumnName("quad75_id");

                    b.Property<string>("RecordType")
                        .HasColumnType("text")
                        .HasColumnName("record_type");

                    b.Property<bool>("Repository")
                        .HasColumnType("boolean")
                        .HasColumnName("repository");

                    b.Property<string>("ReproductiveStatus")
                        .HasColumnType("text")
                        .HasColumnName("reproductive_status");

                    b.Property<string>("SPOW_OccupancyStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("spow_occupancy_status");

                    b.Property<Guid>("SiteCallingTrackID")
                        .HasColumnType("uuid")
                        .HasColumnName("site_calling_track_id");

                    b.Property<string>("SiteID")
                        .HasColumnType("text")
                        .HasColumnName("site_id");

                    b.Property<bool>("SpeciesPresent")
                        .HasColumnType("boolean")
                        .HasColumnName("species_present");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time");

                    b.Property<DateTime>("SunsetTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("sunset_time");

                    b.Property<Guid>("SurveySpeciesId")
                        .HasColumnType("uuid")
                        .HasColumnName("bird_species_survey_id");

                    b.Property<string>("SurveyType1")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("survey_type1");

                    b.Property<string>("SurveyType2")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("survey_type2");

                    b.Property<bool>("TargetSpeciesPresent")
                        .HasColumnType("boolean")
                        .HasColumnName("target_species_present");

                    b.Property<string>("TreeSpecies")
                        .HasColumnType("text")
                        .HasColumnName("tree_species");

                    b.Property<bool>("TreeTagged")
                        .HasColumnType("boolean")
                        .HasColumnName("tree_tagged");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("UserModifiedId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_modified_id");

                    b.Property<Guid>("WatershedId")
                        .HasColumnType("uuid")
                        .HasColumnName("watershed_id");

                    b.Property<string>("Wind")
                        .HasColumnType("text")
                        .HasColumnName("wind");

                    b.Property<bool>("YearlyActivityCenter")
                        .HasColumnType("boolean")
                        .HasColumnName("yearly_activity_center");

                    b.Property<bool>("_delete")
                        .HasColumnType("boolean");

                    b.HasKey("Guid");

                    b.HasIndex("DistrictId");

                    b.HasIndex("Hex160Id");

                    b.HasIndex("ProtectionZoneID");

                    b.HasIndex("Quad75Id");

                    b.HasIndex("SurveySpeciesId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserModifiedId");

                    b.HasIndex("WatershedId");

                    b.ToTable("site_callings", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.SiteCallingDetection", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<string>("Age")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("age");

                    b.Property<double>("Bearing")
                        .HasColumnType("double precision")
                        .HasColumnName("bearing");

                    b.Property<string>("Datum")
                        .HasColumnType("text")
                        .HasColumnName("datum");

                    b.Property<string>("DetectionMethod")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("detection_method");

                    b.Property<DateTime>("DetectionTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("detection_time");

                    b.Property<double>("Distance")
                        .HasColumnType("double precision")
                        .HasColumnName("distance");

                    b.Property<bool>("EstimatedLocation")
                        .HasColumnType("boolean")
                        .HasColumnName("estimated_location");

                    b.Property<string>("FemaleBindingLeg")
                        .HasColumnType("text")
                        .HasColumnName("female_banding_leg");

                    b.Property<string>("FemaleBindingPattern")
                        .HasColumnType("text")
                        .HasColumnName("female_banding_pattern");

                    b.Property<Point>("Geometry")
                        .IsRequired()
                        .HasColumnType("geometry(Point,26710)")
                        .HasColumnName("geometry");

                    b.Property<double>("Lat")
                        .HasColumnType("double precision")
                        .HasColumnName("lat");

                    b.Property<double>("Lon")
                        .HasColumnType("double precision")
                        .HasColumnName("lon");

                    b.Property<string>("MaleBindingLeg")
                        .HasColumnType("text")
                        .HasColumnName("male_banding_leg");

                    b.Property<string>("MaleBindingPattern")
                        .HasColumnType("text")
                        .HasColumnName("male_banding_pattern");

                    b.Property<int>("NumberOfYoung")
                        .HasColumnType("integer")
                        .HasColumnName("number_of_young");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sex");

                    b.Property<Guid>("SiteCallingId")
                        .HasColumnType("uuid")
                        .HasColumnName("site_calling_id");

                    b.Property<Guid>("SpeciesFoundId")
                        .HasColumnType("uuid")
                        .HasColumnName("bird_species_found_id");

                    b.Property<string>("SpeciesSite")
                        .HasColumnType("text")
                        .HasColumnName("species_site");

                    b.Property<Guid>("UserLocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_location_id");

                    b.HasKey("Guid");

                    b.HasIndex("SpeciesFoundId");

                    b.ToTable("site_calling_detections", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.SiteCallingTrack", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<LineString>("Geometry")
                        .HasColumnType("geometry(LineString,26710)")
                        .HasColumnName("geometry");

                    b.Property<Guid>("SiteCallingId")
                        .HasColumnType("uuid")
                        .HasColumnName("site_calling_id");

                    b.HasKey("Guid");

                    b.HasIndex("SiteCallingId")
                        .IsUnique();

                    b.ToTable("site_calling_tracks", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.SPIPlantPoint", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<Guid>("DistrictId")
                        .HasColumnType("uuid")
                        .HasColumnName("district_id");

                    b.Property<Point>("Geometry")
                        .IsRequired()
                        .HasColumnType("geometry(Point,26710)")
                        .HasColumnName("geometry");

                    b.Property<Guid>("Hex160Id")
                        .HasColumnType("uuid")
                        .HasColumnName("hex160_id");

                    b.Property<double>("Lat")
                        .HasColumnType("double precision")
                        .HasColumnName("lat");

                    b.Property<double>("Lon")
                        .HasColumnType("double precision")
                        .HasColumnName("lon");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<Guid>("PlantSpeciesId")
                        .HasColumnType("uuid")
                        .HasColumnName("plant_species_id");

                    b.Property<Guid>("Quad75Id")
                        .HasColumnType("uuid")
                        .HasColumnName("quad75_id");

                    b.Property<string>("THP")
                        .HasColumnType("text")
                        .HasColumnName("thp");

                    b.Property<Guid>("WatershedId")
                        .HasColumnType("uuid")
                        .HasColumnName("watershed_id");

                    b.HasKey("Guid");

                    b.HasIndex("DistrictId");

                    b.HasIndex("Hex160Id");

                    b.HasIndex("PlantSpeciesId");

                    b.HasIndex("Quad75Id");

                    b.HasIndex("WatershedId");

                    b.ToTable("spi_plant_points", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.SPIPlantPolygon", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<string>("Associated")
                        .HasColumnType("text")
                        .HasColumnName("associated");

                    b.Property<int>("CNDDB_Occurrence")
                        .HasColumnType("integer")
                        .HasColumnName("cnddb_occurrence");

                    b.Property<string>("Comments")
                        .HasColumnType("text")
                        .HasColumnName("comments");

                    b.Property<string>("CoordSource")
                        .HasColumnType("text")
                        .HasColumnName("coord_source");

                    b.Property<string>("Datum")
                        .HasColumnType("text")
                        .HasColumnName("datum");

                    b.Property<Guid>("DistrictId")
                        .HasColumnType("uuid")
                        .HasColumnName("district_id");

                    b.Property<string>("Disturbance")
                        .HasColumnType("text")
                        .HasColumnName("disturbance");

                    b.Property<int>("Flowering")
                        .HasColumnType("integer")
                        .HasColumnName("flowering");

                    b.Property<int>("Fruiting")
                        .HasColumnType("integer")
                        .HasColumnName("fruiting");

                    b.Property<Polygon>("Geometry")
                        .IsRequired()
                        .HasColumnType("geometry(Polygon,26710)")
                        .HasColumnName("geometry");

                    b.Property<string>("HabDesc")
                        .HasColumnType("text")
                        .HasColumnName("hab_desc");

                    b.Property<string>("LandUse")
                        .HasColumnType("text")
                        .HasColumnName("land_use");

                    b.Property<string>("Landowner")
                        .HasColumnType("text")
                        .HasColumnName("land_owner");

                    b.Property<double>("Lat")
                        .HasColumnType("double precision")
                        .HasColumnName("lat");

                    b.Property<string>("Link")
                        .HasColumnType("text")
                        .HasColumnName("link");

                    b.Property<string>("Location")
                        .HasColumnType("text")
                        .HasColumnName("location");

                    b.Property<double>("Lon")
                        .HasColumnType("double precision")
                        .HasColumnName("lon");

                    b.Property<string>("NAME1_")
                        .HasColumnType("text")
                        .HasColumnName("name1_");

                    b.Property<int>("NumInd")
                        .HasColumnType("integer")
                        .HasColumnName("num_ind");

                    b.Property<int>("NumIndMax")
                        .HasColumnType("integer")
                        .HasColumnName("num_ind_max");

                    b.Property<string>("ObsContact")
                        .HasColumnType("text")
                        .HasColumnName("obs_contract");

                    b.Property<Guid>("PlantSpeciesId")
                        .HasColumnType("uuid")
                        .HasColumnName("plant_species_id");

                    b.Property<string>("SiteQuality")
                        .HasColumnType("text")
                        .HasColumnName("site_quality");

                    b.Property<string>("Surveyor")
                        .HasColumnType("text")
                        .HasColumnName("surveyor");

                    b.Property<string>("Threats")
                        .HasColumnType("text")
                        .HasColumnName("threats");

                    b.Property<int>("Vegetative")
                        .HasColumnType("integer")
                        .HasColumnName("vegetative");

                    b.HasKey("Guid");

                    b.HasIndex("DistrictId");

                    b.HasIndex("PlantSpeciesId");

                    b.ToTable("spi_plant_polygons", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.SPOW_OccupancyStatus", b =>
                {
                    b.Property<string>("Status")
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.ToTable("spow_occupancy_status", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.THP_Area", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<string>("THPName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("thp_name");

                    b.HasKey("Guid");

                    b.ToTable("thp_areas", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.UserLocation", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<string>("Datum")
                        .HasColumnType("text")
                        .HasColumnName("datum");

                    b.Property<Point>("Geometry")
                        .IsRequired()
                        .HasColumnType("geometry(Point,26710)")
                        .HasColumnName("geometry");

                    b.Property<double>("Lat")
                        .HasColumnType("double precision")
                        .HasColumnName("lat");

                    b.Property<double>("Lon")
                        .HasColumnType("double precision")
                        .HasColumnName("lon");

                    b.Property<Guid>("SiteCallingDetectionId")
                        .HasColumnType("uuid")
                        .HasColumnName("site_calling_detection_id");

                    b.HasKey("Guid");

                    b.HasIndex("SiteCallingDetectionId")
                        .IsUnique();

                    b.ToTable("user_locations", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.Watershed", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<string>("ASP_UP")
                        .HasColumnType("text")
                        .HasColumnName("asp_up");

                    b.Property<double>("BasinLength")
                        .HasColumnType("double precision")
                        .HasColumnName("basin_length");

                    b.Property<int>("BasinMType")
                        .HasColumnType("integer")
                        .HasColumnName("basin_m_type");

                    b.Property<double>("ChanelLength")
                        .HasColumnType("double precision")
                        .HasColumnName("chanel_length");

                    b.Property<string>("ChanelOrientation")
                        .HasColumnType("text")
                        .HasColumnName("chanel_orientation");

                    b.Property<string>("D303")
                        .HasColumnType("text")
                        .HasColumnName("d303");

                    b.Property<string>("DownStrWshd")
                        .HasColumnType("text")
                        .HasColumnName("down_str_wshd");

                    b.Property<bool?>("ESU")
                        .HasColumnType("boolean")
                        .HasColumnName("esu");

                    b.Property<double>("ElevationMax")
                        .HasColumnType("double precision")
                        .HasColumnName("elevation_max");

                    b.Property<double>("ElevationMin")
                        .HasColumnType("double precision")
                        .HasColumnName("elevation_min");

                    b.Property<string>("Geology")
                        .HasColumnType("text")
                        .HasColumnName("geology");

                    b.Property<MultiPolygon>("Geometry")
                        .HasColumnType("geometry(MultiPolygon,26710)")
                        .HasColumnName("geometry");

                    b.Property<string>("HumintPop")
                        .HasColumnType("text")
                        .HasColumnName("humint_pop");

                    b.Property<string>("HumintRec")
                        .HasColumnType("text")
                        .HasColumnName("humint_rec");

                    b.Property<string>("HumintVis")
                        .HasColumnType("text")
                        .HasColumnName("humint_vis");

                    b.Property<string>("HydroArea")
                        .HasColumnType("text")
                        .HasColumnName("hydro_area");

                    b.Property<string>("HydroReg")
                        .HasColumnType("text")
                        .HasColumnName("hydro_reg");

                    b.Property<string>("HydroSuba")
                        .HasColumnType("text")
                        .HasColumnName("hydro_suba");

                    b.Property<string>("Hydrologic")
                        .HasColumnType("text")
                        .HasColumnName("hydrologic");

                    b.Property<double>("MouthLat")
                        .HasColumnType("double precision")
                        .HasColumnName("mouth_lat");

                    b.Property<double>("MouthLon")
                        .HasColumnType("double precision")
                        .HasColumnName("mouth_lon");

                    b.Property<string>("MouthTRS")
                        .HasColumnType("text")
                        .HasColumnName("mouth_trs");

                    b.Property<double>("Perim001")
                        .HasColumnType("double precision")
                        .HasColumnName("perim001");

                    b.Property<double>("Perimeter")
                        .HasColumnType("double precision")
                        .HasColumnName("perimeter");

                    b.Property<string>("RWQCB")
                        .HasColumnType("text")
                        .HasColumnName("rwqcb");

                    b.Property<string>("RiverName")
                        .HasColumnType("text")
                        .HasColumnName("river_name");

                    b.Property<double>("SPIAcres")
                        .HasColumnType("double precision")
                        .HasColumnName("spi_acres");

                    b.Property<string>("SuperPlan")
                        .HasColumnType("text")
                        .HasColumnName("super_plan");

                    b.Property<bool?>("TOC")
                        .HasColumnType("boolean")
                        .HasColumnName("toc");

                    b.Property<string>("Threatend")
                        .HasColumnType("text")
                        .HasColumnName("threatend");

                    b.Property<double>("VallyLength")
                        .HasColumnType("double precision")
                        .HasColumnName("vally_length");

                    b.Property<double>("WS_Order")
                        .HasColumnType("double precision")
                        .HasColumnName("ws_order");

                    b.Property<string>("WatershedID")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("watershed_id");

                    b.Property<string>("WatershedName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("watershed_name");

                    b.Property<double>("WshdAcres")
                        .HasColumnType("double precision")
                        .HasColumnName("wshd_acres");

                    b.HasKey("Guid");

                    b.ToTable("watersheds", (string)null);
                });

            modelBuilder.Entity("WBIS_2.DataModel.WildlifeSpecies", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<string>("AlphaCode")
                        .HasColumnType("text")
                        .HasColumnName("alpha_code");

                    b.Property<string>("Class")
                        .HasColumnType("text")
                        .HasColumnName("class");

                    b.Property<string>("Family")
                        .HasColumnType("text")
                        .HasColumnName("family");

                    b.Property<string>("Genus")
                        .HasColumnType("text")
                        .HasColumnName("genus");

                    b.Property<string>("Order")
                        .HasColumnType("text")
                        .HasColumnName("order");

                    b.Property<string>("Species")
                        .HasColumnType("text")
                        .HasColumnName("pecies");

                    b.Property<string>("SubSpecies")
                        .HasColumnType("text")
                        .HasColumnName("sub_species");

                    b.Property<string>("WHRNum")
                        .HasColumnType("text")
                        .HasColumnName("whr_num");

                    b.Property<int>("WLSorting")
                        .HasColumnType("integer")
                        .HasColumnName("wl_sorting");

                    b.Property<string>("WildlifeSpeciesDescription")
                        .HasColumnType("text")
                        .HasColumnName("wildlife_species_description");

                    b.HasKey("Guid");

                    b.ToTable("wildlife_species", (string)null);
                });

            modelBuilder.Entity("amphibian_surveys_hex160s", b =>
                {
                    b.HasOne("WBIS_2.DataModel.AmphibianSurvey", null)
                        .WithMany()
                        .HasForeignKey("amphibian_survey_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.Hex160", null)
                        .WithMany()
                        .HasForeignKey("hex160_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("amphibian_surveys_quad75s", b =>
                {
                    b.HasOne("WBIS_2.DataModel.AmphibianSurvey", null)
                        .WithMany()
                        .HasForeignKey("amphibian_survey_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.Quad75", null)
                        .WithMany()
                        .HasForeignKey("quad75_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("amphibian_surveys_watersheds", b =>
                {
                    b.HasOne("WBIS_2.DataModel.AmphibianSurvey", null)
                        .WithMany()
                        .HasForeignKey("amphibian_survey_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.Watershed", null)
                        .WithMany()
                        .HasForeignKey("watershed_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("botanical_scopings_districts", b =>
                {
                    b.HasOne("WBIS_2.DataModel.BotanicalScoping", null)
                        .WithMany()
                        .HasForeignKey("botanical_scoping_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.District", null)
                        .WithMany()
                        .HasForeignKey("district_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("botanical_scopings_quad75s", b =>
                {
                    b.HasOne("WBIS_2.DataModel.BotanicalScoping", null)
                        .WithMany()
                        .HasForeignKey("botanical_scoping_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.Quad75", null)
                        .WithMany()
                        .HasForeignKey("quad75_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("botanical_scopings_watersheds", b =>
                {
                    b.HasOne("WBIS_2.DataModel.BotanicalScoping", null)
                        .WithMany()
                        .HasForeignKey("botanical_scoping_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.Watershed", null)
                        .WithMany()
                        .HasForeignKey("watershed_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("botanical_survey_areas_hex160s", b =>
                {
                    b.HasOne("WBIS_2.DataModel.BotanicalSurveyArea", null)
                        .WithMany()
                        .HasForeignKey("botanical_survey_area_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.Hex160", null)
                        .WithMany()
                        .HasForeignKey("hex160_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("botanical_survey_areas_quad75s", b =>
                {
                    b.HasOne("WBIS_2.DataModel.BotanicalSurveyArea", null)
                        .WithMany()
                        .HasForeignKey("botanical_survey_area_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.Quad75", null)
                        .WithMany()
                        .HasForeignKey("quad75_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("botanical_survey_areas_watersheds", b =>
                {
                    b.HasOne("WBIS_2.DataModel.BotanicalSurveyArea", null)
                        .WithMany()
                        .HasForeignKey("botanical_survey_area_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.Watershed", null)
                        .WithMany()
                        .HasForeignKey("watershed_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("botanical_surveys_hex160s", b =>
                {
                    b.HasOne("WBIS_2.DataModel.BotanicalSurvey", null)
                        .WithMany()
                        .HasForeignKey("botanical_survey_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.Hex160", null)
                        .WithMany()
                        .HasForeignKey("hex160_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("botanical_surveys_quad75s", b =>
                {
                    b.HasOne("WBIS_2.DataModel.BotanicalSurvey", null)
                        .WithMany()
                        .HasForeignKey("botanical_survey_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.Quad75", null)
                        .WithMany()
                        .HasForeignKey("quad75_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("botanical_surveys_watersheds", b =>
                {
                    b.HasOne("WBIS_2.DataModel.BotanicalSurvey", null)
                        .WithMany()
                        .HasForeignKey("botanical_survey_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.Watershed", null)
                        .WithMany()
                        .HasForeignKey("watershed_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("cnddb_occurrences_districts", b =>
                {
                    b.HasOne("WBIS_2.DataModel.CNDDBOccurrence", null)
                        .WithMany()
                        .HasForeignKey("cnddb_occurrence_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.District", null)
                        .WithMany()
                        .HasForeignKey("district_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("cnddb_occurrences_hex160s", b =>
                {
                    b.HasOne("WBIS_2.DataModel.CNDDBOccurrence", null)
                        .WithMany()
                        .HasForeignKey("cnddb_occurrence_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.Hex160", null)
                        .WithMany()
                        .HasForeignKey("hex160_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("cnddb_occurrences_quad75s", b =>
                {
                    b.HasOne("WBIS_2.DataModel.CNDDBOccurrence", null)
                        .WithMany()
                        .HasForeignKey("cnddb_occurrence_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.Quad75", null)
                        .WithMany()
                        .HasForeignKey("quad75_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("cnddb_occurrences_watersheds", b =>
                {
                    b.HasOne("WBIS_2.DataModel.CNDDBOccurrence", null)
                        .WithMany()
                        .HasForeignKey("cnddb_occurrence_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.Watershed", null)
                        .WithMany()
                        .HasForeignKey("watershed_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("hex160s_districts", b =>
                {
                    b.HasOne("WBIS_2.DataModel.District", null)
                        .WithMany()
                        .HasForeignKey("district_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.Hex160", null)
                        .WithMany()
                        .HasForeignKey("hex160_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("hex160s_protection_zones", b =>
                {
                    b.HasOne("WBIS_2.DataModel.ProtectionZone", null)
                        .WithMany()
                        .HasForeignKey("hex160_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.Hex160", null)
                        .WithMany()
                        .HasForeignKey("protection_zone_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("hex160s_quad75s", b =>
                {
                    b.HasOne("WBIS_2.DataModel.Hex160", null)
                        .WithMany()
                        .HasForeignKey("hex160_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.Quad75", null)
                        .WithMany()
                        .HasForeignKey("quad75_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.Watershed", null)
                        .WithMany()
                        .HasForeignKey("watershed_id");
                });

            modelBuilder.Entity("hex160s_watersheds", b =>
                {
                    b.HasOne("WBIS_2.DataModel.Hex160", null)
                        .WithMany()
                        .HasForeignKey("hex160_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.Watershed", null)
                        .WithMany()
                        .HasForeignKey("watershed_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("quad75s_districts", b =>
                {
                    b.HasOne("WBIS_2.DataModel.District", null)
                        .WithMany()
                        .HasForeignKey("district_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.Quad75", null)
                        .WithMany()
                        .HasForeignKey("quad75_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("spi_plant_polygons_hex160s", b =>
                {
                    b.HasOne("WBIS_2.DataModel.Hex160", null)
                        .WithMany()
                        .HasForeignKey("hex160_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.SPIPlantPolygon", null)
                        .WithMany()
                        .HasForeignKey("spi_plant_polygon_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("spi_plant_polygons_quad75s", b =>
                {
                    b.HasOne("WBIS_2.DataModel.Quad75", null)
                        .WithMany()
                        .HasForeignKey("quad75_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.SPIPlantPolygon", null)
                        .WithMany()
                        .HasForeignKey("spi_plant_polygon_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("spi_plant_polygons_watersheds", b =>
                {
                    b.HasOne("WBIS_2.DataModel.SPIPlantPolygon", null)
                        .WithMany()
                        .HasForeignKey("spi_plant_polygon_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.Watershed", null)
                        .WithMany()
                        .HasForeignKey("watershed_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("users_districts", b =>
                {
                    b.HasOne("WBIS_2.DataModel.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("application_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.District", null)
                        .WithMany()
                        .HasForeignKey("district_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("watersheds_districts", b =>
                {
                    b.HasOne("WBIS_2.DataModel.District", null)
                        .WithMany()
                        .HasForeignKey("district_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.Watershed", null)
                        .WithMany()
                        .HasForeignKey("watershed_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WBIS_2.DataModel.AmphibianElement", b =>
                {
                    b.HasOne("WBIS_2.DataModel.AmphibianSurvey", "AmphibianSurvey")
                        .WithMany("AmphibianElements")
                        .HasForeignKey("AmphibianSurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.District", "District")
                        .WithMany("AmphibianElements")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.Hex160", "Hex160")
                        .WithMany("AmphibianElements")
                        .HasForeignKey("Hex160Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.Quad75", "Quad75")
                        .WithMany("AmphibianElements")
                        .HasForeignKey("Quad75Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.ApplicationUser", "User")
                        .WithMany("AmphibianElements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.ApplicationUser", "UserModified")
                        .WithMany("AmphibianElementsModified")
                        .HasForeignKey("UserModifiedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.Watershed", "Watershed")
                        .WithMany("AmphibianElements")
                        .HasForeignKey("WatershedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AmphibianSurvey");

                    b.Navigation("District");

                    b.Navigation("Hex160");

                    b.Navigation("Quad75");

                    b.Navigation("User");

                    b.Navigation("UserModified");

                    b.Navigation("Watershed");
                });

            modelBuilder.Entity("WBIS_2.DataModel.AmphibianLocationFound", b =>
                {
                    b.HasOne("WBIS_2.DataModel.AmphibianElement", "AmphibianElement")
                        .WithOne("AmphibianLocationFound")
                        .HasForeignKey("WBIS_2.DataModel.AmphibianLocationFound", "AmphibianElementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.AmphibianSpecies", "AmphibianSpecies")
                        .WithMany("AmphibianLocationsFound")
                        .HasForeignKey("AmphibianSpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AmphibianElement");

                    b.Navigation("AmphibianSpecies");
                });

            modelBuilder.Entity("WBIS_2.DataModel.AmphibianPointOfInterest", b =>
                {
                    b.HasOne("WBIS_2.DataModel.AmphibianElement", "AmphibianElement")
                        .WithOne("AmphibianPointOfInterest")
                        .HasForeignKey("WBIS_2.DataModel.AmphibianPointOfInterest", "AmphibianElementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.AmphibianSpecies", "OtherWildlife")
                        .WithMany("AmphibianPointsOfInterest")
                        .HasForeignKey("OtherWildlifeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AmphibianElement");

                    b.Navigation("OtherWildlife");
                });

            modelBuilder.Entity("WBIS_2.DataModel.AmphibianSurvey", b =>
                {
                    b.HasOne("WBIS_2.DataModel.District", "District")
                        .WithMany("AmphibianSurveys")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.ApplicationUser", "User")
                        .WithMany("AmphibianSurveys")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.ApplicationUser", "UserModified")
                        .WithMany("AmphibianSurveysModified")
                        .HasForeignKey("UserModifiedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("User");

                    b.Navigation("UserModified");
                });

            modelBuilder.Entity("WBIS_2.DataModel.ApplicationUser", b =>
                {
                    b.HasOne("WBIS_2.DataModel.ApplicationGroup", "ApplicationGroup")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("ApplicationGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationGroup");
                });

            modelBuilder.Entity("WBIS_2.DataModel.BotanicalElement", b =>
                {
                    b.HasOne("WBIS_2.DataModel.BotanicalScoping", "BotanicalScoping")
                        .WithMany("BotanicalElements")
                        .HasForeignKey("BotanicalScopingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.BotanicalSurveyArea", "BotanicalSurveyArea")
                        .WithMany("BotanicalElement")
                        .HasForeignKey("BotanicalSurveyAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.BotanicalSurvey", "BotanicalSurvey")
                        .WithMany("BotanicalElement")
                        .HasForeignKey("BotanicalSurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.District", "District")
                        .WithMany("BotanicalElements")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.Hex160", "Hex160")
                        .WithMany("BotanicalElements")
                        .HasForeignKey("Hex160Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.Quad75", "Quad75")
                        .WithMany("BotanicalElements")
                        .HasForeignKey("Quad75Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.ApplicationUser", "User")
                        .WithMany("BotanicalElements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.ApplicationUser", "UserModified")
                        .WithMany("BotanicalElementsModified")
                        .HasForeignKey("UserModifiedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.Watershed", "Watershed")
                        .WithMany("BotanicalElements")
                        .HasForeignKey("WatershedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BotanicalScoping");

                    b.Navigation("BotanicalSurvey");

                    b.Navigation("BotanicalSurveyArea");

                    b.Navigation("District");

                    b.Navigation("Hex160");

                    b.Navigation("Quad75");

                    b.Navigation("User");

                    b.Navigation("UserModified");

                    b.Navigation("Watershed");
                });

            modelBuilder.Entity("WBIS_2.DataModel.BotanicalPlantList", b =>
                {
                    b.HasOne("WBIS_2.DataModel.BotanicalElement", "BotanicalElement")
                        .WithOne("BotanicalPlantList")
                        .HasForeignKey("WBIS_2.DataModel.BotanicalPlantList", "BotanicalElementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.PlantSpecies", "PlantSpecies")
                        .WithMany("BotanicalPlantsList")
                        .HasForeignKey("PlantSpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BotanicalElement");

                    b.Navigation("PlantSpecies");
                });

            modelBuilder.Entity("WBIS_2.DataModel.BotanicalPlantOfInterest", b =>
                {
                    b.HasOne("WBIS_2.DataModel.BotanicalElement", "BotanicalElement")
                        .WithOne("BotanicalPlantOfInterest")
                        .HasForeignKey("WBIS_2.DataModel.BotanicalPlantOfInterest", "BotanicalElementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.PlantSpecies", "PlantSpecies")
                        .WithMany("BotanicalPlantsOfInterest")
                        .HasForeignKey("PlantSpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BotanicalElement");

                    b.Navigation("PlantSpecies");
                });

            modelBuilder.Entity("WBIS_2.DataModel.BotanicalPointOfInterest", b =>
                {
                    b.HasOne("WBIS_2.DataModel.BotanicalElement", "BotanicalElement")
                        .WithOne("BotanicalPointOfInterest")
                        .HasForeignKey("WBIS_2.DataModel.BotanicalPointOfInterest", "BotanicalElementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BotanicalElement");
                });

            modelBuilder.Entity("WBIS_2.DataModel.BotanicalScoping", b =>
                {
                    b.HasOne("WBIS_2.DataModel.Region", "Region")
                        .WithMany("BotanicalScopings")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.THP_Area", "THP_Area")
                        .WithMany("BotanicalScopins")
                        .HasForeignKey("THP_AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.ApplicationUser", "User")
                        .WithMany("BotanicalScopings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.ApplicationUser", "UserModified")
                        .WithMany("BotanicalScopingsModified")
                        .HasForeignKey("UserModifiedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");

                    b.Navigation("THP_Area");

                    b.Navigation("User");

                    b.Navigation("UserModified");
                });

            modelBuilder.Entity("WBIS_2.DataModel.BotanicalScopingSpecies", b =>
                {
                    b.HasOne("WBIS_2.DataModel.BotanicalScoping", "BotanicalScoping")
                        .WithMany("BotanicalScopingSpecies")
                        .HasForeignKey("BotanicalScopingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.PlantSpecies", "PlantSpecies")
                        .WithMany("BotanicalScopingSpecies")
                        .HasForeignKey("PlantSpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BotanicalScoping");

                    b.Navigation("PlantSpecies");
                });

            modelBuilder.Entity("WBIS_2.DataModel.BotanicalSurvey", b =>
                {
                    b.HasOne("WBIS_2.DataModel.BotanicalScoping", "BotanicalScoping")
                        .WithMany("BotanicalSurveys")
                        .HasForeignKey("BotanicalScopingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.BotanicalSurveyArea", "BotanicalSurveyArea")
                        .WithMany("BotanicalSurvey")
                        .HasForeignKey("BotanicalSurveyAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.District", "District")
                        .WithMany("BotanicalSurveys")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.THP_Area", "THP_Area")
                        .WithMany()
                        .HasForeignKey("THP_AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.ApplicationUser", "User")
                        .WithMany("BotanicalSurveys")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.ApplicationUser", "UserModified")
                        .WithMany("BotanicalSurveysModified")
                        .HasForeignKey("UserModifiedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BotanicalScoping");

                    b.Navigation("BotanicalSurveyArea");

                    b.Navigation("District");

                    b.Navigation("THP_Area");

                    b.Navigation("User");

                    b.Navigation("UserModified");
                });

            modelBuilder.Entity("WBIS_2.DataModel.BotanicalSurveyArea", b =>
                {
                    b.HasOne("WBIS_2.DataModel.BotanicalScoping", "BotanicalScoping")
                        .WithMany("BotanicalSurveyAreas")
                        .HasForeignKey("BotanicalScopingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.District", "District")
                        .WithMany("BotanicalSurveyAreas")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.THP_Area", "THP_Area")
                        .WithMany("BotanicalSurveyAreas")
                        .HasForeignKey("THP_AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.ApplicationUser", "User")
                        .WithMany("BotanicalSurveyAreas")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.ApplicationUser", "UserModified")
                        .WithMany("BotanicalSurveyAreasModified")
                        .HasForeignKey("UserModifiedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BotanicalScoping");

                    b.Navigation("District");

                    b.Navigation("THP_Area");

                    b.Navigation("User");

                    b.Navigation("UserModified");
                });

            modelBuilder.Entity("WBIS_2.DataModel.CDFW_SpottedOwl", b =>
                {
                    b.HasOne("WBIS_2.DataModel.District", "District")
                        .WithMany("CDFW_SpottedOwls")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.Hex160", "Hex160")
                        .WithMany("CDFW_SpottedOwls")
                        .HasForeignKey("Hex160Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.Quad75", "Quad75")
                        .WithMany("CDFW_SpottedOwls")
                        .HasForeignKey("Quad75Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.Watershed", "Watershed")
                        .WithMany("CDFW_SpottedOwls")
                        .HasForeignKey("WatershedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("Hex160");

                    b.Navigation("Quad75");

                    b.Navigation("Watershed");
                });

            modelBuilder.Entity("WBIS_2.DataModel.CDFW_SpottedOwlDiagram", b =>
                {
                    b.HasOne("WBIS_2.DataModel.District", "District")
                        .WithMany("CDFW_SpottedOwlDiagrams")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("WBIS_2.DataModel.DeviceInfo", b =>
                {
                    b.HasOne("WBIS_2.DataModel.AmphibianElement", "AmphibianElement")
                        .WithOne("DeviceInfo")
                        .HasForeignKey("WBIS_2.DataModel.DeviceInfo", "AmphibianElementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.AmphibianSurvey", "AmphibianSurvey")
                        .WithOne("DeviceInfo")
                        .HasForeignKey("WBIS_2.DataModel.DeviceInfo", "AmphibianSurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.BotanicalElement", "BotanicalElement")
                        .WithOne("DeviceInfo")
                        .HasForeignKey("WBIS_2.DataModel.DeviceInfo", "BotanicalElementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.BotanicalSurvey", "BotanicalSurvey")
                        .WithOne("DeviceInfo")
                        .HasForeignKey("WBIS_2.DataModel.DeviceInfo", "BotanicalSurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.OwlBanding", "OwlBanding")
                        .WithOne("DeviceInfo")
                        .HasForeignKey("WBIS_2.DataModel.DeviceInfo", "OwlBandingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.SiteCalling", "SiteCalling")
                        .WithOne("DeviceInfo")
                        .HasForeignKey("WBIS_2.DataModel.DeviceInfo", "SiteCallingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AmphibianElement");

                    b.Navigation("AmphibianSurvey");

                    b.Navigation("BotanicalElement");

                    b.Navigation("BotanicalSurvey");

                    b.Navigation("OwlBanding");

                    b.Navigation("SiteCalling");
                });

            modelBuilder.Entity("WBIS_2.DataModel.DistrictExtendedGeometry", b =>
                {
                    b.HasOne("WBIS_2.DataModel.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("WBIS_2.DataModel.FloweringTimeline", b =>
                {
                    b.HasOne("WBIS_2.DataModel.PlantSpecies", "PlantSpecies")
                        .WithMany("FloweringTimelines")
                        .HasForeignKey("PlantSpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlantSpecies");
                });

            modelBuilder.Entity("WBIS_2.DataModel.Hex160", b =>
                {
                    b.HasOne("WBIS_2.DataModel.ProtectionZone", "CurrentProtectionZone")
                        .WithMany("CurrentHex160s")
                        .HasForeignKey("CurrentProtectionZoneID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentProtectionZone");
                });

            modelBuilder.Entity("WBIS_2.DataModel.Hex160RequiredPass", b =>
                {
                    b.HasOne("WBIS_2.DataModel.BirdSpecies", "BirdSpecies")
                        .WithMany("PassSpecies")
                        .HasForeignKey("BirdSpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.Hex160", "Hex160")
                        .WithMany("Hex160RequiredPasses")
                        .HasForeignKey("Hex160Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.ApplicationUser", "User")
                        .WithMany("Hex160RequiredPasses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.ApplicationUser", "UserModified")
                        .WithMany("Hex160RequiredPassesModified")
                        .HasForeignKey("UserModifiedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BirdSpecies");

                    b.Navigation("Hex160");

                    b.Navigation("User");

                    b.Navigation("UserModified");
                });

            modelBuilder.Entity("WBIS_2.DataModel.OtherWildlife", b =>
                {
                    b.HasOne("WBIS_2.DataModel.SiteCalling", "SiteCalling")
                        .WithMany("OtherWildlifeRecords")
                        .HasForeignKey("SiteCallingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.WildlifeSpecies", "WildlifeSpecies")
                        .WithMany("OtherWildlifeRecords")
                        .HasForeignKey("WildlifeSpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SiteCalling");

                    b.Navigation("WildlifeSpecies");
                });

            modelBuilder.Entity("WBIS_2.DataModel.OwlBanding", b =>
                {
                    b.HasOne("WBIS_2.DataModel.BirdSpecies", "BirdSpecies")
                        .WithMany("OwlBandings")
                        .HasForeignKey("BirdSpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.District", "District")
                        .WithMany("OwlBandings")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.Hex160", "Hex160")
                        .WithMany("OwlBandings")
                        .HasForeignKey("Hex160Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.ProtectionZone", "ProtectionZone")
                        .WithMany("OwlBandings")
                        .HasForeignKey("ProtectionZoneID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.Quad75", "Quad75")
                        .WithMany("OwlBandings")
                        .HasForeignKey("Quad75Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.ApplicationUser", "User")
                        .WithMany("OwlBandings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.ApplicationUser", "UserModified")
                        .WithMany("OwlBandingsModified")
                        .HasForeignKey("UserModifiedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.Watershed", "Watershed")
                        .WithMany("OwlBandings")
                        .HasForeignKey("WatershedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BirdSpecies");

                    b.Navigation("District");

                    b.Navigation("Hex160");

                    b.Navigation("ProtectionZone");

                    b.Navigation("Quad75");

                    b.Navigation("User");

                    b.Navigation("UserModified");

                    b.Navigation("Watershed");
                });

            modelBuilder.Entity("WBIS_2.DataModel.PermanentCallStation", b =>
                {
                    b.HasOne("WBIS_2.DataModel.Hex160", "Hex160")
                        .WithMany("PermanentCallStations")
                        .HasForeignKey("Hex160Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.ApplicationUser", "User")
                        .WithMany("PermanentCallStations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.ApplicationUser", "UserModified")
                        .WithMany("PermanentCallStationsModified")
                        .HasForeignKey("UserModifiedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hex160");

                    b.Navigation("User");

                    b.Navigation("UserModified");
                });

            modelBuilder.Entity("WBIS_2.DataModel.Picture", b =>
                {
                    b.HasOne("WBIS_2.DataModel.AmphibianElement", "AmphibianElement")
                        .WithMany("Pictures")
                        .HasForeignKey("AmphibianElementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.BotanicalElement", "BotanicalElement")
                        .WithMany("Pictures")
                        .HasForeignKey("BotanicalElementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.OwlBanding", "OwlBanding")
                        .WithMany("Pictures")
                        .HasForeignKey("OwlBandingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.SiteCalling", "SiteCalling")
                        .WithMany("Pictures")
                        .HasForeignKey("SiteCallingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AmphibianElement");

                    b.Navigation("BotanicalElement");

                    b.Navigation("OwlBanding");

                    b.Navigation("SiteCalling");
                });

            modelBuilder.Entity("WBIS_2.DataModel.PlantProtectionSummary", b =>
                {
                    b.HasOne("WBIS_2.DataModel.PlantSpecies", "PlantSpecies")
                        .WithMany("PlantProtectionSummaries")
                        .HasForeignKey("PlantSpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.Region", "Region")
                        .WithMany("PlantProtectionSummaries")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlantSpecies");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("WBIS_2.DataModel.ProtectionZone", b =>
                {
                    b.HasOne("WBIS_2.DataModel.ApplicationUser", "User")
                        .WithMany("ProtectionZones")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.ApplicationUser", "UserModified")
                        .WithMany("ProtectionZonesModified")
                        .HasForeignKey("UserModifiedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("UserModified");
                });

            modelBuilder.Entity("WBIS_2.DataModel.RegionalPlantList", b =>
                {
                    b.HasOne("WBIS_2.DataModel.PlantSpecies", "PlantSpecies")
                        .WithMany("RegionalPlantLists")
                        .HasForeignKey("PlantSpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.Region", "Region")
                        .WithMany("RegionalPlantLists")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlantSpecies");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("WBIS_2.DataModel.SiteCalling", b =>
                {
                    b.HasOne("WBIS_2.DataModel.District", "District")
                        .WithMany("SiteCallings")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.Hex160", "Hex160")
                        .WithMany("SiteCallings")
                        .HasForeignKey("Hex160Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.ProtectionZone", "ProtectionZone")
                        .WithMany("SiteCallings")
                        .HasForeignKey("ProtectionZoneID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.Quad75", "Quad75")
                        .WithMany("SiteCallings")
                        .HasForeignKey("Quad75Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.BirdSpecies", "SurveySpecies")
                        .WithMany("SurveySpecies")
                        .HasForeignKey("SurveySpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.ApplicationUser", "User")
                        .WithMany("SiteCallings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.ApplicationUser", "UserModified")
                        .WithMany("SiteCallingsModified")
                        .HasForeignKey("UserModifiedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.Watershed", "Watershed")
                        .WithMany("SiteCallings")
                        .HasForeignKey("WatershedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("Hex160");

                    b.Navigation("ProtectionZone");

                    b.Navigation("Quad75");

                    b.Navigation("SurveySpecies");

                    b.Navigation("User");

                    b.Navigation("UserModified");

                    b.Navigation("Watershed");
                });

            modelBuilder.Entity("WBIS_2.DataModel.SiteCallingDetection", b =>
                {
                    b.HasOne("WBIS_2.DataModel.SiteCalling", "SiteCalling")
                        .WithMany("SiteCallingDetections")
                        .HasForeignKey("Guid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.BirdSpecies", "SpeciesFound")
                        .WithMany("SpeciesFound")
                        .HasForeignKey("SpeciesFoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SiteCalling");

                    b.Navigation("SpeciesFound");
                });

            modelBuilder.Entity("WBIS_2.DataModel.SiteCallingTrack", b =>
                {
                    b.HasOne("WBIS_2.DataModel.SiteCalling", "SiteCalling")
                        .WithOne("SiteCallingTrack")
                        .HasForeignKey("WBIS_2.DataModel.SiteCallingTrack", "SiteCallingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SiteCalling");
                });

            modelBuilder.Entity("WBIS_2.DataModel.SPIPlantPoint", b =>
                {
                    b.HasOne("WBIS_2.DataModel.District", "District")
                        .WithMany("SPIPlantPoints")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.Hex160", "Hex160")
                        .WithMany("SPIPlantPoints")
                        .HasForeignKey("Hex160Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.PlantSpecies", "PlantSpecies")
                        .WithMany("SPIPlantPoints")
                        .HasForeignKey("PlantSpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.Quad75", "Quad75")
                        .WithMany("SPIPlantPoints")
                        .HasForeignKey("Quad75Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.Watershed", "Watershed")
                        .WithMany("SPIPlantPoints")
                        .HasForeignKey("WatershedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("Hex160");

                    b.Navigation("PlantSpecies");

                    b.Navigation("Quad75");

                    b.Navigation("Watershed");
                });

            modelBuilder.Entity("WBIS_2.DataModel.SPIPlantPolygon", b =>
                {
                    b.HasOne("WBIS_2.DataModel.District", "District")
                        .WithMany("SPIPlantPolygons")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WBIS_2.DataModel.PlantSpecies", "PlantSpecies")
                        .WithMany("SPIPlantPolys")
                        .HasForeignKey("PlantSpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("PlantSpecies");
                });

            modelBuilder.Entity("WBIS_2.DataModel.UserLocation", b =>
                {
                    b.HasOne("WBIS_2.DataModel.SiteCallingDetection", "SiteCallingDetection")
                        .WithOne("UserLocation")
                        .HasForeignKey("WBIS_2.DataModel.UserLocation", "SiteCallingDetectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SiteCallingDetection");
                });

            modelBuilder.Entity("WBIS_2.DataModel.AmphibianElement", b =>
                {
                    b.Navigation("AmphibianLocationFound");

                    b.Navigation("AmphibianPointOfInterest");

                    b.Navigation("DeviceInfo");

                    b.Navigation("Pictures");
                });

            modelBuilder.Entity("WBIS_2.DataModel.AmphibianSpecies", b =>
                {
                    b.Navigation("AmphibianLocationsFound");

                    b.Navigation("AmphibianPointsOfInterest");
                });

            modelBuilder.Entity("WBIS_2.DataModel.AmphibianSurvey", b =>
                {
                    b.Navigation("AmphibianElements");

                    b.Navigation("DeviceInfo");
                });

            modelBuilder.Entity("WBIS_2.DataModel.ApplicationGroup", b =>
                {
                    b.Navigation("ApplicationUsers");
                });

            modelBuilder.Entity("WBIS_2.DataModel.ApplicationUser", b =>
                {
                    b.Navigation("AmphibianElements");

                    b.Navigation("AmphibianElementsModified");

                    b.Navigation("AmphibianSurveys");

                    b.Navigation("AmphibianSurveysModified");

                    b.Navigation("BotanicalElements");

                    b.Navigation("BotanicalElementsModified");

                    b.Navigation("BotanicalScopings");

                    b.Navigation("BotanicalScopingsModified");

                    b.Navigation("BotanicalSurveyAreas");

                    b.Navigation("BotanicalSurveyAreasModified");

                    b.Navigation("BotanicalSurveys");

                    b.Navigation("BotanicalSurveysModified");

                    b.Navigation("Hex160RequiredPasses");

                    b.Navigation("Hex160RequiredPassesModified");

                    b.Navigation("OwlBandings");

                    b.Navigation("OwlBandingsModified");

                    b.Navigation("PermanentCallStations");

                    b.Navigation("PermanentCallStationsModified");

                    b.Navigation("ProtectionZones");

                    b.Navigation("ProtectionZonesModified");

                    b.Navigation("SiteCallings");

                    b.Navigation("SiteCallingsModified");
                });

            modelBuilder.Entity("WBIS_2.DataModel.BirdSpecies", b =>
                {
                    b.Navigation("OwlBandings");

                    b.Navigation("PassSpecies");

                    b.Navigation("SpeciesFound");

                    b.Navigation("SurveySpecies");
                });

            modelBuilder.Entity("WBIS_2.DataModel.BotanicalElement", b =>
                {
                    b.Navigation("BotanicalPlantList");

                    b.Navigation("BotanicalPlantOfInterest");

                    b.Navigation("BotanicalPointOfInterest");

                    b.Navigation("DeviceInfo");

                    b.Navigation("Pictures");
                });

            modelBuilder.Entity("WBIS_2.DataModel.BotanicalScoping", b =>
                {
                    b.Navigation("BotanicalElements");

                    b.Navigation("BotanicalScopingSpecies");

                    b.Navigation("BotanicalSurveyAreas");

                    b.Navigation("BotanicalSurveys");
                });

            modelBuilder.Entity("WBIS_2.DataModel.BotanicalSurvey", b =>
                {
                    b.Navigation("BotanicalElement");

                    b.Navigation("DeviceInfo");
                });

            modelBuilder.Entity("WBIS_2.DataModel.BotanicalSurveyArea", b =>
                {
                    b.Navigation("BotanicalElement");

                    b.Navigation("BotanicalSurvey");
                });

            modelBuilder.Entity("WBIS_2.DataModel.District", b =>
                {
                    b.Navigation("AmphibianElements");

                    b.Navigation("AmphibianSurveys");

                    b.Navigation("BotanicalElements");

                    b.Navigation("BotanicalSurveyAreas");

                    b.Navigation("BotanicalSurveys");

                    b.Navigation("CDFW_SpottedOwlDiagrams");

                    b.Navigation("CDFW_SpottedOwls");

                    b.Navigation("OwlBandings");

                    b.Navigation("SPIPlantPoints");

                    b.Navigation("SPIPlantPolygons");

                    b.Navigation("SiteCallings");
                });

            modelBuilder.Entity("WBIS_2.DataModel.Hex160", b =>
                {
                    b.Navigation("AmphibianElements");

                    b.Navigation("BotanicalElements");

                    b.Navigation("CDFW_SpottedOwls");

                    b.Navigation("Hex160RequiredPasses");

                    b.Navigation("OwlBandings");

                    b.Navigation("PermanentCallStations");

                    b.Navigation("SPIPlantPoints");

                    b.Navigation("SiteCallings");
                });

            modelBuilder.Entity("WBIS_2.DataModel.OwlBanding", b =>
                {
                    b.Navigation("DeviceInfo");

                    b.Navigation("Pictures");
                });

            modelBuilder.Entity("WBIS_2.DataModel.PlantSpecies", b =>
                {
                    b.Navigation("BotanicalPlantsList");

                    b.Navigation("BotanicalPlantsOfInterest");

                    b.Navigation("BotanicalScopingSpecies");

                    b.Navigation("FloweringTimelines");

                    b.Navigation("PlantProtectionSummaries");

                    b.Navigation("RegionalPlantLists");

                    b.Navigation("SPIPlantPoints");

                    b.Navigation("SPIPlantPolys");
                });

            modelBuilder.Entity("WBIS_2.DataModel.ProtectionZone", b =>
                {
                    b.Navigation("CurrentHex160s");

                    b.Navigation("OwlBandings");

                    b.Navigation("SiteCallings");
                });

            modelBuilder.Entity("WBIS_2.DataModel.Quad75", b =>
                {
                    b.Navigation("AmphibianElements");

                    b.Navigation("BotanicalElements");

                    b.Navigation("CDFW_SpottedOwls");

                    b.Navigation("OwlBandings");

                    b.Navigation("SPIPlantPoints");

                    b.Navigation("SiteCallings");
                });

            modelBuilder.Entity("WBIS_2.DataModel.Region", b =>
                {
                    b.Navigation("BotanicalScopings");

                    b.Navigation("PlantProtectionSummaries");

                    b.Navigation("RegionalPlantLists");
                });

            modelBuilder.Entity("WBIS_2.DataModel.SiteCalling", b =>
                {
                    b.Navigation("DeviceInfo");

                    b.Navigation("OtherWildlifeRecords");

                    b.Navigation("Pictures");

                    b.Navigation("SiteCallingDetections");

                    b.Navigation("SiteCallingTrack");
                });

            modelBuilder.Entity("WBIS_2.DataModel.SiteCallingDetection", b =>
                {
                    b.Navigation("UserLocation");
                });

            modelBuilder.Entity("WBIS_2.DataModel.THP_Area", b =>
                {
                    b.Navigation("BotanicalScopins");

                    b.Navigation("BotanicalSurveyAreas");
                });

            modelBuilder.Entity("WBIS_2.DataModel.Watershed", b =>
                {
                    b.Navigation("AmphibianElements");

                    b.Navigation("BotanicalElements");

                    b.Navigation("CDFW_SpottedOwls");

                    b.Navigation("OwlBandings");

                    b.Navigation("SPIPlantPoints");

                    b.Navigation("SiteCallings");
                });

            modelBuilder.Entity("WBIS_2.DataModel.WildlifeSpecies", b =>
                {
                    b.Navigation("OtherWildlifeRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
